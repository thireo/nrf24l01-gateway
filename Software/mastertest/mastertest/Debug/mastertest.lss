
mastertest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dbc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  00002dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007c  20000018  00002dd4  00020018  2**2
                  ALLOC
  3 .stack        00001004  20000094  00002e50  00020018  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001d810  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000296a  00000000  00000000  0003d8a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001b2c  00000000  00000000  00040213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000568  00000000  00000000  00041d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000478  00000000  00000000  000422a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000129be  00000000  00000000  0004271f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a35b  00000000  00000000  000550dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005d0db  00000000  00000000  0005f438  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000113c  00000000  00000000  000bc514  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 10 00 20 b5 27 00 00 49 28 00 00 49 28 00 00     ... .'..I(..I(..
	...
      2c:	49 28 00 00 00 00 00 00 00 00 00 00 49 28 00 00     I(..........I(..
      3c:	49 28 00 00 49 28 00 00 49 28 00 00 49 28 00 00     I(..I(..I(..I(..
      4c:	49 28 00 00 49 28 00 00 49 28 00 00 49 28 00 00     I(..I(..I(..I(..
      5c:	49 28 00 00 49 28 00 00 49 28 00 00 49 28 00 00     I(..I(..I(..I(..
      6c:	49 28 00 00 49 28 00 00 49 28 00 00 49 28 00 00     I(..I(..I(..I(..
      7c:	49 28 00 00 49 28 00 00 49 28 00 00 49 28 00 00     I(..I(..I(..I(..
	...
      94:	49 28 00 00 49 28 00 00 49 28 00 00 49 28 00 00     I(..I(..I(..I(..

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000018 	.word	0x20000018
      c4:	00000000 	.word	0x00000000
      c8:	00002dbc 	.word	0x00002dbc

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	2000001c 	.word	0x2000001c
      f8:	00002dbc 	.word	0x00002dbc
      fc:	00002dbc 	.word	0x00002dbc
     100:	00000000 	.word	0x00000000

00000104 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     104:	b580      	push	{r7, lr}
     106:	b082      	sub	sp, #8
     108:	af00      	add	r7, sp, #0
     10a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     10c:	687b      	ldr	r3, [r7, #4]
     10e:	2280      	movs	r2, #128	; 0x80
     110:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     112:	687b      	ldr	r3, [r7, #4]
     114:	2200      	movs	r2, #0
     116:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     118:	687b      	ldr	r3, [r7, #4]
     11a:	2201      	movs	r2, #1
     11c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     11e:	687b      	ldr	r3, [r7, #4]
     120:	2200      	movs	r2, #0
     122:	70da      	strb	r2, [r3, #3]
}
     124:	46c0      	nop			; (mov r8, r8)
     126:	46bd      	mov	sp, r7
     128:	b002      	add	sp, #8
     12a:	bd80      	pop	{r7, pc}

0000012c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     12c:	b580      	push	{r7, lr}
     12e:	b084      	sub	sp, #16
     130:	af00      	add	r7, sp, #0
     132:	0002      	movs	r2, r0
     134:	6039      	str	r1, [r7, #0]
     136:	1dfb      	adds	r3, r7, #7
     138:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     13a:	230c      	movs	r3, #12
     13c:	18fb      	adds	r3, r7, r3
     13e:	0018      	movs	r0, r3
     140:	4b10      	ldr	r3, [pc, #64]	; (184 <port_pin_set_config+0x58>)
     142:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     144:	230c      	movs	r3, #12
     146:	18fb      	adds	r3, r7, r3
     148:	2280      	movs	r2, #128	; 0x80
     14a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     14c:	683b      	ldr	r3, [r7, #0]
     14e:	781a      	ldrb	r2, [r3, #0]
     150:	230c      	movs	r3, #12
     152:	18fb      	adds	r3, r7, r3
     154:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     156:	683b      	ldr	r3, [r7, #0]
     158:	785a      	ldrb	r2, [r3, #1]
     15a:	230c      	movs	r3, #12
     15c:	18fb      	adds	r3, r7, r3
     15e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     160:	683b      	ldr	r3, [r7, #0]
     162:	789a      	ldrb	r2, [r3, #2]
     164:	230c      	movs	r3, #12
     166:	18fb      	adds	r3, r7, r3
     168:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     16a:	230c      	movs	r3, #12
     16c:	18fa      	adds	r2, r7, r3
     16e:	1dfb      	adds	r3, r7, #7
     170:	781b      	ldrb	r3, [r3, #0]
     172:	0011      	movs	r1, r2
     174:	0018      	movs	r0, r3
     176:	4b04      	ldr	r3, [pc, #16]	; (188 <port_pin_set_config+0x5c>)
     178:	4798      	blx	r3
}
     17a:	46c0      	nop			; (mov r8, r8)
     17c:	46bd      	mov	sp, r7
     17e:	b004      	add	sp, #16
     180:	bd80      	pop	{r7, pc}
     182:	46c0      	nop			; (mov r8, r8)
     184:	00000105 	.word	0x00000105
     188:	0000272d 	.word	0x0000272d

0000018c <system_gclk_chan_get_config_defaults>:
		if(baud_int > BAUD_INT_MAX) {
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
     18c:	b580      	push	{r7, lr}
     18e:	b082      	sub	sp, #8
     190:	af00      	add	r7, sp, #0
     192:	6078      	str	r0, [r7, #4]
     194:	687b      	ldr	r3, [r7, #4]
     196:	2200      	movs	r2, #0
     198:	701a      	strb	r2, [r3, #0]
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	46bd      	mov	sp, r7
     19e:	b002      	add	sp, #8
     1a0:	bd80      	pop	{r7, pc}

000001a2 <_sercom_get_sync_baud_val>:
     1a2:	b580      	push	{r7, lr}
	}

	*baudval = baud_calculated;
     1a4:	b086      	sub	sp, #24
     1a6:	af00      	add	r7, sp, #0
     1a8:	60f8      	str	r0, [r7, #12]
     1aa:	60b9      	str	r1, [r7, #8]
     1ac:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
     1ae:	2316      	movs	r3, #22
}
     1b0:	18fb      	adds	r3, r7, r3
     1b2:	2200      	movs	r2, #0
     1b4:	801a      	strh	r2, [r3, #0]
     1b6:	68bb      	ldr	r3, [r7, #8]
     1b8:	613b      	str	r3, [r7, #16]
     1ba:	68bb      	ldr	r3, [r7, #8]
     1bc:	085a      	lsrs	r2, r3, #1
     1be:	68fb      	ldr	r3, [r7, #12]
	if (baudrate > (external_clock / 2)) {
     1c0:	429a      	cmp	r2, r3
     1c2:	d201      	bcs.n	1c8 <_sercom_get_sync_baud_val+0x26>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1c4:	2340      	movs	r3, #64	; 0x40
     1c6:	e026      	b.n	216 <_sercom_get_sync_baud_val+0x74>
	clock_value = external_clock / 2;
     1c8:	68bb      	ldr	r3, [r7, #8]
     1ca:	085b      	lsrs	r3, r3, #1
     1cc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     1ce:	e00a      	b.n	1e6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     1d0:	693a      	ldr	r2, [r7, #16]
     1d2:	68fb      	ldr	r3, [r7, #12]
     1d4:	1ad3      	subs	r3, r2, r3
     1d6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     1d8:	2316      	movs	r3, #22
     1da:	18fb      	adds	r3, r7, r3
     1dc:	881a      	ldrh	r2, [r3, #0]
     1de:	2316      	movs	r3, #22
     1e0:	18fb      	adds	r3, r7, r3
     1e2:	3201      	adds	r2, #1
     1e4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
     1e6:	693a      	ldr	r2, [r7, #16]
     1e8:	68fb      	ldr	r3, [r7, #12]
     1ea:	429a      	cmp	r2, r3
     1ec:	d2f0      	bcs.n	1d0 <_sercom_get_sync_baud_val+0x2e>
	baud_calculated = baud_calculated - 1;
     1ee:	2316      	movs	r3, #22
     1f0:	18fb      	adds	r3, r7, r3
     1f2:	2216      	movs	r2, #22
     1f4:	18ba      	adds	r2, r7, r2
     1f6:	8812      	ldrh	r2, [r2, #0]
     1f8:	3a01      	subs	r2, #1
     1fa:	801a      	strh	r2, [r3, #0]
	if (baud_calculated > 0xFF) {
     1fc:	2316      	movs	r3, #22
     1fe:	18fb      	adds	r3, r7, r3
     200:	881b      	ldrh	r3, [r3, #0]
     202:	2bff      	cmp	r3, #255	; 0xff
     204:	d901      	bls.n	20a <_sercom_get_sync_baud_val+0x68>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     206:	2340      	movs	r3, #64	; 0x40
     208:	e005      	b.n	216 <_sercom_get_sync_baud_val+0x74>
		*baudvalue = baud_calculated;
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	2216      	movs	r2, #22
     20e:	18ba      	adds	r2, r7, r2
     210:	8812      	ldrh	r2, [r2, #0]
     212:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     214:	2300      	movs	r3, #0
}
     216:	0018      	movs	r0, r3
     218:	46bd      	mov	sp, r7
     21a:	b006      	add	sp, #24
     21c:	bd80      	pop	{r7, pc}
	...

00000220 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     220:	b580      	push	{r7, lr}
     222:	b084      	sub	sp, #16
     224:	af00      	add	r7, sp, #0
     226:	0002      	movs	r2, r0
     228:	1dfb      	adds	r3, r7, #7
     22a:	701a      	strb	r2, [r3, #0]
     22c:	1dbb      	adds	r3, r7, #6
     22e:	1c0a      	adds	r2, r1, #0
     230:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     232:	4b1a      	ldr	r3, [pc, #104]	; (29c <sercom_set_gclk_generator+0x7c>)
     234:	781b      	ldrb	r3, [r3, #0]
     236:	2201      	movs	r2, #1
     238:	4053      	eors	r3, r2
     23a:	b2db      	uxtb	r3, r3
     23c:	2b00      	cmp	r3, #0
     23e:	d103      	bne.n	248 <sercom_set_gclk_generator+0x28>
     240:	1dbb      	adds	r3, r7, #6
     242:	781b      	ldrb	r3, [r3, #0]
     244:	2b00      	cmp	r3, #0
     246:	d01b      	beq.n	280 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     248:	230c      	movs	r3, #12
     24a:	18fb      	adds	r3, r7, r3
     24c:	0018      	movs	r0, r3
     24e:	4b14      	ldr	r3, [pc, #80]	; (2a0 <sercom_set_gclk_generator+0x80>)
     250:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     252:	230c      	movs	r3, #12
     254:	18fb      	adds	r3, r7, r3
     256:	1dfa      	adds	r2, r7, #7
     258:	7812      	ldrb	r2, [r2, #0]
     25a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     25c:	230c      	movs	r3, #12
     25e:	18fb      	adds	r3, r7, r3
     260:	0019      	movs	r1, r3
     262:	200c      	movs	r0, #12
     264:	4b0f      	ldr	r3, [pc, #60]	; (2a4 <sercom_set_gclk_generator+0x84>)
     266:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     268:	200c      	movs	r0, #12
     26a:	4b0f      	ldr	r3, [pc, #60]	; (2a8 <sercom_set_gclk_generator+0x88>)
     26c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     26e:	4b0b      	ldr	r3, [pc, #44]	; (29c <sercom_set_gclk_generator+0x7c>)
     270:	1dfa      	adds	r2, r7, #7
     272:	7812      	ldrb	r2, [r2, #0]
     274:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     276:	4b09      	ldr	r3, [pc, #36]	; (29c <sercom_set_gclk_generator+0x7c>)
     278:	2201      	movs	r2, #1
     27a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     27c:	2300      	movs	r3, #0
     27e:	e008      	b.n	292 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     280:	4b06      	ldr	r3, [pc, #24]	; (29c <sercom_set_gclk_generator+0x7c>)
     282:	785b      	ldrb	r3, [r3, #1]
     284:	1dfa      	adds	r2, r7, #7
     286:	7812      	ldrb	r2, [r2, #0]
     288:	429a      	cmp	r2, r3
     28a:	d101      	bne.n	290 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     28c:	2300      	movs	r3, #0
     28e:	e000      	b.n	292 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     290:	231d      	movs	r3, #29
}
     292:	0018      	movs	r0, r3
     294:	46bd      	mov	sp, r7
     296:	b004      	add	sp, #16
     298:	bd80      	pop	{r7, pc}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	20000034 	.word	0x20000034
     2a0:	0000018d 	.word	0x0000018d
     2a4:	00002441 	.word	0x00002441
     2a8:	00002485 	.word	0x00002485

000002ac <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     2ac:	b580      	push	{r7, lr}
     2ae:	b082      	sub	sp, #8
     2b0:	af00      	add	r7, sp, #0
     2b2:	6078      	str	r0, [r7, #4]
     2b4:	000a      	movs	r2, r1
     2b6:	1cfb      	adds	r3, r7, #3
     2b8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     2ba:	687b      	ldr	r3, [r7, #4]
     2bc:	4a4d      	ldr	r2, [pc, #308]	; (3f4 <_sercom_get_default_pad+0x148>)
     2be:	4293      	cmp	r3, r2
     2c0:	d03f      	beq.n	342 <_sercom_get_default_pad+0x96>
     2c2:	4a4c      	ldr	r2, [pc, #304]	; (3f4 <_sercom_get_default_pad+0x148>)
     2c4:	4293      	cmp	r3, r2
     2c6:	d806      	bhi.n	2d6 <_sercom_get_default_pad+0x2a>
     2c8:	4a4b      	ldr	r2, [pc, #300]	; (3f8 <_sercom_get_default_pad+0x14c>)
     2ca:	4293      	cmp	r3, r2
     2cc:	d00f      	beq.n	2ee <_sercom_get_default_pad+0x42>
     2ce:	4a4b      	ldr	r2, [pc, #300]	; (3fc <_sercom_get_default_pad+0x150>)
     2d0:	4293      	cmp	r3, r2
     2d2:	d021      	beq.n	318 <_sercom_get_default_pad+0x6c>
     2d4:	e089      	b.n	3ea <_sercom_get_default_pad+0x13e>
     2d6:	4a4a      	ldr	r2, [pc, #296]	; (400 <_sercom_get_default_pad+0x154>)
     2d8:	4293      	cmp	r3, r2
     2da:	d100      	bne.n	2de <_sercom_get_default_pad+0x32>
     2dc:	e05b      	b.n	396 <_sercom_get_default_pad+0xea>
     2de:	4a49      	ldr	r2, [pc, #292]	; (404 <_sercom_get_default_pad+0x158>)
     2e0:	4293      	cmp	r3, r2
     2e2:	d100      	bne.n	2e6 <_sercom_get_default_pad+0x3a>
     2e4:	e06c      	b.n	3c0 <_sercom_get_default_pad+0x114>
     2e6:	4a48      	ldr	r2, [pc, #288]	; (408 <_sercom_get_default_pad+0x15c>)
     2e8:	4293      	cmp	r3, r2
     2ea:	d03f      	beq.n	36c <_sercom_get_default_pad+0xc0>
     2ec:	e07d      	b.n	3ea <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     2ee:	1cfb      	adds	r3, r7, #3
     2f0:	781b      	ldrb	r3, [r3, #0]
     2f2:	2b01      	cmp	r3, #1
     2f4:	d00a      	beq.n	30c <_sercom_get_default_pad+0x60>
     2f6:	dc02      	bgt.n	2fe <_sercom_get_default_pad+0x52>
     2f8:	2b00      	cmp	r3, #0
     2fa:	d005      	beq.n	308 <_sercom_get_default_pad+0x5c>
     2fc:	e075      	b.n	3ea <_sercom_get_default_pad+0x13e>
     2fe:	2b02      	cmp	r3, #2
     300:	d006      	beq.n	310 <_sercom_get_default_pad+0x64>
     302:	2b03      	cmp	r3, #3
     304:	d006      	beq.n	314 <_sercom_get_default_pad+0x68>
     306:	e070      	b.n	3ea <_sercom_get_default_pad+0x13e>
     308:	4b40      	ldr	r3, [pc, #256]	; (40c <_sercom_get_default_pad+0x160>)
     30a:	e06f      	b.n	3ec <_sercom_get_default_pad+0x140>
     30c:	4b40      	ldr	r3, [pc, #256]	; (410 <_sercom_get_default_pad+0x164>)
     30e:	e06d      	b.n	3ec <_sercom_get_default_pad+0x140>
     310:	4b40      	ldr	r3, [pc, #256]	; (414 <_sercom_get_default_pad+0x168>)
     312:	e06b      	b.n	3ec <_sercom_get_default_pad+0x140>
     314:	4b40      	ldr	r3, [pc, #256]	; (418 <_sercom_get_default_pad+0x16c>)
     316:	e069      	b.n	3ec <_sercom_get_default_pad+0x140>
     318:	1cfb      	adds	r3, r7, #3
     31a:	781b      	ldrb	r3, [r3, #0]
     31c:	2b01      	cmp	r3, #1
     31e:	d00a      	beq.n	336 <_sercom_get_default_pad+0x8a>
     320:	dc02      	bgt.n	328 <_sercom_get_default_pad+0x7c>
     322:	2b00      	cmp	r3, #0
     324:	d005      	beq.n	332 <_sercom_get_default_pad+0x86>
     326:	e060      	b.n	3ea <_sercom_get_default_pad+0x13e>
     328:	2b02      	cmp	r3, #2
     32a:	d006      	beq.n	33a <_sercom_get_default_pad+0x8e>
     32c:	2b03      	cmp	r3, #3
     32e:	d006      	beq.n	33e <_sercom_get_default_pad+0x92>
     330:	e05b      	b.n	3ea <_sercom_get_default_pad+0x13e>
     332:	2303      	movs	r3, #3
     334:	e05a      	b.n	3ec <_sercom_get_default_pad+0x140>
     336:	4b39      	ldr	r3, [pc, #228]	; (41c <_sercom_get_default_pad+0x170>)
     338:	e058      	b.n	3ec <_sercom_get_default_pad+0x140>
     33a:	4b39      	ldr	r3, [pc, #228]	; (420 <_sercom_get_default_pad+0x174>)
     33c:	e056      	b.n	3ec <_sercom_get_default_pad+0x140>
     33e:	4b39      	ldr	r3, [pc, #228]	; (424 <_sercom_get_default_pad+0x178>)
     340:	e054      	b.n	3ec <_sercom_get_default_pad+0x140>
     342:	1cfb      	adds	r3, r7, #3
     344:	781b      	ldrb	r3, [r3, #0]
     346:	2b01      	cmp	r3, #1
     348:	d00a      	beq.n	360 <_sercom_get_default_pad+0xb4>
     34a:	dc02      	bgt.n	352 <_sercom_get_default_pad+0xa6>
     34c:	2b00      	cmp	r3, #0
     34e:	d005      	beq.n	35c <_sercom_get_default_pad+0xb0>
     350:	e04b      	b.n	3ea <_sercom_get_default_pad+0x13e>
     352:	2b02      	cmp	r3, #2
     354:	d006      	beq.n	364 <_sercom_get_default_pad+0xb8>
     356:	2b03      	cmp	r3, #3
     358:	d006      	beq.n	368 <_sercom_get_default_pad+0xbc>
     35a:	e046      	b.n	3ea <_sercom_get_default_pad+0x13e>
     35c:	4b32      	ldr	r3, [pc, #200]	; (428 <_sercom_get_default_pad+0x17c>)
     35e:	e045      	b.n	3ec <_sercom_get_default_pad+0x140>
     360:	4b32      	ldr	r3, [pc, #200]	; (42c <_sercom_get_default_pad+0x180>)
     362:	e043      	b.n	3ec <_sercom_get_default_pad+0x140>
     364:	4b32      	ldr	r3, [pc, #200]	; (430 <_sercom_get_default_pad+0x184>)
     366:	e041      	b.n	3ec <_sercom_get_default_pad+0x140>
     368:	4b32      	ldr	r3, [pc, #200]	; (434 <_sercom_get_default_pad+0x188>)
     36a:	e03f      	b.n	3ec <_sercom_get_default_pad+0x140>
     36c:	1cfb      	adds	r3, r7, #3
     36e:	781b      	ldrb	r3, [r3, #0]
     370:	2b01      	cmp	r3, #1
     372:	d00a      	beq.n	38a <_sercom_get_default_pad+0xde>
     374:	dc02      	bgt.n	37c <_sercom_get_default_pad+0xd0>
     376:	2b00      	cmp	r3, #0
     378:	d005      	beq.n	386 <_sercom_get_default_pad+0xda>
     37a:	e036      	b.n	3ea <_sercom_get_default_pad+0x13e>
     37c:	2b02      	cmp	r3, #2
     37e:	d006      	beq.n	38e <_sercom_get_default_pad+0xe2>
     380:	2b03      	cmp	r3, #3
     382:	d006      	beq.n	392 <_sercom_get_default_pad+0xe6>
     384:	e031      	b.n	3ea <_sercom_get_default_pad+0x13e>
     386:	4b2c      	ldr	r3, [pc, #176]	; (438 <_sercom_get_default_pad+0x18c>)
     388:	e030      	b.n	3ec <_sercom_get_default_pad+0x140>
     38a:	4b2c      	ldr	r3, [pc, #176]	; (43c <_sercom_get_default_pad+0x190>)
     38c:	e02e      	b.n	3ec <_sercom_get_default_pad+0x140>
     38e:	4b2c      	ldr	r3, [pc, #176]	; (440 <_sercom_get_default_pad+0x194>)
     390:	e02c      	b.n	3ec <_sercom_get_default_pad+0x140>
     392:	4b2c      	ldr	r3, [pc, #176]	; (444 <_sercom_get_default_pad+0x198>)
     394:	e02a      	b.n	3ec <_sercom_get_default_pad+0x140>
     396:	1cfb      	adds	r3, r7, #3
     398:	781b      	ldrb	r3, [r3, #0]
     39a:	2b01      	cmp	r3, #1
     39c:	d00a      	beq.n	3b4 <_sercom_get_default_pad+0x108>
     39e:	dc02      	bgt.n	3a6 <_sercom_get_default_pad+0xfa>
     3a0:	2b00      	cmp	r3, #0
     3a2:	d005      	beq.n	3b0 <_sercom_get_default_pad+0x104>
     3a4:	e021      	b.n	3ea <_sercom_get_default_pad+0x13e>
     3a6:	2b02      	cmp	r3, #2
     3a8:	d006      	beq.n	3b8 <_sercom_get_default_pad+0x10c>
     3aa:	2b03      	cmp	r3, #3
     3ac:	d006      	beq.n	3bc <_sercom_get_default_pad+0x110>
     3ae:	e01c      	b.n	3ea <_sercom_get_default_pad+0x13e>
     3b0:	4b25      	ldr	r3, [pc, #148]	; (448 <_sercom_get_default_pad+0x19c>)
     3b2:	e01b      	b.n	3ec <_sercom_get_default_pad+0x140>
     3b4:	4b25      	ldr	r3, [pc, #148]	; (44c <_sercom_get_default_pad+0x1a0>)
     3b6:	e019      	b.n	3ec <_sercom_get_default_pad+0x140>
     3b8:	4b25      	ldr	r3, [pc, #148]	; (450 <_sercom_get_default_pad+0x1a4>)
     3ba:	e017      	b.n	3ec <_sercom_get_default_pad+0x140>
     3bc:	4b25      	ldr	r3, [pc, #148]	; (454 <_sercom_get_default_pad+0x1a8>)
     3be:	e015      	b.n	3ec <_sercom_get_default_pad+0x140>
     3c0:	1cfb      	adds	r3, r7, #3
     3c2:	781b      	ldrb	r3, [r3, #0]
     3c4:	2b01      	cmp	r3, #1
     3c6:	d00a      	beq.n	3de <_sercom_get_default_pad+0x132>
     3c8:	dc02      	bgt.n	3d0 <_sercom_get_default_pad+0x124>
     3ca:	2b00      	cmp	r3, #0
     3cc:	d005      	beq.n	3da <_sercom_get_default_pad+0x12e>
     3ce:	e00c      	b.n	3ea <_sercom_get_default_pad+0x13e>
     3d0:	2b02      	cmp	r3, #2
     3d2:	d006      	beq.n	3e2 <_sercom_get_default_pad+0x136>
     3d4:	2b03      	cmp	r3, #3
     3d6:	d006      	beq.n	3e6 <_sercom_get_default_pad+0x13a>
     3d8:	e007      	b.n	3ea <_sercom_get_default_pad+0x13e>
     3da:	4b1f      	ldr	r3, [pc, #124]	; (458 <_sercom_get_default_pad+0x1ac>)
     3dc:	e006      	b.n	3ec <_sercom_get_default_pad+0x140>
     3de:	4b1f      	ldr	r3, [pc, #124]	; (45c <_sercom_get_default_pad+0x1b0>)
     3e0:	e004      	b.n	3ec <_sercom_get_default_pad+0x140>
     3e2:	4b1f      	ldr	r3, [pc, #124]	; (460 <_sercom_get_default_pad+0x1b4>)
     3e4:	e002      	b.n	3ec <_sercom_get_default_pad+0x140>
     3e6:	4b1f      	ldr	r3, [pc, #124]	; (464 <_sercom_get_default_pad+0x1b8>)
     3e8:	e000      	b.n	3ec <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     3ea:	2300      	movs	r3, #0
}
     3ec:	0018      	movs	r0, r3
     3ee:	46bd      	mov	sp, r7
     3f0:	b002      	add	sp, #8
     3f2:	bd80      	pop	{r7, pc}
     3f4:	42001000 	.word	0x42001000
     3f8:	42000800 	.word	0x42000800
     3fc:	42000c00 	.word	0x42000c00
     400:	42001800 	.word	0x42001800
     404:	42001c00 	.word	0x42001c00
     408:	42001400 	.word	0x42001400
     40c:	00040003 	.word	0x00040003
     410:	00050003 	.word	0x00050003
     414:	00060003 	.word	0x00060003
     418:	00070003 	.word	0x00070003
     41c:	00010003 	.word	0x00010003
     420:	001e0003 	.word	0x001e0003
     424:	001f0003 	.word	0x001f0003
     428:	00080003 	.word	0x00080003
     42c:	00090003 	.word	0x00090003
     430:	000a0003 	.word	0x000a0003
     434:	000b0003 	.word	0x000b0003
     438:	00100003 	.word	0x00100003
     43c:	00110003 	.word	0x00110003
     440:	00120003 	.word	0x00120003
     444:	00130003 	.word	0x00130003
     448:	000c0003 	.word	0x000c0003
     44c:	000d0003 	.word	0x000d0003
     450:	000e0003 	.word	0x000e0003
     454:	000f0003 	.word	0x000f0003
     458:	00160003 	.word	0x00160003
     45c:	00170003 	.word	0x00170003
     460:	00180003 	.word	0x00180003
     464:	00190003 	.word	0x00190003

00000468 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     468:	b590      	push	{r4, r7, lr}
     46a:	b08b      	sub	sp, #44	; 0x2c
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     470:	230c      	movs	r3, #12
     472:	18fb      	adds	r3, r7, r3
     474:	4a0f      	ldr	r2, [pc, #60]	; (4b4 <_sercom_get_sercom_inst_index+0x4c>)
     476:	ca13      	ldmia	r2!, {r0, r1, r4}
     478:	c313      	stmia	r3!, {r0, r1, r4}
     47a:	ca13      	ldmia	r2!, {r0, r1, r4}
     47c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     47e:	2300      	movs	r3, #0
     480:	627b      	str	r3, [r7, #36]	; 0x24
     482:	e00e      	b.n	4a2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     484:	230c      	movs	r3, #12
     486:	18fb      	adds	r3, r7, r3
     488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     48a:	0092      	lsls	r2, r2, #2
     48c:	58d3      	ldr	r3, [r2, r3]
     48e:	001a      	movs	r2, r3
     490:	687b      	ldr	r3, [r7, #4]
     492:	429a      	cmp	r2, r3
     494:	d102      	bne.n	49c <_sercom_get_sercom_inst_index+0x34>
			return i;
     496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     498:	b2db      	uxtb	r3, r3
     49a:	e006      	b.n	4aa <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     49e:	3301      	adds	r3, #1
     4a0:	627b      	str	r3, [r7, #36]	; 0x24
     4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     4a4:	2b05      	cmp	r3, #5
     4a6:	d9ed      	bls.n	484 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     4a8:	2300      	movs	r3, #0
}
     4aa:	0018      	movs	r0, r3
     4ac:	46bd      	mov	sp, r7
     4ae:	b00b      	add	sp, #44	; 0x2c
     4b0:	bd90      	pop	{r4, r7, pc}
     4b2:	46c0      	nop			; (mov r8, r8)
     4b4:	00002d44 	.word	0x00002d44

000004b8 <system_pinmux_get_config_defaults>:
{
     4b8:	b580      	push	{r7, lr}
     4ba:	b082      	sub	sp, #8
     4bc:	af00      	add	r7, sp, #0
     4be:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4c0:	687b      	ldr	r3, [r7, #4]
     4c2:	2280      	movs	r2, #128	; 0x80
     4c4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	2200      	movs	r2, #0
     4ca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	2201      	movs	r2, #1
     4d0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	2200      	movs	r2, #0
     4d6:	70da      	strb	r2, [r3, #3]
}
     4d8:	46c0      	nop			; (mov r8, r8)
     4da:	46bd      	mov	sp, r7
     4dc:	b002      	add	sp, #8
     4de:	bd80      	pop	{r7, pc}

000004e0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     4e0:	b580      	push	{r7, lr}
     4e2:	b084      	sub	sp, #16
     4e4:	af00      	add	r7, sp, #0
     4e6:	0002      	movs	r2, r0
     4e8:	1dfb      	adds	r3, r7, #7
     4ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     4ec:	230f      	movs	r3, #15
     4ee:	18fb      	adds	r3, r7, r3
     4f0:	1dfa      	adds	r2, r7, #7
     4f2:	7812      	ldrb	r2, [r2, #0]
     4f4:	09d2      	lsrs	r2, r2, #7
     4f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     4f8:	230e      	movs	r3, #14
     4fa:	18fb      	adds	r3, r7, r3
     4fc:	1dfa      	adds	r2, r7, #7
     4fe:	7812      	ldrb	r2, [r2, #0]
     500:	0952      	lsrs	r2, r2, #5
     502:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     504:	4b0d      	ldr	r3, [pc, #52]	; (53c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     506:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     508:	230f      	movs	r3, #15
     50a:	18fb      	adds	r3, r7, r3
     50c:	781b      	ldrb	r3, [r3, #0]
     50e:	2b00      	cmp	r3, #0
     510:	d10f      	bne.n	532 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     512:	230f      	movs	r3, #15
     514:	18fb      	adds	r3, r7, r3
     516:	781b      	ldrb	r3, [r3, #0]
     518:	009b      	lsls	r3, r3, #2
     51a:	2210      	movs	r2, #16
     51c:	4694      	mov	ip, r2
     51e:	44bc      	add	ip, r7
     520:	4463      	add	r3, ip
     522:	3b08      	subs	r3, #8
     524:	681a      	ldr	r2, [r3, #0]
     526:	230e      	movs	r3, #14
     528:	18fb      	adds	r3, r7, r3
     52a:	781b      	ldrb	r3, [r3, #0]
     52c:	01db      	lsls	r3, r3, #7
     52e:	18d3      	adds	r3, r2, r3
     530:	e000      	b.n	534 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     532:	2300      	movs	r3, #0
	}
}
     534:	0018      	movs	r0, r3
     536:	46bd      	mov	sp, r7
     538:	b004      	add	sp, #16
     53a:	bd80      	pop	{r7, pc}
     53c:	41004400 	.word	0x41004400

00000540 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
     540:	b580      	push	{r7, lr}
     542:	b086      	sub	sp, #24
     544:	af00      	add	r7, sp, #0
     546:	0002      	movs	r2, r0
     548:	1dfb      	adds	r3, r7, #7
     54a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     54c:	1dfb      	adds	r3, r7, #7
     54e:	781b      	ldrb	r3, [r3, #0]
     550:	0018      	movs	r0, r3
     552:	4b19      	ldr	r3, [pc, #100]	; (5b8 <system_pinmux_pin_get_mux_position+0x78>)
     554:	4798      	blx	r3
     556:	0003      	movs	r3, r0
     558:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
     55a:	1dfb      	adds	r3, r7, #7
     55c:	781b      	ldrb	r3, [r3, #0]
     55e:	221f      	movs	r2, #31
     560:	4013      	ands	r3, r2
     562:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     564:	697a      	ldr	r2, [r7, #20]
     566:	2140      	movs	r1, #64	; 0x40
     568:	693b      	ldr	r3, [r7, #16]
     56a:	18d3      	adds	r3, r2, r3
     56c:	185b      	adds	r3, r3, r1
     56e:	781b      	ldrb	r3, [r3, #0]
     570:	b2db      	uxtb	r3, r3
     572:	001a      	movs	r2, r3
     574:	2301      	movs	r3, #1
     576:	4013      	ands	r3, r2
     578:	d101      	bne.n	57e <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
     57a:	2380      	movs	r3, #128	; 0x80
     57c:	e018      	b.n	5b0 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     57e:	693b      	ldr	r3, [r7, #16]
     580:	085b      	lsrs	r3, r3, #1
     582:	697a      	ldr	r2, [r7, #20]
     584:	2130      	movs	r1, #48	; 0x30
     586:	18d3      	adds	r3, r2, r3
     588:	185b      	adds	r3, r3, r1
     58a:	781b      	ldrb	r3, [r3, #0]
     58c:	b2db      	uxtb	r3, r3
     58e:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
     590:	693b      	ldr	r3, [r7, #16]
     592:	2201      	movs	r2, #1
     594:	4013      	ands	r3, r2
     596:	d006      	beq.n	5a6 <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     598:	68fb      	ldr	r3, [r7, #12]
     59a:	091b      	lsrs	r3, r3, #4
     59c:	b2db      	uxtb	r3, r3
     59e:	220f      	movs	r2, #15
     5a0:	4013      	ands	r3, r2
     5a2:	b2db      	uxtb	r3, r3
     5a4:	e004      	b.n	5b0 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     5a6:	68fb      	ldr	r3, [r7, #12]
     5a8:	b2db      	uxtb	r3, r3
     5aa:	220f      	movs	r2, #15
     5ac:	4013      	ands	r3, r2
     5ae:	b2db      	uxtb	r3, r3
	}
}
     5b0:	0018      	movs	r0, r3
     5b2:	46bd      	mov	sp, r7
     5b4:	b006      	add	sp, #24
     5b6:	bd80      	pop	{r7, pc}
     5b8:	000004e1 	.word	0x000004e1

000005bc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     5bc:	b580      	push	{r7, lr}
     5be:	b082      	sub	sp, #8
     5c0:	af00      	add	r7, sp, #0
     5c2:	0002      	movs	r2, r0
     5c4:	1dfb      	adds	r3, r7, #7
     5c6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     5c8:	1dfb      	adds	r3, r7, #7
     5ca:	781b      	ldrb	r3, [r3, #0]
     5cc:	0018      	movs	r0, r3
     5ce:	4b03      	ldr	r3, [pc, #12]	; (5dc <port_get_group_from_gpio_pin+0x20>)
     5d0:	4798      	blx	r3
     5d2:	0003      	movs	r3, r0
}
     5d4:	0018      	movs	r0, r3
     5d6:	46bd      	mov	sp, r7
     5d8:	b002      	add	sp, #8
     5da:	bd80      	pop	{r7, pc}
     5dc:	000004e1 	.word	0x000004e1

000005e0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     5e0:	b580      	push	{r7, lr}
     5e2:	b084      	sub	sp, #16
     5e4:	af00      	add	r7, sp, #0
     5e6:	0002      	movs	r2, r0
     5e8:	1dfb      	adds	r3, r7, #7
     5ea:	701a      	strb	r2, [r3, #0]
     5ec:	1dbb      	adds	r3, r7, #6
     5ee:	1c0a      	adds	r2, r1, #0
     5f0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     5f2:	1dfb      	adds	r3, r7, #7
     5f4:	781b      	ldrb	r3, [r3, #0]
     5f6:	0018      	movs	r0, r3
     5f8:	4b0d      	ldr	r3, [pc, #52]	; (630 <port_pin_set_output_level+0x50>)
     5fa:	4798      	blx	r3
     5fc:	0003      	movs	r3, r0
     5fe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     600:	1dfb      	adds	r3, r7, #7
     602:	781b      	ldrb	r3, [r3, #0]
     604:	221f      	movs	r2, #31
     606:	4013      	ands	r3, r2
     608:	2201      	movs	r2, #1
     60a:	409a      	lsls	r2, r3
     60c:	0013      	movs	r3, r2
     60e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     610:	1dbb      	adds	r3, r7, #6
     612:	781b      	ldrb	r3, [r3, #0]
     614:	2b00      	cmp	r3, #0
     616:	d003      	beq.n	620 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     618:	68fb      	ldr	r3, [r7, #12]
     61a:	68ba      	ldr	r2, [r7, #8]
     61c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     61e:	e002      	b.n	626 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     620:	68fb      	ldr	r3, [r7, #12]
     622:	68ba      	ldr	r2, [r7, #8]
     624:	615a      	str	r2, [r3, #20]
}
     626:	46c0      	nop			; (mov r8, r8)
     628:	46bd      	mov	sp, r7
     62a:	b004      	add	sp, #16
     62c:	bd80      	pop	{r7, pc}
     62e:	46c0      	nop			; (mov r8, r8)
     630:	000005bd 	.word	0x000005bd

00000634 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     634:	b580      	push	{r7, lr}
     636:	b082      	sub	sp, #8
     638:	af00      	add	r7, sp, #0
     63a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     63c:	687b      	ldr	r3, [r7, #4]
     63e:	2200      	movs	r2, #0
     640:	701a      	strb	r2, [r3, #0]
}
     642:	46c0      	nop			; (mov r8, r8)
     644:	46bd      	mov	sp, r7
     646:	b002      	add	sp, #8
     648:	bd80      	pop	{r7, pc}
	...

0000064c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     64c:	b580      	push	{r7, lr}
     64e:	b082      	sub	sp, #8
     650:	af00      	add	r7, sp, #0
     652:	0002      	movs	r2, r0
     654:	6039      	str	r1, [r7, #0]
     656:	1dfb      	adds	r3, r7, #7
     658:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     65a:	1dfb      	adds	r3, r7, #7
     65c:	781b      	ldrb	r3, [r3, #0]
     65e:	2b01      	cmp	r3, #1
     660:	d00a      	beq.n	678 <system_apb_clock_set_mask+0x2c>
     662:	2b02      	cmp	r3, #2
     664:	d00f      	beq.n	686 <system_apb_clock_set_mask+0x3a>
     666:	2b00      	cmp	r3, #0
     668:	d114      	bne.n	694 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     66a:	4b0e      	ldr	r3, [pc, #56]	; (6a4 <system_apb_clock_set_mask+0x58>)
     66c:	4a0d      	ldr	r2, [pc, #52]	; (6a4 <system_apb_clock_set_mask+0x58>)
     66e:	6991      	ldr	r1, [r2, #24]
     670:	683a      	ldr	r2, [r7, #0]
     672:	430a      	orrs	r2, r1
     674:	619a      	str	r2, [r3, #24]
			break;
     676:	e00f      	b.n	698 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     678:	4b0a      	ldr	r3, [pc, #40]	; (6a4 <system_apb_clock_set_mask+0x58>)
     67a:	4a0a      	ldr	r2, [pc, #40]	; (6a4 <system_apb_clock_set_mask+0x58>)
     67c:	69d1      	ldr	r1, [r2, #28]
     67e:	683a      	ldr	r2, [r7, #0]
     680:	430a      	orrs	r2, r1
     682:	61da      	str	r2, [r3, #28]
			break;
     684:	e008      	b.n	698 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     686:	4b07      	ldr	r3, [pc, #28]	; (6a4 <system_apb_clock_set_mask+0x58>)
     688:	4a06      	ldr	r2, [pc, #24]	; (6a4 <system_apb_clock_set_mask+0x58>)
     68a:	6a11      	ldr	r1, [r2, #32]
     68c:	683a      	ldr	r2, [r7, #0]
     68e:	430a      	orrs	r2, r1
     690:	621a      	str	r2, [r3, #32]
			break;
     692:	e001      	b.n	698 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     694:	2317      	movs	r3, #23
     696:	e000      	b.n	69a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     698:	2300      	movs	r3, #0
}
     69a:	0018      	movs	r0, r3
     69c:	46bd      	mov	sp, r7
     69e:	b002      	add	sp, #8
     6a0:	bd80      	pop	{r7, pc}
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	40000400 	.word	0x40000400

000006a8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     6a8:	b580      	push	{r7, lr}
     6aa:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     6ac:	4b05      	ldr	r3, [pc, #20]	; (6c4 <system_is_debugger_present+0x1c>)
     6ae:	789b      	ldrb	r3, [r3, #2]
     6b0:	b2db      	uxtb	r3, r3
     6b2:	001a      	movs	r2, r3
     6b4:	2302      	movs	r3, #2
     6b6:	4013      	ands	r3, r2
     6b8:	1e5a      	subs	r2, r3, #1
     6ba:	4193      	sbcs	r3, r2
     6bc:	b2db      	uxtb	r3, r3
}
     6be:	0018      	movs	r0, r3
     6c0:	46bd      	mov	sp, r7
     6c2:	bd80      	pop	{r7, pc}
     6c4:	41002000 	.word	0x41002000

000006c8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     6c8:	b580      	push	{r7, lr}
     6ca:	b084      	sub	sp, #16
     6cc:	af00      	add	r7, sp, #0
     6ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	681b      	ldr	r3, [r3, #0]
     6d4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     6d6:	68fb      	ldr	r3, [r7, #12]
     6d8:	7b9b      	ldrb	r3, [r3, #14]
     6da:	b2db      	uxtb	r3, r3
     6dc:	001a      	movs	r2, r3
     6de:	2302      	movs	r3, #2
     6e0:	4013      	ands	r3, r2
     6e2:	1e5a      	subs	r2, r3, #1
     6e4:	4193      	sbcs	r3, r2
     6e6:	b2db      	uxtb	r3, r3
}
     6e8:	0018      	movs	r0, r3
     6ea:	46bd      	mov	sp, r7
     6ec:	b004      	add	sp, #16
     6ee:	bd80      	pop	{r7, pc}

000006f0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     6f0:	b580      	push	{r7, lr}
     6f2:	b084      	sub	sp, #16
     6f4:	af00      	add	r7, sp, #0
     6f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	681b      	ldr	r3, [r3, #0]
     6fc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     6fe:	68fb      	ldr	r3, [r7, #12]
     700:	7b9b      	ldrb	r3, [r3, #14]
     702:	b2db      	uxtb	r3, r3
     704:	001a      	movs	r2, r3
     706:	2301      	movs	r3, #1
     708:	4013      	ands	r3, r2
     70a:	1e5a      	subs	r2, r3, #1
     70c:	4193      	sbcs	r3, r2
     70e:	b2db      	uxtb	r3, r3
}
     710:	0018      	movs	r0, r3
     712:	46bd      	mov	sp, r7
     714:	b004      	add	sp, #16
     716:	bd80      	pop	{r7, pc}

00000718 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     718:	b580      	push	{r7, lr}
     71a:	b084      	sub	sp, #16
     71c:	af00      	add	r7, sp, #0
     71e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     720:	687b      	ldr	r3, [r7, #4]
     722:	681b      	ldr	r3, [r3, #0]
     724:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     726:	68fb      	ldr	r3, [r7, #12]
     728:	7b9b      	ldrb	r3, [r3, #14]
     72a:	b2db      	uxtb	r3, r3
     72c:	001a      	movs	r2, r3
     72e:	2304      	movs	r3, #4
     730:	4013      	ands	r3, r2
     732:	1e5a      	subs	r2, r3, #1
     734:	4193      	sbcs	r3, r2
     736:	b2db      	uxtb	r3, r3
}
     738:	0018      	movs	r0, r3
     73a:	46bd      	mov	sp, r7
     73c:	b004      	add	sp, #16
     73e:	bd80      	pop	{r7, pc}

00000740 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     740:	b580      	push	{r7, lr}
     742:	b084      	sub	sp, #16
     744:	af00      	add	r7, sp, #0
     746:	6078      	str	r0, [r7, #4]
     748:	000a      	movs	r2, r1
     74a:	1cbb      	adds	r3, r7, #2
     74c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     74e:	687b      	ldr	r3, [r7, #4]
     750:	681b      	ldr	r3, [r3, #0]
     752:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     754:	687b      	ldr	r3, [r7, #4]
     756:	0018      	movs	r0, r3
     758:	4b0b      	ldr	r3, [pc, #44]	; (788 <spi_write+0x48>)
     75a:	4798      	blx	r3
     75c:	0003      	movs	r3, r0
     75e:	001a      	movs	r2, r3
     760:	2301      	movs	r3, #1
     762:	4053      	eors	r3, r2
     764:	b2db      	uxtb	r3, r3
     766:	2b00      	cmp	r3, #0
     768:	d001      	beq.n	76e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     76a:	2305      	movs	r3, #5
     76c:	e007      	b.n	77e <spi_write+0x3e>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     76e:	1cbb      	adds	r3, r7, #2
     770:	881b      	ldrh	r3, [r3, #0]
     772:	05db      	lsls	r3, r3, #23
     774:	0ddb      	lsrs	r3, r3, #23
     776:	b29a      	uxth	r2, r3
     778:	68fb      	ldr	r3, [r7, #12]
     77a:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
     77c:	2300      	movs	r3, #0
}
     77e:	0018      	movs	r0, r3
     780:	46bd      	mov	sp, r7
     782:	b004      	add	sp, #16
     784:	bd80      	pop	{r7, pc}
     786:	46c0      	nop			; (mov r8, r8)
     788:	000006f1 	.word	0x000006f1

0000078c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     78c:	b580      	push	{r7, lr}
     78e:	b084      	sub	sp, #16
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
     794:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     796:	687b      	ldr	r3, [r7, #4]
     798:	681b      	ldr	r3, [r3, #0]
     79a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     79c:	687b      	ldr	r3, [r7, #4]
     79e:	0018      	movs	r0, r3
     7a0:	4b1b      	ldr	r3, [pc, #108]	; (810 <spi_read+0x84>)
     7a2:	4798      	blx	r3
     7a4:	0003      	movs	r3, r0
     7a6:	001a      	movs	r2, r3
     7a8:	2301      	movs	r3, #1
     7aa:	4053      	eors	r3, r2
     7ac:	b2db      	uxtb	r3, r3
     7ae:	2b00      	cmp	r3, #0
     7b0:	d001      	beq.n	7b6 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     7b2:	2310      	movs	r3, #16
     7b4:	e028      	b.n	808 <spi_read+0x7c>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     7b6:	230f      	movs	r3, #15
     7b8:	18fb      	adds	r3, r7, r3
     7ba:	2200      	movs	r2, #0
     7bc:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     7be:	68bb      	ldr	r3, [r7, #8]
     7c0:	8a1b      	ldrh	r3, [r3, #16]
     7c2:	b29b      	uxth	r3, r3
     7c4:	001a      	movs	r2, r3
     7c6:	2304      	movs	r3, #4
     7c8:	4013      	ands	r3, r2
     7ca:	d006      	beq.n	7da <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     7cc:	230f      	movs	r3, #15
     7ce:	18fb      	adds	r3, r7, r3
     7d0:	221e      	movs	r2, #30
     7d2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     7d4:	68bb      	ldr	r3, [r7, #8]
     7d6:	2204      	movs	r2, #4
     7d8:	821a      	strh	r2, [r3, #16]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     7da:	687b      	ldr	r3, [r7, #4]
     7dc:	799b      	ldrb	r3, [r3, #6]
     7de:	2b01      	cmp	r3, #1
     7e0:	d108      	bne.n	7f4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     7e2:	68bb      	ldr	r3, [r7, #8]
     7e4:	8b1b      	ldrh	r3, [r3, #24]
     7e6:	b29b      	uxth	r3, r3
     7e8:	05db      	lsls	r3, r3, #23
     7ea:	0ddb      	lsrs	r3, r3, #23
     7ec:	b29a      	uxth	r2, r3
     7ee:	683b      	ldr	r3, [r7, #0]
     7f0:	801a      	strh	r2, [r3, #0]
     7f2:	e006      	b.n	802 <spi_read+0x76>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     7f4:	68bb      	ldr	r3, [r7, #8]
     7f6:	8b1b      	ldrh	r3, [r3, #24]
     7f8:	b29b      	uxth	r3, r3
     7fa:	b2db      	uxtb	r3, r3
     7fc:	b29a      	uxth	r2, r3
     7fe:	683b      	ldr	r3, [r7, #0]
     800:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     802:	230f      	movs	r3, #15
     804:	18fb      	adds	r3, r7, r3
     806:	781b      	ldrb	r3, [r3, #0]
}
     808:	0018      	movs	r0, r3
     80a:	46bd      	mov	sp, r7
     80c:	b004      	add	sp, #16
     80e:	bd80      	pop	{r7, pc}
     810:	00000719 	.word	0x00000719

00000814 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
     814:	b580      	push	{r7, lr}
     816:	b084      	sub	sp, #16
     818:	af00      	add	r7, sp, #0
     81a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     81c:	687b      	ldr	r3, [r7, #4]
     81e:	681b      	ldr	r3, [r3, #0]
     820:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     822:	68fb      	ldr	r3, [r7, #12]
     824:	2202      	movs	r2, #2
     826:	739a      	strb	r2, [r3, #14]
}
     828:	46c0      	nop			; (mov r8, r8)
     82a:	46bd      	mov	sp, r7
     82c:	b004      	add	sp, #16
     82e:	bd80      	pop	{r7, pc}

00000830 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     830:	b590      	push	{r4, r7, lr}
     832:	b093      	sub	sp, #76	; 0x4c
     834:	af00      	add	r7, sp, #0
     836:	6078      	str	r0, [r7, #4]
     838:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     83a:	687b      	ldr	r3, [r7, #4]
     83c:	681b      	ldr	r3, [r3, #0]
     83e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     840:	687b      	ldr	r3, [r7, #4]
     842:	681b      	ldr	r3, [r3, #0]
     844:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     846:	231c      	movs	r3, #28
     848:	18fb      	adds	r3, r7, r3
     84a:	0018      	movs	r0, r3
     84c:	4b79      	ldr	r3, [pc, #484]	; (a34 <_spi_set_config+0x204>)
     84e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     850:	231c      	movs	r3, #28
     852:	18fb      	adds	r3, r7, r3
     854:	2200      	movs	r2, #0
     856:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     858:	683b      	ldr	r3, [r7, #0]
     85a:	781b      	ldrb	r3, [r3, #0]
     85c:	2b00      	cmp	r3, #0
     85e:	d103      	bne.n	868 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     860:	231c      	movs	r3, #28
     862:	18fb      	adds	r3, r7, r3
     864:	2200      	movs	r2, #0
     866:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     868:	683b      	ldr	r3, [r7, #0]
     86a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	uint32_t pad_pinmuxes[] = {
     86c:	230c      	movs	r3, #12
     86e:	18fb      	adds	r3, r7, r3
     870:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     872:	683b      	ldr	r3, [r7, #0]
     874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
     876:	230c      	movs	r3, #12
     878:	18fb      	adds	r3, r7, r3
     87a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
     87c:	683b      	ldr	r3, [r7, #0]
     87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
     880:	230c      	movs	r3, #12
     882:	18fb      	adds	r3, r7, r3
     884:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
     886:	683b      	ldr	r3, [r7, #0]
     888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
     88a:	230c      	movs	r3, #12
     88c:	18fb      	adds	r3, r7, r3
     88e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     890:	2347      	movs	r3, #71	; 0x47
     892:	18fb      	adds	r3, r7, r3
     894:	2200      	movs	r2, #0
     896:	701a      	strb	r2, [r3, #0]
     898:	e02c      	b.n	8f4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     89a:	2347      	movs	r3, #71	; 0x47
     89c:	18fb      	adds	r3, r7, r3
     89e:	781a      	ldrb	r2, [r3, #0]
     8a0:	230c      	movs	r3, #12
     8a2:	18fb      	adds	r3, r7, r3
     8a4:	0092      	lsls	r2, r2, #2
     8a6:	58d3      	ldr	r3, [r2, r3]
     8a8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     8ac:	2b00      	cmp	r3, #0
     8ae:	d109      	bne.n	8c4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     8b0:	2347      	movs	r3, #71	; 0x47
     8b2:	18fb      	adds	r3, r7, r3
     8b4:	781a      	ldrb	r2, [r3, #0]
     8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     8b8:	0011      	movs	r1, r2
     8ba:	0018      	movs	r0, r3
     8bc:	4b5e      	ldr	r3, [pc, #376]	; (a38 <_spi_set_config+0x208>)
     8be:	4798      	blx	r3
     8c0:	0003      	movs	r3, r0
     8c2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     8c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     8c6:	3301      	adds	r3, #1
     8c8:	d00d      	beq.n	8e6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     8cc:	b2da      	uxtb	r2, r3
     8ce:	231c      	movs	r3, #28
     8d0:	18fb      	adds	r3, r7, r3
     8d2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     8d6:	0c1b      	lsrs	r3, r3, #16
     8d8:	b2db      	uxtb	r3, r3
     8da:	221c      	movs	r2, #28
     8dc:	18ba      	adds	r2, r7, r2
     8de:	0011      	movs	r1, r2
     8e0:	0018      	movs	r0, r3
     8e2:	4b56      	ldr	r3, [pc, #344]	; (a3c <_spi_set_config+0x20c>)
     8e4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
     8e6:	2347      	movs	r3, #71	; 0x47
     8e8:	18fb      	adds	r3, r7, r3
     8ea:	781a      	ldrb	r2, [r3, #0]
     8ec:	2347      	movs	r3, #71	; 0x47
     8ee:	18fb      	adds	r3, r7, r3
     8f0:	3201      	adds	r2, #1
     8f2:	701a      	strb	r2, [r3, #0]
     8f4:	2347      	movs	r3, #71	; 0x47
     8f6:	18fb      	adds	r3, r7, r3
     8f8:	781b      	ldrb	r3, [r3, #0]
     8fa:	2b03      	cmp	r3, #3
     8fc:	d9cd      	bls.n	89a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
     8fe:	683b      	ldr	r3, [r7, #0]
     900:	781a      	ldrb	r2, [r3, #0]
     902:	687b      	ldr	r3, [r7, #4]
     904:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
     906:	683b      	ldr	r3, [r7, #0]
     908:	7c1a      	ldrb	r2, [r3, #16]
     90a:	687b      	ldr	r3, [r7, #4]
     90c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
     90e:	683b      	ldr	r3, [r7, #0]
     910:	7c9a      	ldrb	r2, [r3, #18]
     912:	687b      	ldr	r3, [r7, #4]
     914:	71da      	strb	r2, [r3, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     916:	230a      	movs	r3, #10
     918:	18fb      	adds	r3, r7, r3
     91a:	2200      	movs	r2, #0
     91c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     91e:	2300      	movs	r3, #0
     920:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     922:	2300      	movs	r3, #0
     924:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     926:	683b      	ldr	r3, [r7, #0]
     928:	781b      	ldrb	r3, [r3, #0]
     92a:	2b01      	cmp	r3, #1
     92c:	d129      	bne.n	982 <_spi_set_config+0x152>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     92e:	687b      	ldr	r3, [r7, #4]
     930:	681b      	ldr	r3, [r3, #0]
     932:	0018      	movs	r0, r3
     934:	4b42      	ldr	r3, [pc, #264]	; (a40 <_spi_set_config+0x210>)
     936:	4798      	blx	r3
     938:	0003      	movs	r3, r0
     93a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     93e:	330d      	adds	r3, #13
     940:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     942:	6abb      	ldr	r3, [r7, #40]	; 0x28
     944:	b2db      	uxtb	r3, r3
     946:	0018      	movs	r0, r3
     948:	4b3e      	ldr	r3, [pc, #248]	; (a44 <_spi_set_config+0x214>)
     94a:	4798      	blx	r3
     94c:	0003      	movs	r3, r0
     94e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     950:	683b      	ldr	r3, [r7, #0]
     952:	695b      	ldr	r3, [r3, #20]
     954:	2223      	movs	r2, #35	; 0x23
     956:	18bc      	adds	r4, r7, r2
     958:	220a      	movs	r2, #10
     95a:	18ba      	adds	r2, r7, r2
     95c:	6a79      	ldr	r1, [r7, #36]	; 0x24
     95e:	0018      	movs	r0, r3
     960:	4b39      	ldr	r3, [pc, #228]	; (a48 <_spi_set_config+0x218>)
     962:	4798      	blx	r3
     964:	0003      	movs	r3, r0
     966:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     968:	2323      	movs	r3, #35	; 0x23
     96a:	18fb      	adds	r3, r7, r3
     96c:	781b      	ldrb	r3, [r3, #0]
     96e:	2b00      	cmp	r3, #0
     970:	d001      	beq.n	976 <_spi_set_config+0x146>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     972:	2317      	movs	r3, #23
     974:	e05a      	b.n	a2c <_spi_set_config+0x1fc>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     976:	230a      	movs	r3, #10
     978:	18fb      	adds	r3, r7, r3
     97a:	881b      	ldrh	r3, [r3, #0]
     97c:	b2da      	uxtb	r2, r3
     97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     980:	729a      	strb	r2, [r3, #10]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     982:	683b      	ldr	r3, [r7, #0]
     984:	781b      	ldrb	r3, [r3, #0]
     986:	2b00      	cmp	r3, #0
     988:	d119      	bne.n	9be <_spi_set_config+0x18e>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     98a:	683b      	ldr	r3, [r7, #0]
     98c:	695b      	ldr	r3, [r3, #20]
     98e:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     990:	683b      	ldr	r3, [r7, #0]
     992:	8b1b      	ldrh	r3, [r3, #24]
     994:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     998:	695b      	ldr	r3, [r3, #20]
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     99a:	683a      	ldr	r2, [r7, #0]
     99c:	7e92      	ldrb	r2, [r2, #26]
     99e:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     9a0:	683a      	ldr	r2, [r7, #0]
     9a2:	7ed2      	ldrb	r2, [r2, #27]
     9a4:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     9a6:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
     9a8:	431a      	orrs	r2, r3
     9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     9ac:	615a      	str	r2, [r3, #20]

		if (config->mode_specific.slave.preload_enable) {
     9ae:	683b      	ldr	r3, [r7, #0]
     9b0:	7f1b      	ldrb	r3, [r3, #28]
     9b2:	2b00      	cmp	r3, #0
     9b4:	d003      	beq.n	9be <_spi_set_config+0x18e>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     9b8:	2240      	movs	r2, #64	; 0x40
     9ba:	4313      	orrs	r3, r2
     9bc:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     9be:	683b      	ldr	r3, [r7, #0]
     9c0:	685b      	ldr	r3, [r3, #4]
     9c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     9c4:	4313      	orrs	r3, r2
     9c6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     9c8:	683b      	ldr	r3, [r7, #0]
     9ca:	689b      	ldr	r3, [r3, #8]
     9cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     9ce:	4313      	orrs	r3, r2
     9d0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     9d2:	683b      	ldr	r3, [r7, #0]
     9d4:	68db      	ldr	r3, [r3, #12]
     9d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     9d8:	4313      	orrs	r3, r2
     9da:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
     9dc:	683b      	ldr	r3, [r7, #0]
     9de:	7c1b      	ldrb	r3, [r3, #16]
     9e0:	001a      	movs	r2, r3
     9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     9e4:	4313      	orrs	r3, r2
     9e6:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     9e8:	683b      	ldr	r3, [r7, #0]
     9ea:	7c5b      	ldrb	r3, [r3, #17]
     9ec:	2b00      	cmp	r3, #0
     9ee:	d103      	bne.n	9f8 <_spi_set_config+0x1c8>
     9f0:	4b16      	ldr	r3, [pc, #88]	; (a4c <_spi_set_config+0x21c>)
     9f2:	4798      	blx	r3
     9f4:	1e03      	subs	r3, r0, #0
     9f6:	d003      	beq.n	a00 <_spi_set_config+0x1d0>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     9fa:	2280      	movs	r2, #128	; 0x80
     9fc:	4313      	orrs	r3, r2
     9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
     a00:	683b      	ldr	r3, [r7, #0]
     a02:	7c9b      	ldrb	r3, [r3, #18]
     a04:	2b00      	cmp	r3, #0
     a06:	d004      	beq.n	a12 <_spi_set_config+0x1e2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a0a:	2280      	movs	r2, #128	; 0x80
     a0c:	0292      	lsls	r2, r2, #10
     a0e:	4313      	orrs	r3, r2
     a10:	63bb      	str	r3, [r7, #56]	; 0x38
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a14:	681a      	ldr	r2, [r3, #0]
     a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     a18:	431a      	orrs	r2, r3
     a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a1c:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a20:	685a      	ldr	r2, [r3, #4]
     a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     a24:	431a      	orrs	r2, r3
     a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     a28:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     a2a:	2300      	movs	r3, #0
}
     a2c:	0018      	movs	r0, r3
     a2e:	46bd      	mov	sp, r7
     a30:	b013      	add	sp, #76	; 0x4c
     a32:	bd90      	pop	{r4, r7, pc}
     a34:	000004b9 	.word	0x000004b9
     a38:	000002ad 	.word	0x000002ad
     a3c:	0000272d 	.word	0x0000272d
     a40:	00000469 	.word	0x00000469
     a44:	00002565 	.word	0x00002565
     a48:	000001a3 	.word	0x000001a3
     a4c:	000006a9 	.word	0x000006a9

00000a50 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     a50:	b590      	push	{r4, r7, lr}
     a52:	b091      	sub	sp, #68	; 0x44
     a54:	af00      	add	r7, sp, #0
     a56:	6078      	str	r0, [r7, #4]
     a58:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	681b      	ldr	r3, [r3, #0]
     a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
     a60:	687b      	ldr	r3, [r7, #4]
     a62:	681b      	ldr	r3, [r3, #0]
     a64:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
     a66:	683b      	ldr	r3, [r7, #0]
     a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	uint32_t pad_pinmuxes[] = {
     a6a:	230c      	movs	r3, #12
     a6c:	18fb      	adds	r3, r7, r3
     a6e:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
     a70:	683b      	ldr	r3, [r7, #0]
     a72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
     a74:	230c      	movs	r3, #12
     a76:	18fb      	adds	r3, r7, r3
     a78:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
     a7a:	683b      	ldr	r3, [r7, #0]
     a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
     a7e:	230c      	movs	r3, #12
     a80:	18fb      	adds	r3, r7, r3
     a82:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
     a84:	683b      	ldr	r3, [r7, #0]
     a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
     a88:	230c      	movs	r3, #12
     a8a:	18fb      	adds	r3, r7, r3
     a8c:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a8e:	233f      	movs	r3, #63	; 0x3f
     a90:	18fb      	adds	r3, r7, r3
     a92:	2200      	movs	r2, #0
     a94:	701a      	strb	r2, [r3, #0]
     a96:	e030      	b.n	afa <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a98:	233f      	movs	r3, #63	; 0x3f
     a9a:	18fb      	adds	r3, r7, r3
     a9c:	781a      	ldrb	r2, [r3, #0]
     a9e:	230c      	movs	r3, #12
     aa0:	18fb      	adds	r3, r7, r3
     aa2:	0092      	lsls	r2, r2, #2
     aa4:	58d3      	ldr	r3, [r2, r3]
     aa6:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
     aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     aaa:	2b00      	cmp	r3, #0
     aac:	d109      	bne.n	ac2 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     aae:	233f      	movs	r3, #63	; 0x3f
     ab0:	18fb      	adds	r3, r7, r3
     ab2:	781a      	ldrb	r2, [r3, #0]
     ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
     ab6:	0011      	movs	r1, r2
     ab8:	0018      	movs	r0, r3
     aba:	4b64      	ldr	r3, [pc, #400]	; (c4c <_spi_check_config+0x1fc>)
     abc:	4798      	blx	r3
     abe:	0003      	movs	r3, r0
     ac0:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
     ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ac4:	3301      	adds	r3, #1
     ac6:	d010      	beq.n	aea <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
     ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     aca:	041b      	lsls	r3, r3, #16
     acc:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     ad0:	0c1b      	lsrs	r3, r3, #16
     ad2:	b2db      	uxtb	r3, r3
     ad4:	0018      	movs	r0, r3
     ad6:	4b5e      	ldr	r3, [pc, #376]	; (c50 <_spi_check_config+0x200>)
     ad8:	4798      	blx	r3
     ada:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
     adc:	429c      	cmp	r4, r3
     ade:	d005      	beq.n	aec <_spi_check_config+0x9c>
			module->hw = NULL;
     ae0:	687b      	ldr	r3, [r7, #4]
     ae2:	2200      	movs	r2, #0
     ae4:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
     ae6:	231c      	movs	r3, #28
     ae8:	e0ac      	b.n	c44 <_spi_check_config+0x1f4>
			continue;
     aea:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
     aec:	233f      	movs	r3, #63	; 0x3f
     aee:	18fb      	adds	r3, r7, r3
     af0:	781a      	ldrb	r2, [r3, #0]
     af2:	233f      	movs	r3, #63	; 0x3f
     af4:	18fb      	adds	r3, r7, r3
     af6:	3201      	adds	r2, #1
     af8:	701a      	strb	r2, [r3, #0]
     afa:	233f      	movs	r3, #63	; 0x3f
     afc:	18fb      	adds	r3, r7, r3
     afe:	781b      	ldrb	r3, [r3, #0]
     b00:	2b03      	cmp	r3, #3
     b02:	d9c9      	bls.n	a98 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     b04:	200c      	movs	r0, #12
     b06:	4b53      	ldr	r3, [pc, #332]	; (c54 <_spi_check_config+0x204>)
     b08:	4798      	blx	r3
     b0a:	0003      	movs	r3, r0
     b0c:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
     b0e:	2300      	movs	r3, #0
     b10:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
     b12:	2300      	movs	r3, #0
     b14:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
     b16:	2300      	movs	r3, #0
     b18:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
     b1a:	683b      	ldr	r3, [r7, #0]
     b1c:	781b      	ldrb	r3, [r3, #0]
     b1e:	2b01      	cmp	r3, #1
     b20:	d121      	bne.n	b66 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
     b22:	683b      	ldr	r3, [r7, #0]
     b24:	695b      	ldr	r3, [r3, #20]
     b26:	221f      	movs	r2, #31
     b28:	18bc      	adds	r4, r7, r2
     b2a:	220a      	movs	r2, #10
     b2c:	18ba      	adds	r2, r7, r2
     b2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
     b30:	0018      	movs	r0, r3
     b32:	4b49      	ldr	r3, [pc, #292]	; (c58 <_spi_check_config+0x208>)
     b34:	4798      	blx	r3
     b36:	0003      	movs	r3, r0
     b38:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
     b3a:	231f      	movs	r3, #31
     b3c:	18fb      	adds	r3, r7, r3
     b3e:	781b      	ldrb	r3, [r3, #0]
     b40:	2b00      	cmp	r3, #0
     b42:	d001      	beq.n	b48 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     b44:	2317      	movs	r3, #23
     b46:	e07d      	b.n	c44 <_spi_check_config+0x1f4>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b4a:	7a9b      	ldrb	r3, [r3, #10]
     b4c:	b2da      	uxtb	r2, r3
     b4e:	230a      	movs	r3, #10
     b50:	18fb      	adds	r3, r7, r3
     b52:	881b      	ldrh	r3, [r3, #0]
     b54:	b2db      	uxtb	r3, r3
     b56:	429a      	cmp	r2, r3
     b58:	d001      	beq.n	b5e <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
     b5a:	231c      	movs	r3, #28
     b5c:	e072      	b.n	c44 <_spi_check_config+0x1f4>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b60:	220c      	movs	r2, #12
     b62:	4313      	orrs	r3, r2
     b64:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     b66:	683b      	ldr	r3, [r7, #0]
     b68:	781b      	ldrb	r3, [r3, #0]
     b6a:	2b00      	cmp	r3, #0
     b6c:	d128      	bne.n	bc0 <_spi_check_config+0x170>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
     b6e:	683b      	ldr	r3, [r7, #0]
     b70:	695b      	ldr	r3, [r3, #20]
     b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     b74:	4313      	orrs	r3, r2
     b76:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
     b78:	683b      	ldr	r3, [r7, #0]
     b7a:	8b1b      	ldrh	r3, [r3, #24]
     b7c:	001a      	movs	r2, r3
     b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     b80:	4313      	orrs	r3, r2
     b82:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     b84:	683b      	ldr	r3, [r7, #0]
     b86:	7e9b      	ldrb	r3, [r3, #26]
     b88:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     b8a:	683b      	ldr	r3, [r7, #0]
     b8c:	7edb      	ldrb	r3, [r3, #27]
     b8e:	041b      	lsls	r3, r3, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     b90:	4313      	orrs	r3, r2
     b92:	001a      	movs	r2, r3
     b94:	6a3b      	ldr	r3, [r7, #32]
     b96:	4313      	orrs	r3, r2
     b98:	623b      	str	r3, [r7, #32]
		if (spi_module->CTRLA.reg != addr) {
     b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b9c:	681a      	ldr	r2, [r3, #0]
     b9e:	6a3b      	ldr	r3, [r7, #32]
     ba0:	429a      	cmp	r2, r3
     ba2:	d001      	beq.n	ba8 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
     ba4:	231c      	movs	r3, #28
     ba6:	e04d      	b.n	c44 <_spi_check_config+0x1f4>
		}

		if (config->mode_specific.slave.preload_enable) {
     ba8:	683b      	ldr	r3, [r7, #0]
     baa:	7f1b      	ldrb	r3, [r3, #28]
     bac:	2b00      	cmp	r3, #0
     bae:	d003      	beq.n	bb8 <_spi_check_config+0x168>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     bb2:	2240      	movs	r2, #64	; 0x40
     bb4:	4313      	orrs	r3, r2
     bb6:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bba:	2208      	movs	r2, #8
     bbc:	4313      	orrs	r3, r2
     bbe:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
     bc0:	683b      	ldr	r3, [r7, #0]
     bc2:	685b      	ldr	r3, [r3, #4]
     bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     bc6:	4313      	orrs	r3, r2
     bc8:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     bca:	683b      	ldr	r3, [r7, #0]
     bcc:	689b      	ldr	r3, [r3, #8]
     bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     bd0:	4313      	orrs	r3, r2
     bd2:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     bd4:	683b      	ldr	r3, [r7, #0]
     bd6:	68db      	ldr	r3, [r3, #12]
     bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     bda:	4313      	orrs	r3, r2
     bdc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
     bde:	683b      	ldr	r3, [r7, #0]
     be0:	7c1b      	ldrb	r3, [r3, #16]
     be2:	001a      	movs	r2, r3
     be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     be6:	4313      	orrs	r3, r2
     be8:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
     bea:	683b      	ldr	r3, [r7, #0]
     bec:	7c5b      	ldrb	r3, [r3, #17]
     bee:	2b00      	cmp	r3, #0
     bf0:	d003      	beq.n	bfa <_spi_check_config+0x1aa>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bf4:	2280      	movs	r2, #128	; 0x80
     bf6:	4313      	orrs	r3, r2
     bf8:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
     bfa:	683b      	ldr	r3, [r7, #0]
     bfc:	7c9b      	ldrb	r3, [r3, #18]
     bfe:	2b00      	cmp	r3, #0
     c00:	d004      	beq.n	c0c <_spi_check_config+0x1bc>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c04:	2280      	movs	r2, #128	; 0x80
     c06:	0292      	lsls	r2, r2, #10
     c08:	4313      	orrs	r3, r2
     c0a:	633b      	str	r3, [r7, #48]	; 0x30
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c0e:	2202      	movs	r2, #2
     c10:	4313      	orrs	r3, r2
     c12:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
     c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c16:	681a      	ldr	r2, [r3, #0]
     c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c1a:	429a      	cmp	r2, r3
     c1c:	d10e      	bne.n	c3c <_spi_check_config+0x1ec>
			spi_module->CTRLB.reg == ctrlb) {
     c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c20:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c24:	429a      	cmp	r2, r3
     c26:	d109      	bne.n	c3c <_spi_check_config+0x1ec>
		module->mode           = config->mode;
     c28:	683b      	ldr	r3, [r7, #0]
     c2a:	781a      	ldrb	r2, [r3, #0]
     c2c:	687b      	ldr	r3, [r7, #4]
     c2e:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
     c30:	683b      	ldr	r3, [r7, #0]
     c32:	7c1a      	ldrb	r2, [r3, #16]
     c34:	687b      	ldr	r3, [r7, #4]
     c36:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
     c38:	2300      	movs	r3, #0
     c3a:	e003      	b.n	c44 <_spi_check_config+0x1f4>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
     c3c:	687b      	ldr	r3, [r7, #4]
     c3e:	2200      	movs	r2, #0
     c40:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
     c42:	231c      	movs	r3, #28
}
     c44:	0018      	movs	r0, r3
     c46:	46bd      	mov	sp, r7
     c48:	b011      	add	sp, #68	; 0x44
     c4a:	bd90      	pop	{r4, r7, pc}
     c4c:	000002ad 	.word	0x000002ad
     c50:	00000541 	.word	0x00000541
     c54:	00002565 	.word	0x00002565
     c58:	000001a3 	.word	0x000001a3

00000c5c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     c5c:	b580      	push	{r7, lr}
     c5e:	b08a      	sub	sp, #40	; 0x28
     c60:	af00      	add	r7, sp, #0
     c62:	60f8      	str	r0, [r7, #12]
     c64:	60b9      	str	r1, [r7, #8]
     c66:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     c68:	68fb      	ldr	r3, [r7, #12]
     c6a:	68ba      	ldr	r2, [r7, #8]
     c6c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
     c6e:	68fb      	ldr	r3, [r7, #12]
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c76:	681b      	ldr	r3, [r3, #0]
     c78:	2202      	movs	r2, #2
     c7a:	4013      	ands	r3, r2
     c7c:	d007      	beq.n	c8e <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
     c7e:	687a      	ldr	r2, [r7, #4]
     c80:	68fb      	ldr	r3, [r7, #12]
     c82:	0011      	movs	r1, r2
     c84:	0018      	movs	r0, r3
     c86:	4b2f      	ldr	r3, [pc, #188]	; (d44 <spi_init+0xe8>)
     c88:	4798      	blx	r3
     c8a:	0003      	movs	r3, r0
     c8c:	e055      	b.n	d3a <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c90:	681b      	ldr	r3, [r3, #0]
     c92:	2201      	movs	r2, #1
     c94:	4013      	ands	r3, r2
     c96:	d001      	beq.n	c9c <spi_init+0x40>
		return STATUS_BUSY;
     c98:	2305      	movs	r3, #5
     c9a:	e04e      	b.n	d3a <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c9c:	68fb      	ldr	r3, [r7, #12]
     c9e:	681b      	ldr	r3, [r3, #0]
     ca0:	0018      	movs	r0, r3
     ca2:	4b29      	ldr	r3, [pc, #164]	; (d48 <spi_init+0xec>)
     ca4:	4798      	blx	r3
     ca6:	0003      	movs	r3, r0
     ca8:	623b      	str	r3, [r7, #32]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     caa:	6a3b      	ldr	r3, [r7, #32]
     cac:	3302      	adds	r3, #2
     cae:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     cb0:	6a3b      	ldr	r3, [r7, #32]
     cb2:	330d      	adds	r3, #13
     cb4:	61bb      	str	r3, [r7, #24]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     cb6:	2201      	movs	r2, #1
     cb8:	69fb      	ldr	r3, [r7, #28]
     cba:	409a      	lsls	r2, r3
     cbc:	0013      	movs	r3, r2
     cbe:	0019      	movs	r1, r3
     cc0:	2002      	movs	r0, #2
     cc2:	4b22      	ldr	r3, [pc, #136]	; (d4c <spi_init+0xf0>)
     cc4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     cc6:	2314      	movs	r3, #20
     cc8:	18fb      	adds	r3, r7, r3
     cca:	0018      	movs	r0, r3
     ccc:	4b20      	ldr	r3, [pc, #128]	; (d50 <spi_init+0xf4>)
     cce:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     cd0:	687b      	ldr	r3, [r7, #4]
     cd2:	2220      	movs	r2, #32
     cd4:	5c9a      	ldrb	r2, [r3, r2]
     cd6:	2314      	movs	r3, #20
     cd8:	18fb      	adds	r3, r7, r3
     cda:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     cdc:	69bb      	ldr	r3, [r7, #24]
     cde:	b2db      	uxtb	r3, r3
     ce0:	2214      	movs	r2, #20
     ce2:	18ba      	adds	r2, r7, r2
     ce4:	0011      	movs	r1, r2
     ce6:	0018      	movs	r0, r3
     ce8:	4b1a      	ldr	r3, [pc, #104]	; (d54 <spi_init+0xf8>)
     cea:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     cec:	69bb      	ldr	r3, [r7, #24]
     cee:	b2db      	uxtb	r3, r3
     cf0:	0018      	movs	r0, r3
     cf2:	4b19      	ldr	r3, [pc, #100]	; (d58 <spi_init+0xfc>)
     cf4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	2220      	movs	r2, #32
     cfa:	5c9b      	ldrb	r3, [r3, r2]
     cfc:	2100      	movs	r1, #0
     cfe:	0018      	movs	r0, r3
     d00:	4b16      	ldr	r3, [pc, #88]	; (d5c <spi_init+0x100>)
     d02:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	781b      	ldrb	r3, [r3, #0]
     d08:	2b01      	cmp	r3, #1
     d0a:	d105      	bne.n	d18 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	220c      	movs	r2, #12
     d12:	431a      	orrs	r2, r3
     d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d16:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	781b      	ldrb	r3, [r3, #0]
     d1c:	2b00      	cmp	r3, #0
     d1e:	d105      	bne.n	d2c <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d22:	681b      	ldr	r3, [r3, #0]
     d24:	2208      	movs	r2, #8
     d26:	431a      	orrs	r2, r3
     d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d2a:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
     d2c:	687a      	ldr	r2, [r7, #4]
     d2e:	68fb      	ldr	r3, [r7, #12]
     d30:	0011      	movs	r1, r2
     d32:	0018      	movs	r0, r3
     d34:	4b0a      	ldr	r3, [pc, #40]	; (d60 <spi_init+0x104>)
     d36:	4798      	blx	r3
     d38:	0003      	movs	r3, r0
}
     d3a:	0018      	movs	r0, r3
     d3c:	46bd      	mov	sp, r7
     d3e:	b00a      	add	sp, #40	; 0x28
     d40:	bd80      	pop	{r7, pc}
     d42:	46c0      	nop			; (mov r8, r8)
     d44:	00000a51 	.word	0x00000a51
     d48:	00000469 	.word	0x00000469
     d4c:	0000064d 	.word	0x0000064d
     d50:	00000635 	.word	0x00000635
     d54:	00002441 	.word	0x00002441
     d58:	00002485 	.word	0x00002485
     d5c:	00000221 	.word	0x00000221
     d60:	00000831 	.word	0x00000831

00000d64 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     d64:	b590      	push	{r4, r7, lr}
     d66:	b089      	sub	sp, #36	; 0x24
     d68:	af00      	add	r7, sp, #0
     d6a:	60f8      	str	r0, [r7, #12]
     d6c:	60b9      	str	r1, [r7, #8]
     d6e:	0019      	movs	r1, r3
     d70:	1dbb      	adds	r3, r7, #6
     d72:	801a      	strh	r2, [r3, #0]
     d74:	1d3b      	adds	r3, r7, #4
     d76:	1c0a      	adds	r2, r1, #0
     d78:	801a      	strh	r2, [r3, #0]
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     d7a:	1dbb      	adds	r3, r7, #6
     d7c:	881b      	ldrh	r3, [r3, #0]
     d7e:	2b00      	cmp	r3, #0
     d80:	d101      	bne.n	d86 <spi_read_buffer_wait+0x22>
		return STATUS_ERR_INVALID_ARG;
     d82:	2317      	movs	r3, #23
     d84:	e0b2      	b.n	eec <spi_read_buffer_wait+0x188>
	}

	if (!(module->receiver_enabled)) {
     d86:	68fb      	ldr	r3, [r7, #12]
     d88:	79db      	ldrb	r3, [r3, #7]
     d8a:	2201      	movs	r2, #1
     d8c:	4053      	eors	r3, r2
     d8e:	b2db      	uxtb	r3, r3
     d90:	2b00      	cmp	r3, #0
     d92:	d001      	beq.n	d98 <spi_read_buffer_wait+0x34>
		return STATUS_ERR_DENIED;
     d94:	231c      	movs	r3, #28
     d96:	e0a9      	b.n	eec <spi_read_buffer_wait+0x188>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     d98:	68fb      	ldr	r3, [r7, #12]
     d9a:	795b      	ldrb	r3, [r3, #5]
     d9c:	2b00      	cmp	r3, #0
     d9e:	d109      	bne.n	db4 <spi_read_buffer_wait+0x50>
     da0:	68fb      	ldr	r3, [r7, #12]
     da2:	0018      	movs	r0, r3
     da4:	4b53      	ldr	r3, [pc, #332]	; (ef4 <spi_read_buffer_wait+0x190>)
     da6:	4798      	blx	r3
     da8:	1e03      	subs	r3, r0, #0
     daa:	d003      	beq.n	db4 <spi_read_buffer_wait+0x50>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
     dac:	68fb      	ldr	r3, [r7, #12]
     dae:	0018      	movs	r0, r3
     db0:	4b51      	ldr	r3, [pc, #324]	; (ef8 <spi_read_buffer_wait+0x194>)
     db2:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
     db4:	231e      	movs	r3, #30
     db6:	18fb      	adds	r3, r7, r3
     db8:	2200      	movs	r2, #0
     dba:	801a      	strh	r2, [r3, #0]

	while (length--) {
     dbc:	e08d      	b.n	eda <spi_read_buffer_wait+0x176>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
     dbe:	68fb      	ldr	r3, [r7, #12]
     dc0:	795b      	ldrb	r3, [r3, #5]
     dc2:	2b01      	cmp	r3, #1
     dc4:	d112      	bne.n	dec <spi_read_buffer_wait+0x88>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	68fb      	ldr	r3, [r7, #12]
     dca:	0018      	movs	r0, r3
     dcc:	4b4b      	ldr	r3, [pc, #300]	; (efc <spi_read_buffer_wait+0x198>)
     dce:	4798      	blx	r3
     dd0:	0003      	movs	r3, r0
     dd2:	001a      	movs	r2, r3
     dd4:	2301      	movs	r3, #1
     dd6:	4053      	eors	r3, r2
     dd8:	b2db      	uxtb	r3, r3
     dda:	2b00      	cmp	r3, #0
     ddc:	d1f4      	bne.n	dc8 <spi_read_buffer_wait+0x64>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
     dde:	1d3b      	adds	r3, r7, #4
     de0:	881a      	ldrh	r2, [r3, #0]
     de2:	68fb      	ldr	r3, [r7, #12]
     de4:	0011      	movs	r1, r2
     de6:	0018      	movs	r0, r3
     de8:	4b45      	ldr	r3, [pc, #276]	; (f00 <spi_read_buffer_wait+0x19c>)
     dea:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     dec:	68fb      	ldr	r3, [r7, #12]
     dee:	795b      	ldrb	r3, [r3, #5]
     df0:	2b00      	cmp	r3, #0
     df2:	d12a      	bne.n	e4a <spi_read_buffer_wait+0xe6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     df4:	2300      	movs	r3, #0
     df6:	61bb      	str	r3, [r7, #24]
     df8:	e008      	b.n	e0c <spi_read_buffer_wait+0xa8>
				if (spi_is_ready_to_read(module)) {
     dfa:	68fb      	ldr	r3, [r7, #12]
     dfc:	0018      	movs	r0, r3
     dfe:	4b41      	ldr	r3, [pc, #260]	; (f04 <spi_read_buffer_wait+0x1a0>)
     e00:	4798      	blx	r3
     e02:	1e03      	subs	r3, r0, #0
     e04:	d107      	bne.n	e16 <spi_read_buffer_wait+0xb2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     e06:	69bb      	ldr	r3, [r7, #24]
     e08:	3301      	adds	r3, #1
     e0a:	61bb      	str	r3, [r7, #24]
     e0c:	69bb      	ldr	r3, [r7, #24]
     e0e:	4a3e      	ldr	r2, [pc, #248]	; (f08 <spi_read_buffer_wait+0x1a4>)
     e10:	4293      	cmp	r3, r2
     e12:	d9f2      	bls.n	dfa <spi_read_buffer_wait+0x96>
     e14:	e000      	b.n	e18 <spi_read_buffer_wait+0xb4>
					break;
     e16:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     e18:	68fb      	ldr	r3, [r7, #12]
     e1a:	0018      	movs	r0, r3
     e1c:	4b35      	ldr	r3, [pc, #212]	; (ef4 <spi_read_buffer_wait+0x190>)
     e1e:	4798      	blx	r3
     e20:	1e03      	subs	r3, r0, #0
     e22:	d005      	beq.n	e30 <spi_read_buffer_wait+0xcc>
				_spi_clear_tx_complete_flag(module);
     e24:	68fb      	ldr	r3, [r7, #12]
     e26:	0018      	movs	r0, r3
     e28:	4b33      	ldr	r3, [pc, #204]	; (ef8 <spi_read_buffer_wait+0x194>)
     e2a:	4798      	blx	r3
				return STATUS_ABORTED;
     e2c:	2304      	movs	r3, #4
     e2e:	e05d      	b.n	eec <spi_read_buffer_wait+0x188>
			}

			if (!spi_is_ready_to_read(module)) {
     e30:	68fb      	ldr	r3, [r7, #12]
     e32:	0018      	movs	r0, r3
     e34:	4b33      	ldr	r3, [pc, #204]	; (f04 <spi_read_buffer_wait+0x1a0>)
     e36:	4798      	blx	r3
     e38:	0003      	movs	r3, r0
     e3a:	001a      	movs	r2, r3
     e3c:	2301      	movs	r3, #1
     e3e:	4053      	eors	r3, r2
     e40:	b2db      	uxtb	r3, r3
     e42:	2b00      	cmp	r3, #0
     e44:	d001      	beq.n	e4a <spi_read_buffer_wait+0xe6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
     e46:	2312      	movs	r3, #18
     e48:	e050      	b.n	eec <spi_read_buffer_wait+0x188>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	68fb      	ldr	r3, [r7, #12]
     e4e:	0018      	movs	r0, r3
     e50:	4b2c      	ldr	r3, [pc, #176]	; (f04 <spi_read_buffer_wait+0x1a0>)
     e52:	4798      	blx	r3
     e54:	0003      	movs	r3, r0
     e56:	001a      	movs	r2, r3
     e58:	2301      	movs	r3, #1
     e5a:	4053      	eors	r3, r2
     e5c:	b2db      	uxtb	r3, r3
     e5e:	2b00      	cmp	r3, #0
     e60:	d1f4      	bne.n	e4c <spi_read_buffer_wait+0xe8>
		}

		uint16_t received_data = 0;
     e62:	2314      	movs	r3, #20
     e64:	18fb      	adds	r3, r7, r3
     e66:	2200      	movs	r2, #0
     e68:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
     e6a:	2317      	movs	r3, #23
     e6c:	18fc      	adds	r4, r7, r3
     e6e:	2314      	movs	r3, #20
     e70:	18fa      	adds	r2, r7, r3
     e72:	68fb      	ldr	r3, [r7, #12]
     e74:	0011      	movs	r1, r2
     e76:	0018      	movs	r0, r3
     e78:	4b24      	ldr	r3, [pc, #144]	; (f0c <spi_read_buffer_wait+0x1a8>)
     e7a:	4798      	blx	r3
     e7c:	0003      	movs	r3, r0
     e7e:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
     e80:	2317      	movs	r3, #23
     e82:	18fb      	adds	r3, r7, r3
     e84:	781b      	ldrb	r3, [r3, #0]
     e86:	2b00      	cmp	r3, #0
     e88:	d003      	beq.n	e92 <spi_read_buffer_wait+0x12e>
			/* Overflow, abort */
			return retval;
     e8a:	2317      	movs	r3, #23
     e8c:	18fb      	adds	r3, r7, r3
     e8e:	781b      	ldrb	r3, [r3, #0]
     e90:	e02c      	b.n	eec <spi_read_buffer_wait+0x188>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     e92:	231e      	movs	r3, #30
     e94:	18fb      	adds	r3, r7, r3
     e96:	881b      	ldrh	r3, [r3, #0]
     e98:	221e      	movs	r2, #30
     e9a:	18ba      	adds	r2, r7, r2
     e9c:	1c59      	adds	r1, r3, #1
     e9e:	8011      	strh	r1, [r2, #0]
     ea0:	001a      	movs	r2, r3
     ea2:	68bb      	ldr	r3, [r7, #8]
     ea4:	189b      	adds	r3, r3, r2
     ea6:	2214      	movs	r2, #20
     ea8:	18ba      	adds	r2, r7, r2
     eaa:	8812      	ldrh	r2, [r2, #0]
     eac:	b2d2      	uxtb	r2, r2
     eae:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     eb0:	68fb      	ldr	r3, [r7, #12]
     eb2:	799b      	ldrb	r3, [r3, #6]
     eb4:	2b01      	cmp	r3, #1
     eb6:	d110      	bne.n	eda <spi_read_buffer_wait+0x176>
			rx_data[rx_pos++] = (received_data >> 8);
     eb8:	231e      	movs	r3, #30
     eba:	18fb      	adds	r3, r7, r3
     ebc:	881b      	ldrh	r3, [r3, #0]
     ebe:	221e      	movs	r2, #30
     ec0:	18ba      	adds	r2, r7, r2
     ec2:	1c59      	adds	r1, r3, #1
     ec4:	8011      	strh	r1, [r2, #0]
     ec6:	001a      	movs	r2, r3
     ec8:	68bb      	ldr	r3, [r7, #8]
     eca:	189b      	adds	r3, r3, r2
     ecc:	2214      	movs	r2, #20
     ece:	18ba      	adds	r2, r7, r2
     ed0:	8812      	ldrh	r2, [r2, #0]
     ed2:	0a12      	lsrs	r2, r2, #8
     ed4:	b292      	uxth	r2, r2
     ed6:	b2d2      	uxtb	r2, r2
     ed8:	701a      	strb	r2, [r3, #0]
	while (length--) {
     eda:	1dbb      	adds	r3, r7, #6
     edc:	881b      	ldrh	r3, [r3, #0]
     ede:	1dba      	adds	r2, r7, #6
     ee0:	1e59      	subs	r1, r3, #1
     ee2:	8011      	strh	r1, [r2, #0]
     ee4:	2b00      	cmp	r3, #0
     ee6:	d000      	beq.n	eea <spi_read_buffer_wait+0x186>
     ee8:	e769      	b.n	dbe <spi_read_buffer_wait+0x5a>
		}
	}

	return STATUS_OK;
     eea:	2300      	movs	r3, #0
}
     eec:	0018      	movs	r0, r3
     eee:	46bd      	mov	sp, r7
     ef0:	b009      	add	sp, #36	; 0x24
     ef2:	bd90      	pop	{r4, r7, pc}
     ef4:	000006c9 	.word	0x000006c9
     ef8:	00000815 	.word	0x00000815
     efc:	000006f1 	.word	0x000006f1
     f00:	00000741 	.word	0x00000741
     f04:	00000719 	.word	0x00000719
     f08:	00002710 	.word	0x00002710
     f0c:	0000078d 	.word	0x0000078d

00000f10 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     f10:	b580      	push	{r7, lr}
     f12:	b086      	sub	sp, #24
     f14:	af00      	add	r7, sp, #0
     f16:	60f8      	str	r0, [r7, #12]
     f18:	60b9      	str	r1, [r7, #8]
     f1a:	1dfb      	adds	r3, r7, #7
     f1c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     f1e:	68fb      	ldr	r3, [r7, #12]
     f20:	795b      	ldrb	r3, [r3, #5]
     f22:	2b01      	cmp	r3, #1
     f24:	d001      	beq.n	f2a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
     f26:	2315      	movs	r3, #21
     f28:	e055      	b.n	fd6 <spi_select_slave+0xc6>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
#  endif
	{
		if (select) {
     f2a:	1dfb      	adds	r3, r7, #7
     f2c:	781b      	ldrb	r3, [r3, #0]
     f2e:	2b00      	cmp	r3, #0
     f30:	d04a      	beq.n	fc8 <spi_select_slave+0xb8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
     f32:	68bb      	ldr	r3, [r7, #8]
     f34:	785b      	ldrb	r3, [r3, #1]
     f36:	2b00      	cmp	r3, #0
     f38:	d03f      	beq.n	fba <spi_select_slave+0xaa>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
     f3a:	68fb      	ldr	r3, [r7, #12]
     f3c:	0018      	movs	r0, r3
     f3e:	4b28      	ldr	r3, [pc, #160]	; (fe0 <spi_select_slave+0xd0>)
     f40:	4798      	blx	r3
     f42:	0003      	movs	r3, r0
     f44:	001a      	movs	r2, r3
     f46:	2301      	movs	r3, #1
     f48:	4053      	eors	r3, r2
     f4a:	b2db      	uxtb	r3, r3
     f4c:	2b00      	cmp	r3, #0
     f4e:	d007      	beq.n	f60 <spi_select_slave+0x50>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
     f50:	68bb      	ldr	r3, [r7, #8]
     f52:	781b      	ldrb	r3, [r3, #0]
     f54:	2101      	movs	r1, #1
     f56:	0018      	movs	r0, r3
     f58:	4b22      	ldr	r3, [pc, #136]	; (fe4 <spi_select_slave+0xd4>)
     f5a:	4798      	blx	r3
					return STATUS_BUSY;
     f5c:	2305      	movs	r3, #5
     f5e:	e03a      	b.n	fd6 <spi_select_slave+0xc6>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     f60:	68bb      	ldr	r3, [r7, #8]
     f62:	781b      	ldrb	r3, [r3, #0]
     f64:	2100      	movs	r1, #0
     f66:	0018      	movs	r0, r3
     f68:	4b1e      	ldr	r3, [pc, #120]	; (fe4 <spi_select_slave+0xd4>)
     f6a:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
     f6c:	68bb      	ldr	r3, [r7, #8]
     f6e:	789b      	ldrb	r3, [r3, #2]
     f70:	b29a      	uxth	r2, r3
     f72:	68fb      	ldr	r3, [r7, #12]
     f74:	0011      	movs	r1, r2
     f76:	0018      	movs	r0, r3
     f78:	4b1b      	ldr	r3, [pc, #108]	; (fe8 <spi_select_slave+0xd8>)
     f7a:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
     f7c:	68fb      	ldr	r3, [r7, #12]
     f7e:	79db      	ldrb	r3, [r3, #7]
     f80:	2201      	movs	r2, #1
     f82:	4053      	eors	r3, r2
     f84:	b2db      	uxtb	r3, r3
     f86:	2b00      	cmp	r3, #0
     f88:	d024      	beq.n	fd4 <spi_select_slave+0xc4>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	68fb      	ldr	r3, [r7, #12]
     f8e:	0018      	movs	r0, r3
     f90:	4b16      	ldr	r3, [pc, #88]	; (fec <spi_select_slave+0xdc>)
     f92:	4798      	blx	r3
     f94:	0003      	movs	r3, r0
     f96:	001a      	movs	r2, r3
     f98:	2301      	movs	r3, #1
     f9a:	4053      	eors	r3, r2
     f9c:	b2db      	uxtb	r3, r3
     f9e:	2b00      	cmp	r3, #0
     fa0:	d1f4      	bne.n	f8c <spi_select_slave+0x7c>
					}
					uint16_t flush = 0;
     fa2:	2316      	movs	r3, #22
     fa4:	18fb      	adds	r3, r7, r3
     fa6:	2200      	movs	r2, #0
     fa8:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
     faa:	2316      	movs	r3, #22
     fac:	18fa      	adds	r2, r7, r3
     fae:	68fb      	ldr	r3, [r7, #12]
     fb0:	0011      	movs	r1, r2
     fb2:	0018      	movs	r0, r3
     fb4:	4b0e      	ldr	r3, [pc, #56]	; (ff0 <spi_select_slave+0xe0>)
     fb6:	4798      	blx	r3
     fb8:	e00c      	b.n	fd4 <spi_select_slave+0xc4>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
     fba:	68bb      	ldr	r3, [r7, #8]
     fbc:	781b      	ldrb	r3, [r3, #0]
     fbe:	2100      	movs	r1, #0
     fc0:	0018      	movs	r0, r3
     fc2:	4b08      	ldr	r3, [pc, #32]	; (fe4 <spi_select_slave+0xd4>)
     fc4:	4798      	blx	r3
     fc6:	e005      	b.n	fd4 <spi_select_slave+0xc4>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
     fc8:	68bb      	ldr	r3, [r7, #8]
     fca:	781b      	ldrb	r3, [r3, #0]
     fcc:	2101      	movs	r1, #1
     fce:	0018      	movs	r0, r3
     fd0:	4b04      	ldr	r3, [pc, #16]	; (fe4 <spi_select_slave+0xd4>)
     fd2:	4798      	blx	r3
		}
	}
	return STATUS_OK;
     fd4:	2300      	movs	r3, #0
}
     fd6:	0018      	movs	r0, r3
     fd8:	46bd      	mov	sp, r7
     fda:	b006      	add	sp, #24
     fdc:	bd80      	pop	{r7, pc}
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	000006f1 	.word	0x000006f1
     fe4:	000005e1 	.word	0x000005e1
     fe8:	00000741 	.word	0x00000741
     fec:	00000719 	.word	0x00000719
     ff0:	0000078d 	.word	0x0000078d

00000ff4 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     ff4:	b580      	push	{r7, lr}
     ff6:	b08a      	sub	sp, #40	; 0x28
     ff8:	af00      	add	r7, sp, #0
     ffa:	60f8      	str	r0, [r7, #12]
     ffc:	60b9      	str	r1, [r7, #8]
     ffe:	1dbb      	adds	r3, r7, #6
    1000:	801a      	strh	r2, [r3, #0]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    1002:	1dbb      	adds	r3, r7, #6
    1004:	881b      	ldrh	r3, [r3, #0]
    1006:	2b00      	cmp	r3, #0
    1008:	d101      	bne.n	100e <STACK_SIZE+0xe>
		return STATUS_ERR_INVALID_ARG;
    100a:	2317      	movs	r3, #23
    100c:	e16a      	b.n	12e4 <STACK_SIZE+0x2e4>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    100e:	68fb      	ldr	r3, [r7, #12]
    1010:	795b      	ldrb	r3, [r3, #5]
    1012:	2b00      	cmp	r3, #0
    1014:	d109      	bne.n	102a <STACK_SIZE+0x2a>
    1016:	68fb      	ldr	r3, [r7, #12]
    1018:	0018      	movs	r0, r3
    101a:	4bb4      	ldr	r3, [pc, #720]	; (12ec <STACK_SIZE+0x2ec>)
    101c:	4798      	blx	r3
    101e:	1e03      	subs	r3, r0, #0
    1020:	d003      	beq.n	102a <STACK_SIZE+0x2a>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    1022:	68fb      	ldr	r3, [r7, #12]
    1024:	0018      	movs	r0, r3
    1026:	4bb2      	ldr	r3, [pc, #712]	; (12f0 <STACK_SIZE+0x2f0>)
    1028:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    102a:	2326      	movs	r3, #38	; 0x26
    102c:	18fb      	adds	r3, r7, r3
    102e:	2200      	movs	r2, #0
    1030:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    1032:	2324      	movs	r3, #36	; 0x24
    1034:	18fb      	adds	r3, r7, r3
    1036:	1dba      	adds	r2, r7, #6
    1038:	8812      	ldrh	r2, [r2, #0]
    103a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    103c:	e0fe      	b.n	123c <STACK_SIZE+0x23c>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    103e:	68fb      	ldr	r3, [r7, #12]
    1040:	795b      	ldrb	r3, [r3, #5]
    1042:	2b00      	cmp	r3, #0
    1044:	d12a      	bne.n	109c <STACK_SIZE+0x9c>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1046:	2300      	movs	r3, #0
    1048:	623b      	str	r3, [r7, #32]
    104a:	e008      	b.n	105e <STACK_SIZE+0x5e>
				if (spi_is_ready_to_write(module)) {
    104c:	68fb      	ldr	r3, [r7, #12]
    104e:	0018      	movs	r0, r3
    1050:	4ba8      	ldr	r3, [pc, #672]	; (12f4 <STACK_SIZE+0x2f4>)
    1052:	4798      	blx	r3
    1054:	1e03      	subs	r3, r0, #0
    1056:	d107      	bne.n	1068 <STACK_SIZE+0x68>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1058:	6a3b      	ldr	r3, [r7, #32]
    105a:	3301      	adds	r3, #1
    105c:	623b      	str	r3, [r7, #32]
    105e:	6a3b      	ldr	r3, [r7, #32]
    1060:	4aa5      	ldr	r2, [pc, #660]	; (12f8 <STACK_SIZE+0x2f8>)
    1062:	4293      	cmp	r3, r2
    1064:	d9f2      	bls.n	104c <STACK_SIZE+0x4c>
    1066:	e000      	b.n	106a <STACK_SIZE+0x6a>
					break;
    1068:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    106a:	68fb      	ldr	r3, [r7, #12]
    106c:	0018      	movs	r0, r3
    106e:	4b9f      	ldr	r3, [pc, #636]	; (12ec <STACK_SIZE+0x2ec>)
    1070:	4798      	blx	r3
    1072:	1e03      	subs	r3, r0, #0
    1074:	d005      	beq.n	1082 <STACK_SIZE+0x82>
				_spi_clear_tx_complete_flag(module);
    1076:	68fb      	ldr	r3, [r7, #12]
    1078:	0018      	movs	r0, r3
    107a:	4b9d      	ldr	r3, [pc, #628]	; (12f0 <STACK_SIZE+0x2f0>)
    107c:	4798      	blx	r3
				return STATUS_ABORTED;
    107e:	2304      	movs	r3, #4
    1080:	e130      	b.n	12e4 <STACK_SIZE+0x2e4>
			}

			if (!spi_is_ready_to_write(module)) {
    1082:	68fb      	ldr	r3, [r7, #12]
    1084:	0018      	movs	r0, r3
    1086:	4b9b      	ldr	r3, [pc, #620]	; (12f4 <STACK_SIZE+0x2f4>)
    1088:	4798      	blx	r3
    108a:	0003      	movs	r3, r0
    108c:	001a      	movs	r2, r3
    108e:	2301      	movs	r3, #1
    1090:	4053      	eors	r3, r2
    1092:	b2db      	uxtb	r3, r3
    1094:	2b00      	cmp	r3, #0
    1096:	d001      	beq.n	109c <STACK_SIZE+0x9c>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1098:	2312      	movs	r3, #18
    109a:	e123      	b.n	12e4 <STACK_SIZE+0x2e4>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    109c:	46c0      	nop			; (mov r8, r8)
    109e:	68fb      	ldr	r3, [r7, #12]
    10a0:	0018      	movs	r0, r3
    10a2:	4b94      	ldr	r3, [pc, #592]	; (12f4 <STACK_SIZE+0x2f4>)
    10a4:	4798      	blx	r3
    10a6:	0003      	movs	r3, r0
    10a8:	001a      	movs	r2, r3
    10aa:	2301      	movs	r3, #1
    10ac:	4053      	eors	r3, r2
    10ae:	b2db      	uxtb	r3, r3
    10b0:	2b00      	cmp	r3, #0
    10b2:	d1f4      	bne.n	109e <STACK_SIZE+0x9e>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    10b4:	2326      	movs	r3, #38	; 0x26
    10b6:	18fb      	adds	r3, r7, r3
    10b8:	881b      	ldrh	r3, [r3, #0]
    10ba:	2226      	movs	r2, #38	; 0x26
    10bc:	18ba      	adds	r2, r7, r2
    10be:	1c59      	adds	r1, r3, #1
    10c0:	8011      	strh	r1, [r2, #0]
    10c2:	001a      	movs	r2, r3
    10c4:	68bb      	ldr	r3, [r7, #8]
    10c6:	189b      	adds	r3, r3, r2
    10c8:	781a      	ldrb	r2, [r3, #0]
    10ca:	231e      	movs	r3, #30
    10cc:	18fb      	adds	r3, r7, r3
    10ce:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10d0:	68fb      	ldr	r3, [r7, #12]
    10d2:	799b      	ldrb	r3, [r3, #6]
    10d4:	2b01      	cmp	r3, #1
    10d6:	d115      	bne.n	1104 <STACK_SIZE+0x104>
			data_to_send |= (tx_data[tx_pos++] << 8);
    10d8:	2326      	movs	r3, #38	; 0x26
    10da:	18fb      	adds	r3, r7, r3
    10dc:	881b      	ldrh	r3, [r3, #0]
    10de:	2226      	movs	r2, #38	; 0x26
    10e0:	18ba      	adds	r2, r7, r2
    10e2:	1c59      	adds	r1, r3, #1
    10e4:	8011      	strh	r1, [r2, #0]
    10e6:	001a      	movs	r2, r3
    10e8:	68bb      	ldr	r3, [r7, #8]
    10ea:	189b      	adds	r3, r3, r2
    10ec:	781b      	ldrb	r3, [r3, #0]
    10ee:	021b      	lsls	r3, r3, #8
    10f0:	b21a      	sxth	r2, r3
    10f2:	231e      	movs	r3, #30
    10f4:	18fb      	adds	r3, r7, r3
    10f6:	2100      	movs	r1, #0
    10f8:	5e5b      	ldrsh	r3, [r3, r1]
    10fa:	4313      	orrs	r3, r2
    10fc:	b21a      	sxth	r2, r3
    10fe:	231e      	movs	r3, #30
    1100:	18fb      	adds	r3, r7, r3
    1102:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    1104:	231e      	movs	r3, #30
    1106:	18fb      	adds	r3, r7, r3
    1108:	881a      	ldrh	r2, [r3, #0]
    110a:	68fb      	ldr	r3, [r7, #12]
    110c:	0011      	movs	r1, r2
    110e:	0018      	movs	r0, r3
    1110:	4b7a      	ldr	r3, [pc, #488]	; (12fc <STACK_SIZE+0x2fc>)
    1112:	4798      	blx	r3

		if (module->receiver_enabled) {
    1114:	68fb      	ldr	r3, [r7, #12]
    1116:	79db      	ldrb	r3, [r3, #7]
    1118:	2224      	movs	r2, #36	; 0x24
    111a:	18ba      	adds	r2, r7, r2
    111c:	2124      	movs	r1, #36	; 0x24
    111e:	1879      	adds	r1, r7, r1
    1120:	8809      	ldrh	r1, [r1, #0]
    1122:	8011      	strh	r1, [r2, #0]
    1124:	2b00      	cmp	r3, #0
    1126:	d100      	bne.n	112a <STACK_SIZE+0x12a>
    1128:	e088      	b.n	123c <STACK_SIZE+0x23c>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    112a:	68fb      	ldr	r3, [r7, #12]
    112c:	795b      	ldrb	r3, [r3, #5]
    112e:	2b00      	cmp	r3, #0
    1130:	d000      	beq.n	1134 <STACK_SIZE+0x134>
    1132:	e069      	b.n	1208 <STACK_SIZE+0x208>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1134:	2300      	movs	r3, #0
    1136:	61bb      	str	r3, [r7, #24]
    1138:	e047      	b.n	11ca <STACK_SIZE+0x1ca>
					if (length && spi_is_ready_to_write(module)) {
    113a:	1dbb      	adds	r3, r7, #6
    113c:	881b      	ldrh	r3, [r3, #0]
    113e:	2b00      	cmp	r3, #0
    1140:	d03a      	beq.n	11b8 <STACK_SIZE+0x1b8>
    1142:	68fb      	ldr	r3, [r7, #12]
    1144:	0018      	movs	r0, r3
    1146:	4b6b      	ldr	r3, [pc, #428]	; (12f4 <STACK_SIZE+0x2f4>)
    1148:	4798      	blx	r3
    114a:	1e03      	subs	r3, r0, #0
    114c:	d034      	beq.n	11b8 <STACK_SIZE+0x1b8>
						data_to_send = tx_data[tx_pos++];
    114e:	2326      	movs	r3, #38	; 0x26
    1150:	18fb      	adds	r3, r7, r3
    1152:	881b      	ldrh	r3, [r3, #0]
    1154:	2226      	movs	r2, #38	; 0x26
    1156:	18ba      	adds	r2, r7, r2
    1158:	1c59      	adds	r1, r3, #1
    115a:	8011      	strh	r1, [r2, #0]
    115c:	001a      	movs	r2, r3
    115e:	68bb      	ldr	r3, [r7, #8]
    1160:	189b      	adds	r3, r3, r2
    1162:	781a      	ldrb	r2, [r3, #0]
    1164:	231e      	movs	r3, #30
    1166:	18fb      	adds	r3, r7, r3
    1168:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    116a:	68fb      	ldr	r3, [r7, #12]
    116c:	799b      	ldrb	r3, [r3, #6]
    116e:	2b01      	cmp	r3, #1
    1170:	d115      	bne.n	119e <STACK_SIZE+0x19e>
							data_to_send |= (tx_data[tx_pos++] << 8);
    1172:	2326      	movs	r3, #38	; 0x26
    1174:	18fb      	adds	r3, r7, r3
    1176:	881b      	ldrh	r3, [r3, #0]
    1178:	2226      	movs	r2, #38	; 0x26
    117a:	18ba      	adds	r2, r7, r2
    117c:	1c59      	adds	r1, r3, #1
    117e:	8011      	strh	r1, [r2, #0]
    1180:	001a      	movs	r2, r3
    1182:	68bb      	ldr	r3, [r7, #8]
    1184:	189b      	adds	r3, r3, r2
    1186:	781b      	ldrb	r3, [r3, #0]
    1188:	021b      	lsls	r3, r3, #8
    118a:	b21a      	sxth	r2, r3
    118c:	231e      	movs	r3, #30
    118e:	18fb      	adds	r3, r7, r3
    1190:	2100      	movs	r1, #0
    1192:	5e5b      	ldrsh	r3, [r3, r1]
    1194:	4313      	orrs	r3, r2
    1196:	b21a      	sxth	r2, r3
    1198:	231e      	movs	r3, #30
    119a:	18fb      	adds	r3, r7, r3
    119c:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    119e:	231e      	movs	r3, #30
    11a0:	18fb      	adds	r3, r7, r3
    11a2:	881a      	ldrh	r2, [r3, #0]
    11a4:	68fb      	ldr	r3, [r7, #12]
    11a6:	0011      	movs	r1, r2
    11a8:	0018      	movs	r0, r3
    11aa:	4b54      	ldr	r3, [pc, #336]	; (12fc <STACK_SIZE+0x2fc>)
    11ac:	4798      	blx	r3
						length--;
    11ae:	1dbb      	adds	r3, r7, #6
    11b0:	881a      	ldrh	r2, [r3, #0]
    11b2:	1dbb      	adds	r3, r7, #6
    11b4:	3a01      	subs	r2, #1
    11b6:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    11b8:	68fb      	ldr	r3, [r7, #12]
    11ba:	0018      	movs	r0, r3
    11bc:	4b50      	ldr	r3, [pc, #320]	; (1300 <STACK_SIZE+0x300>)
    11be:	4798      	blx	r3
    11c0:	1e03      	subs	r3, r0, #0
    11c2:	d107      	bne.n	11d4 <STACK_SIZE+0x1d4>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    11c4:	69bb      	ldr	r3, [r7, #24]
    11c6:	3301      	adds	r3, #1
    11c8:	61bb      	str	r3, [r7, #24]
    11ca:	69bb      	ldr	r3, [r7, #24]
    11cc:	4a4a      	ldr	r2, [pc, #296]	; (12f8 <STACK_SIZE+0x2f8>)
    11ce:	4293      	cmp	r3, r2
    11d0:	d9b3      	bls.n	113a <STACK_SIZE+0x13a>
    11d2:	e000      	b.n	11d6 <STACK_SIZE+0x1d6>
						break;
    11d4:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    11d6:	68fb      	ldr	r3, [r7, #12]
    11d8:	0018      	movs	r0, r3
    11da:	4b44      	ldr	r3, [pc, #272]	; (12ec <STACK_SIZE+0x2ec>)
    11dc:	4798      	blx	r3
    11de:	1e03      	subs	r3, r0, #0
    11e0:	d005      	beq.n	11ee <STACK_SIZE+0x1ee>
					_spi_clear_tx_complete_flag(module);
    11e2:	68fb      	ldr	r3, [r7, #12]
    11e4:	0018      	movs	r0, r3
    11e6:	4b42      	ldr	r3, [pc, #264]	; (12f0 <STACK_SIZE+0x2f0>)
    11e8:	4798      	blx	r3
					return STATUS_ABORTED;
    11ea:	2304      	movs	r3, #4
    11ec:	e07a      	b.n	12e4 <STACK_SIZE+0x2e4>
				}

				if (!spi_is_ready_to_read(module)) {
    11ee:	68fb      	ldr	r3, [r7, #12]
    11f0:	0018      	movs	r0, r3
    11f2:	4b43      	ldr	r3, [pc, #268]	; (1300 <STACK_SIZE+0x300>)
    11f4:	4798      	blx	r3
    11f6:	0003      	movs	r3, r0
    11f8:	001a      	movs	r2, r3
    11fa:	2301      	movs	r3, #1
    11fc:	4053      	eors	r3, r2
    11fe:	b2db      	uxtb	r3, r3
    1200:	2b00      	cmp	r3, #0
    1202:	d001      	beq.n	1208 <STACK_SIZE+0x208>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    1204:	2312      	movs	r3, #18
    1206:	e06d      	b.n	12e4 <STACK_SIZE+0x2e4>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    1208:	46c0      	nop			; (mov r8, r8)
    120a:	68fb      	ldr	r3, [r7, #12]
    120c:	0018      	movs	r0, r3
    120e:	4b3c      	ldr	r3, [pc, #240]	; (1300 <STACK_SIZE+0x300>)
    1210:	4798      	blx	r3
    1212:	0003      	movs	r3, r0
    1214:	001a      	movs	r2, r3
    1216:	2301      	movs	r3, #1
    1218:	4053      	eors	r3, r2
    121a:	b2db      	uxtb	r3, r3
    121c:	2b00      	cmp	r3, #0
    121e:	d1f4      	bne.n	120a <STACK_SIZE+0x20a>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    1220:	2312      	movs	r3, #18
    1222:	18fa      	adds	r2, r7, r3
    1224:	68fb      	ldr	r3, [r7, #12]
    1226:	0011      	movs	r1, r2
    1228:	0018      	movs	r0, r3
    122a:	4b36      	ldr	r3, [pc, #216]	; (1304 <STACK_SIZE+0x304>)
    122c:	4798      	blx	r3
			flush_length--;
    122e:	2324      	movs	r3, #36	; 0x24
    1230:	18fb      	adds	r3, r7, r3
    1232:	881a      	ldrh	r2, [r3, #0]
    1234:	2324      	movs	r3, #36	; 0x24
    1236:	18fb      	adds	r3, r7, r3
    1238:	3a01      	subs	r2, #1
    123a:	801a      	strh	r2, [r3, #0]
	while (length--) {
    123c:	1dbb      	adds	r3, r7, #6
    123e:	881b      	ldrh	r3, [r3, #0]
    1240:	1dba      	adds	r2, r7, #6
    1242:	1e59      	subs	r1, r3, #1
    1244:	8011      	strh	r1, [r2, #0]
    1246:	2b00      	cmp	r3, #0
    1248:	d000      	beq.n	124c <STACK_SIZE+0x24c>
    124a:	e6f8      	b.n	103e <STACK_SIZE+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    124c:	68fb      	ldr	r3, [r7, #12]
    124e:	795b      	ldrb	r3, [r3, #5]
    1250:	2b01      	cmp	r3, #1
    1252:	d10b      	bne.n	126c <STACK_SIZE+0x26c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    1254:	46c0      	nop			; (mov r8, r8)
    1256:	68fb      	ldr	r3, [r7, #12]
    1258:	0018      	movs	r0, r3
    125a:	4b24      	ldr	r3, [pc, #144]	; (12ec <STACK_SIZE+0x2ec>)
    125c:	4798      	blx	r3
    125e:	0003      	movs	r3, r0
    1260:	001a      	movs	r2, r3
    1262:	2301      	movs	r3, #1
    1264:	4053      	eors	r3, r2
    1266:	b2db      	uxtb	r3, r3
    1268:	2b00      	cmp	r3, #0
    126a:	d1f4      	bne.n	1256 <STACK_SIZE+0x256>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	795b      	ldrb	r3, [r3, #5]
    1270:	2b00      	cmp	r3, #0
    1272:	d136      	bne.n	12e2 <STACK_SIZE+0x2e2>
		if (module->receiver_enabled) {
    1274:	68fb      	ldr	r3, [r7, #12]
    1276:	79db      	ldrb	r3, [r3, #7]
    1278:	2b00      	cmp	r3, #0
    127a:	d032      	beq.n	12e2 <STACK_SIZE+0x2e2>
			while (flush_length) {
    127c:	e02c      	b.n	12d8 <STACK_SIZE+0x2d8>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    127e:	2300      	movs	r3, #0
    1280:	617b      	str	r3, [r7, #20]
    1282:	e008      	b.n	1296 <STACK_SIZE+0x296>
					if (spi_is_ready_to_read(module)) {
    1284:	68fb      	ldr	r3, [r7, #12]
    1286:	0018      	movs	r0, r3
    1288:	4b1d      	ldr	r3, [pc, #116]	; (1300 <STACK_SIZE+0x300>)
    128a:	4798      	blx	r3
    128c:	1e03      	subs	r3, r0, #0
    128e:	d107      	bne.n	12a0 <STACK_SIZE+0x2a0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1290:	697b      	ldr	r3, [r7, #20]
    1292:	3301      	adds	r3, #1
    1294:	617b      	str	r3, [r7, #20]
    1296:	697b      	ldr	r3, [r7, #20]
    1298:	4a17      	ldr	r2, [pc, #92]	; (12f8 <STACK_SIZE+0x2f8>)
    129a:	4293      	cmp	r3, r2
    129c:	d9f2      	bls.n	1284 <STACK_SIZE+0x284>
    129e:	e000      	b.n	12a2 <STACK_SIZE+0x2a2>
						break;
    12a0:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    12a2:	68fb      	ldr	r3, [r7, #12]
    12a4:	0018      	movs	r0, r3
    12a6:	4b16      	ldr	r3, [pc, #88]	; (1300 <STACK_SIZE+0x300>)
    12a8:	4798      	blx	r3
    12aa:	0003      	movs	r3, r0
    12ac:	001a      	movs	r2, r3
    12ae:	2301      	movs	r3, #1
    12b0:	4053      	eors	r3, r2
    12b2:	b2db      	uxtb	r3, r3
    12b4:	2b00      	cmp	r3, #0
    12b6:	d001      	beq.n	12bc <STACK_SIZE+0x2bc>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    12b8:	2312      	movs	r3, #18
    12ba:	e013      	b.n	12e4 <STACK_SIZE+0x2e4>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    12bc:	2310      	movs	r3, #16
    12be:	18fa      	adds	r2, r7, r3
    12c0:	68fb      	ldr	r3, [r7, #12]
    12c2:	0011      	movs	r1, r2
    12c4:	0018      	movs	r0, r3
    12c6:	4b0f      	ldr	r3, [pc, #60]	; (1304 <STACK_SIZE+0x304>)
    12c8:	4798      	blx	r3
				flush_length--;
    12ca:	2324      	movs	r3, #36	; 0x24
    12cc:	18fb      	adds	r3, r7, r3
    12ce:	881a      	ldrh	r2, [r3, #0]
    12d0:	2324      	movs	r3, #36	; 0x24
    12d2:	18fb      	adds	r3, r7, r3
    12d4:	3a01      	subs	r2, #1
    12d6:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    12d8:	2324      	movs	r3, #36	; 0x24
    12da:	18fb      	adds	r3, r7, r3
    12dc:	881b      	ldrh	r3, [r3, #0]
    12de:	2b00      	cmp	r3, #0
    12e0:	d1cd      	bne.n	127e <STACK_SIZE+0x27e>
			}
		}
	}
#  endif
	return STATUS_OK;
    12e2:	2300      	movs	r3, #0
}
    12e4:	0018      	movs	r0, r3
    12e6:	46bd      	mov	sp, r7
    12e8:	b00a      	add	sp, #40	; 0x28
    12ea:	bd80      	pop	{r7, pc}
    12ec:	000006c9 	.word	0x000006c9
    12f0:	00000815 	.word	0x00000815
    12f4:	000006f1 	.word	0x000006f1
    12f8:	00002710 	.word	0x00002710
    12fc:	00000741 	.word	0x00000741
    1300:	00000719 	.word	0x00000719
    1304:	0000078d 	.word	0x0000078d

00001308 <system_pinmux_get_group_from_gpio_pin>:
{
    1308:	b580      	push	{r7, lr}
    130a:	b084      	sub	sp, #16
    130c:	af00      	add	r7, sp, #0
    130e:	0002      	movs	r2, r0
    1310:	1dfb      	adds	r3, r7, #7
    1312:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1314:	230f      	movs	r3, #15
    1316:	18fb      	adds	r3, r7, r3
    1318:	1dfa      	adds	r2, r7, #7
    131a:	7812      	ldrb	r2, [r2, #0]
    131c:	09d2      	lsrs	r2, r2, #7
    131e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1320:	230e      	movs	r3, #14
    1322:	18fb      	adds	r3, r7, r3
    1324:	1dfa      	adds	r2, r7, #7
    1326:	7812      	ldrb	r2, [r2, #0]
    1328:	0952      	lsrs	r2, r2, #5
    132a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    132c:	4b0d      	ldr	r3, [pc, #52]	; (1364 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    132e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1330:	230f      	movs	r3, #15
    1332:	18fb      	adds	r3, r7, r3
    1334:	781b      	ldrb	r3, [r3, #0]
    1336:	2b00      	cmp	r3, #0
    1338:	d10f      	bne.n	135a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    133a:	230f      	movs	r3, #15
    133c:	18fb      	adds	r3, r7, r3
    133e:	781b      	ldrb	r3, [r3, #0]
    1340:	009b      	lsls	r3, r3, #2
    1342:	2210      	movs	r2, #16
    1344:	4694      	mov	ip, r2
    1346:	44bc      	add	ip, r7
    1348:	4463      	add	r3, ip
    134a:	3b08      	subs	r3, #8
    134c:	681a      	ldr	r2, [r3, #0]
    134e:	230e      	movs	r3, #14
    1350:	18fb      	adds	r3, r7, r3
    1352:	781b      	ldrb	r3, [r3, #0]
    1354:	01db      	lsls	r3, r3, #7
    1356:	18d3      	adds	r3, r2, r3
    1358:	e000      	b.n	135c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    135a:	2300      	movs	r3, #0
}
    135c:	0018      	movs	r0, r3
    135e:	46bd      	mov	sp, r7
    1360:	b004      	add	sp, #16
    1362:	bd80      	pop	{r7, pc}
    1364:	41004400 	.word	0x41004400

00001368 <port_get_group_from_gpio_pin>:
{
    1368:	b580      	push	{r7, lr}
    136a:	b082      	sub	sp, #8
    136c:	af00      	add	r7, sp, #0
    136e:	0002      	movs	r2, r0
    1370:	1dfb      	adds	r3, r7, #7
    1372:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1374:	1dfb      	adds	r3, r7, #7
    1376:	781b      	ldrb	r3, [r3, #0]
    1378:	0018      	movs	r0, r3
    137a:	4b03      	ldr	r3, [pc, #12]	; (1388 <port_get_group_from_gpio_pin+0x20>)
    137c:	4798      	blx	r3
    137e:	0003      	movs	r3, r0
}
    1380:	0018      	movs	r0, r3
    1382:	46bd      	mov	sp, r7
    1384:	b002      	add	sp, #8
    1386:	bd80      	pop	{r7, pc}
    1388:	00001309 	.word	0x00001309

0000138c <port_pin_set_output_level>:
{
    138c:	b580      	push	{r7, lr}
    138e:	b084      	sub	sp, #16
    1390:	af00      	add	r7, sp, #0
    1392:	0002      	movs	r2, r0
    1394:	1dfb      	adds	r3, r7, #7
    1396:	701a      	strb	r2, [r3, #0]
    1398:	1dbb      	adds	r3, r7, #6
    139a:	1c0a      	adds	r2, r1, #0
    139c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    139e:	1dfb      	adds	r3, r7, #7
    13a0:	781b      	ldrb	r3, [r3, #0]
    13a2:	0018      	movs	r0, r3
    13a4:	4b0d      	ldr	r3, [pc, #52]	; (13dc <port_pin_set_output_level+0x50>)
    13a6:	4798      	blx	r3
    13a8:	0003      	movs	r3, r0
    13aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13ac:	1dfb      	adds	r3, r7, #7
    13ae:	781b      	ldrb	r3, [r3, #0]
    13b0:	221f      	movs	r2, #31
    13b2:	4013      	ands	r3, r2
    13b4:	2201      	movs	r2, #1
    13b6:	409a      	lsls	r2, r3
    13b8:	0013      	movs	r3, r2
    13ba:	60bb      	str	r3, [r7, #8]
	if (level) {
    13bc:	1dbb      	adds	r3, r7, #6
    13be:	781b      	ldrb	r3, [r3, #0]
    13c0:	2b00      	cmp	r3, #0
    13c2:	d003      	beq.n	13cc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    13c4:	68fb      	ldr	r3, [r7, #12]
    13c6:	68ba      	ldr	r2, [r7, #8]
    13c8:	619a      	str	r2, [r3, #24]
}
    13ca:	e002      	b.n	13d2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    13cc:	68fb      	ldr	r3, [r7, #12]
    13ce:	68ba      	ldr	r2, [r7, #8]
    13d0:	615a      	str	r2, [r3, #20]
}
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	46bd      	mov	sp, r7
    13d6:	b004      	add	sp, #16
    13d8:	bd80      	pop	{r7, pc}
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	00001369 	.word	0x00001369

000013e0 <nrf24l01_spi_write>:




uint32_t nrf24l01_spi_write(uint8_t *data,uint16_t length)
{
    13e0:	b580      	push	{r7, lr}
    13e2:	b084      	sub	sp, #16
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	000a      	movs	r2, r1
    13ea:	1cbb      	adds	r3, r7, #2
    13ec:	801a      	strh	r2, [r3, #0]
	//spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,true);
	uint32_t status_code = (uint32_t) spi_write_buffer_wait(&spi_master_instance,data,length);
    13ee:	1cbb      	adds	r3, r7, #2
    13f0:	881a      	ldrh	r2, [r3, #0]
    13f2:	6879      	ldr	r1, [r7, #4]
    13f4:	4b05      	ldr	r3, [pc, #20]	; (140c <nrf24l01_spi_write+0x2c>)
    13f6:	0018      	movs	r0, r3
    13f8:	4b05      	ldr	r3, [pc, #20]	; (1410 <nrf24l01_spi_write+0x30>)
    13fa:	4798      	blx	r3
    13fc:	0003      	movs	r3, r0
    13fe:	60fb      	str	r3, [r7, #12]
	//spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,false);
	return status_code;
    1400:	68fb      	ldr	r3, [r7, #12]
}
    1402:	0018      	movs	r0, r3
    1404:	46bd      	mov	sp, r7
    1406:	b004      	add	sp, #16
    1408:	bd80      	pop	{r7, pc}
    140a:	46c0      	nop			; (mov r8, r8)
    140c:	20000058 	.word	0x20000058
    1410:	00000ff5 	.word	0x00000ff5

00001414 <nrf24l01_spi_write_single>:

uint32_t nrf24l01_spi_write_single(uint8_t *data)
{
    1414:	b580      	push	{r7, lr}
    1416:	b082      	sub	sp, #8
    1418:	af00      	add	r7, sp, #0
    141a:	6078      	str	r0, [r7, #4]
	return nrf24l01_spi_write(data,1);
    141c:	687b      	ldr	r3, [r7, #4]
    141e:	2101      	movs	r1, #1
    1420:	0018      	movs	r0, r3
    1422:	4b03      	ldr	r3, [pc, #12]	; (1430 <nrf24l01_spi_write_single+0x1c>)
    1424:	4798      	blx	r3
    1426:	0003      	movs	r3, r0
}
    1428:	0018      	movs	r0, r3
    142a:	46bd      	mov	sp, r7
    142c:	b002      	add	sp, #8
    142e:	bd80      	pop	{r7, pc}
    1430:	000013e1 	.word	0x000013e1

00001434 <nrf24l01_spi_read>:
{
	nrf24l01_cmd2(cmd,2,data_input);
}

void nrf24l01_spi_read(uint8_t *data,uint16_t length,uint16_t reg)
{
    1434:	b590      	push	{r4, r7, lr}
    1436:	b083      	sub	sp, #12
    1438:	af00      	add	r7, sp, #0
    143a:	6078      	str	r0, [r7, #4]
    143c:	0008      	movs	r0, r1
    143e:	0011      	movs	r1, r2
    1440:	1cbb      	adds	r3, r7, #2
    1442:	1c02      	adds	r2, r0, #0
    1444:	801a      	strh	r2, [r3, #0]
    1446:	003b      	movs	r3, r7
    1448:	1c0a      	adds	r2, r1, #0
    144a:	801a      	strh	r2, [r3, #0]
	//uint16_t dummy = reg | 0x80;
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,true);
    144c:	490f      	ldr	r1, [pc, #60]	; (148c <nrf24l01_spi_read+0x58>)
    144e:	4b10      	ldr	r3, [pc, #64]	; (1490 <nrf24l01_spi_read+0x5c>)
    1450:	2201      	movs	r2, #1
    1452:	0018      	movs	r0, r3
    1454:	4b0f      	ldr	r3, [pc, #60]	; (1494 <nrf24l01_spi_read+0x60>)
    1456:	4798      	blx	r3
	spi_write_buffer_wait(&spi_master_instance,&reg,1);
    1458:	0039      	movs	r1, r7
    145a:	4b0d      	ldr	r3, [pc, #52]	; (1490 <nrf24l01_spi_read+0x5c>)
    145c:	2201      	movs	r2, #1
    145e:	0018      	movs	r0, r3
    1460:	4b0d      	ldr	r3, [pc, #52]	; (1498 <nrf24l01_spi_read+0x64>)
    1462:	4798      	blx	r3
	spi_read_buffer_wait(&spi_master_instance,data,length,reg);
    1464:	003b      	movs	r3, r7
    1466:	881c      	ldrh	r4, [r3, #0]
    1468:	1cbb      	adds	r3, r7, #2
    146a:	881a      	ldrh	r2, [r3, #0]
    146c:	6879      	ldr	r1, [r7, #4]
    146e:	4808      	ldr	r0, [pc, #32]	; (1490 <nrf24l01_spi_read+0x5c>)
    1470:	0023      	movs	r3, r4
    1472:	4c0a      	ldr	r4, [pc, #40]	; (149c <nrf24l01_spi_read+0x68>)
    1474:	47a0      	blx	r4
	//spi_transceive_wait(&spi_master_instance,reg,data);
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,false);
    1476:	4905      	ldr	r1, [pc, #20]	; (148c <nrf24l01_spi_read+0x58>)
    1478:	4b05      	ldr	r3, [pc, #20]	; (1490 <nrf24l01_spi_read+0x5c>)
    147a:	2200      	movs	r2, #0
    147c:	0018      	movs	r0, r3
    147e:	4b05      	ldr	r3, [pc, #20]	; (1494 <nrf24l01_spi_read+0x60>)
    1480:	4798      	blx	r3
}
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	46bd      	mov	sp, r7
    1486:	b003      	add	sp, #12
    1488:	bd90      	pop	{r4, r7, pc}
    148a:	46c0      	nop			; (mov r8, r8)
    148c:	20000054 	.word	0x20000054
    1490:	20000058 	.word	0x20000058
    1494:	00000f11 	.word	0x00000f11
    1498:	00000ff5 	.word	0x00000ff5
    149c:	00000d65 	.word	0x00000d65

000014a0 <NRF_CS_Set>:




void NRF_CS_Set(void)
{
    14a0:	b580      	push	{r7, lr}
    14a2:	af00      	add	r7, sp, #0
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,true);
    14a4:	4904      	ldr	r1, [pc, #16]	; (14b8 <NRF_CS_Set+0x18>)
    14a6:	4b05      	ldr	r3, [pc, #20]	; (14bc <NRF_CS_Set+0x1c>)
    14a8:	2201      	movs	r2, #1
    14aa:	0018      	movs	r0, r3
    14ac:	4b04      	ldr	r3, [pc, #16]	; (14c0 <NRF_CS_Set+0x20>)
    14ae:	4798      	blx	r3
	//port_pin_set_output_level(NRF24L01_CS,true);
	//PORT_IOBUS->Group[0].OUTSET.bit.OUTSET = PORT_PA10;
}
    14b0:	46c0      	nop			; (mov r8, r8)
    14b2:	46bd      	mov	sp, r7
    14b4:	bd80      	pop	{r7, pc}
    14b6:	46c0      	nop			; (mov r8, r8)
    14b8:	20000054 	.word	0x20000054
    14bc:	20000058 	.word	0x20000058
    14c0:	00000f11 	.word	0x00000f11

000014c4 <NRF_CS_Clear>:

void NRF_CS_Clear(void)
{
    14c4:	b580      	push	{r7, lr}
    14c6:	af00      	add	r7, sp, #0
	spi_select_slave(&spi_master_instance,&nrf24l01_slave_instance,false);
    14c8:	4904      	ldr	r1, [pc, #16]	; (14dc <NRF_CS_Clear+0x18>)
    14ca:	4b05      	ldr	r3, [pc, #20]	; (14e0 <NRF_CS_Clear+0x1c>)
    14cc:	2200      	movs	r2, #0
    14ce:	0018      	movs	r0, r3
    14d0:	4b04      	ldr	r3, [pc, #16]	; (14e4 <NRF_CS_Clear+0x20>)
    14d2:	4798      	blx	r3
	//port_pin_set_output_level(NRF24L01_CS,false);
	//PORT_IOBUS->Group[0].OUTCLR.bit.OUTCLR = PORT_PA10;
}
    14d4:	46c0      	nop			; (mov r8, r8)
    14d6:	46bd      	mov	sp, r7
    14d8:	bd80      	pop	{r7, pc}
    14da:	46c0      	nop			; (mov r8, r8)
    14dc:	20000054 	.word	0x20000054
    14e0:	20000058 	.word	0x20000058
    14e4:	00000f11 	.word	0x00000f11

000014e8 <NRF_CE_Set>:

void NRF_CE_Set(void)
{
    14e8:	b580      	push	{r7, lr}
    14ea:	af00      	add	r7, sp, #0
	port_pin_set_output_level(NRF24L01_CE,true);
    14ec:	2101      	movs	r1, #1
    14ee:	202b      	movs	r0, #43	; 0x2b
    14f0:	4b02      	ldr	r3, [pc, #8]	; (14fc <NRF_CE_Set+0x14>)
    14f2:	4798      	blx	r3
	//PORT_IOBUS->Group[1].OUTSET.bit.OUTSET = PORT_PB11;
}
    14f4:	46c0      	nop			; (mov r8, r8)
    14f6:	46bd      	mov	sp, r7
    14f8:	bd80      	pop	{r7, pc}
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	0000138d 	.word	0x0000138d

00001500 <NRF_CE_Clear>:

void NRF_CE_Clear(void)
{
    1500:	b580      	push	{r7, lr}
    1502:	af00      	add	r7, sp, #0
	port_pin_set_output_level(NRF24L01_CE,false);
    1504:	2100      	movs	r1, #0
    1506:	202b      	movs	r0, #43	; 0x2b
    1508:	4b02      	ldr	r3, [pc, #8]	; (1514 <NRF_CE_Clear+0x14>)
    150a:	4798      	blx	r3
	//PORT_IOBUS->Group[1].OUTCLR.bit.OUTCLR = PORT_PB11;
}
    150c:	46c0      	nop			; (mov r8, r8)
    150e:	46bd      	mov	sp, r7
    1510:	bd80      	pop	{r7, pc}
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	0000138d 	.word	0x0000138d

00001518 <NRF_Enter_RX_Mode>:
}



void NRF_Enter_RX_Mode(char Addr[])
{
    1518:	b580      	push	{r7, lr}
    151a:	b082      	sub	sp, #8
    151c:	af00      	add	r7, sp, #0
    151e:	6078      	str	r0, [r7, #4]
	
	NRF_CE_Clear();
    1520:	4b1b      	ldr	r3, [pc, #108]	; (1590 <NRF_Enter_RX_Mode+0x78>)
    1522:	4798      	blx	r3
	delay_ms(1);
    1524:	2001      	movs	r0, #1
    1526:	4b1b      	ldr	r3, [pc, #108]	; (1594 <NRF_Enter_RX_Mode+0x7c>)
    1528:	4798      	blx	r3
	NRF_Write_2(NRF_W_REGISTER(NRF_CONFIG_REG), (NRF_CONFIG_PRIM_RX | NRF_CONFIG_PWR_UP));
    152a:	2103      	movs	r1, #3
    152c:	2020      	movs	r0, #32
    152e:	4b1a      	ldr	r3, [pc, #104]	; (1598 <NRF_Enter_RX_Mode+0x80>)
    1530:	4798      	blx	r3
	
	NRF_Write_2(NRF_W_REGISTER(NRF_EN_RXADDR_REG), (NRF_EN_RXADDR_ERX_P0 | NRF_EN_RXADDR_ERX_P1)); // | NRF_EN_RXADDR_ERX_P2 | NRF_EN_RXADDR_ERX_P3 | NRF_EN_RXADDR_ERX_P4  | NRF_EN_RXADDR_ERX_P5
    1532:	2103      	movs	r1, #3
    1534:	2022      	movs	r0, #34	; 0x22
    1536:	4b18      	ldr	r3, [pc, #96]	; (1598 <NRF_Enter_RX_Mode+0x80>)
    1538:	4798      	blx	r3
	NRF_Write_2(NRF_W_REGISTER(NRF_EN_AA_REG), (NRF_EN_AA_ENAA_P0 | NRF_EN_AA_ENAA_P1)); // | NRF_EN_AA_ENAA_P2 | NRF_EN_AA_ENAA_P3 | NRF_EN_AA_ENAA_P4 | NRF_EN_AA_ENAA_P5
    153a:	2103      	movs	r1, #3
    153c:	2021      	movs	r0, #33	; 0x21
    153e:	4b16      	ldr	r3, [pc, #88]	; (1598 <NRF_Enter_RX_Mode+0x80>)
    1540:	4798      	blx	r3
	NRF_Write_2(NRF_W_REGISTER(NRF_SETUP_AW_REG), (NRF_SETUP_AW_4BYTES)); //NRF_SETUP_AW_4BYTES
    1542:	2102      	movs	r1, #2
    1544:	2023      	movs	r0, #35	; 0x23
    1546:	4b14      	ldr	r3, [pc, #80]	; (1598 <NRF_Enter_RX_Mode+0x80>)
    1548:	4798      	blx	r3
	
	
	NRF_Write(NRF_W_REGISTER(NRF_RX_ADDR_P0_REG),5, Addr);
    154a:	687b      	ldr	r3, [r7, #4]
    154c:	001a      	movs	r2, r3
    154e:	2105      	movs	r1, #5
    1550:	202a      	movs	r0, #42	; 0x2a
    1552:	4b12      	ldr	r3, [pc, #72]	; (159c <NRF_Enter_RX_Mode+0x84>)
    1554:	4798      	blx	r3
	Addr[4] = 0xA1;
    1556:	687b      	ldr	r3, [r7, #4]
    1558:	3304      	adds	r3, #4
    155a:	22a1      	movs	r2, #161	; 0xa1
    155c:	701a      	strb	r2, [r3, #0]
	NRF_Write(NRF_W_REGISTER(NRF_RX_ADDR_P1_REG),5, Addr);
    155e:	687b      	ldr	r3, [r7, #4]
    1560:	001a      	movs	r2, r3
    1562:	2105      	movs	r1, #5
    1564:	202b      	movs	r0, #43	; 0x2b
    1566:	4b0d      	ldr	r3, [pc, #52]	; (159c <NRF_Enter_RX_Mode+0x84>)
    1568:	4798      	blx	r3
	NRF_Write(NRF_W_REGISTER(NRF_RX_ADDR_P4_REG),5, Addr);
	Addr[4] = 0xA5;
	NRF_Write(NRF_W_REGISTER(NRF_RX_ADDR_P5_REG),5, Addr);*/
			
	
	NRF_Write_2(NRF_W_REGISTER(NRF_FEATURE_REG),(NRF_FEATURE_EN_DPL));
    156a:	2104      	movs	r1, #4
    156c:	203d      	movs	r0, #61	; 0x3d
    156e:	4b0a      	ldr	r3, [pc, #40]	; (1598 <NRF_Enter_RX_Mode+0x80>)
    1570:	4798      	blx	r3
	NRF_Write_2(NRF_W_REGISTER(NRF_DYNPD_REG),(NRF_DYNPD_DPL_P0));
    1572:	2101      	movs	r1, #1
    1574:	203c      	movs	r0, #60	; 0x3c
    1576:	4b08      	ldr	r3, [pc, #32]	; (1598 <NRF_Enter_RX_Mode+0x80>)
    1578:	4798      	blx	r3
	NRF_Write_2(NRF_W_REGISTER(NRF_DYNPD_REG),(NRF_DYNPD_DPL_P1));
    157a:	2102      	movs	r1, #2
    157c:	203c      	movs	r0, #60	; 0x3c
    157e:	4b06      	ldr	r3, [pc, #24]	; (1598 <NRF_Enter_RX_Mode+0x80>)
    1580:	4798      	blx	r3
	NRF_Write_2(NRF_W_REGISTER(NRF_DYNPD_REG),(NRF_DYNPD_DPL_P4));
	NRF_Write_2(NRF_W_REGISTER(NRF_DYNPD_REG),(NRF_DYNPD_DPL_P5));*/
	//NRF_Write(NRF_W_REGISTER(NRF_RX_PW_P0_REG),13);
	//NRF_Write(NRF_W_REGISTER(NRF_RX_PW_P1_REG),13);
	
	NRF_CE_Set();
    1582:	4b07      	ldr	r3, [pc, #28]	; (15a0 <NRF_Enter_RX_Mode+0x88>)
    1584:	4798      	blx	r3
}
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	46bd      	mov	sp, r7
    158a:	b002      	add	sp, #8
    158c:	bd80      	pop	{r7, pc}
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	00001501 	.word	0x00001501
    1594:	00001a49 	.word	0x00001a49
    1598:	0000166d 	.word	0x0000166d
    159c:	00001601 	.word	0x00001601
    15a0:	000014e9 	.word	0x000014e9

000015a4 <NRF_Read>:



uint32_t NRF_Read(uint32_t Command,uint32_t Length, char *buffer)
{
    15a4:	b580      	push	{r7, lr}
    15a6:	b086      	sub	sp, #24
    15a8:	af00      	add	r7, sp, #0
    15aa:	60f8      	str	r0, [r7, #12]
    15ac:	60b9      	str	r1, [r7, #8]
    15ae:	607a      	str	r2, [r7, #4]
	uint32_t Status_Reg = 0;
    15b0:	2300      	movs	r3, #0
    15b2:	617b      	str	r3, [r7, #20]
	nrf24l01_spi_read(buffer,Length,(uint16_t)Command);
    15b4:	68bb      	ldr	r3, [r7, #8]
    15b6:	b299      	uxth	r1, r3
    15b8:	68fb      	ldr	r3, [r7, #12]
    15ba:	b29a      	uxth	r2, r3
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	0018      	movs	r0, r3
    15c0:	4b03      	ldr	r3, [pc, #12]	; (15d0 <NRF_Read+0x2c>)
    15c2:	4798      	blx	r3
	{
		buffer[i] = nrf24l01_spi_write_single(&temp);
	}
	NRF_CS_Clear();
	*/
	return Status_Reg;
    15c4:	697b      	ldr	r3, [r7, #20]
}
    15c6:	0018      	movs	r0, r3
    15c8:	46bd      	mov	sp, r7
    15ca:	b006      	add	sp, #24
    15cc:	bd80      	pop	{r7, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	00001435 	.word	0x00001435

000015d4 <NRF_Read_single>:

uint32_t NRF_Read_single(uint32_t Command)
{
    15d4:	b580      	push	{r7, lr}
    15d6:	b084      	sub	sp, #16
    15d8:	af00      	add	r7, sp, #0
    15da:	6078      	str	r0, [r7, #4]
	char buffer;
	//NRF_Read(Command,1,&buffer);
	nrf24l01_spi_read(&buffer,1,(uint16_t)Command);
    15dc:	687b      	ldr	r3, [r7, #4]
    15de:	b29a      	uxth	r2, r3
    15e0:	230f      	movs	r3, #15
    15e2:	18fb      	adds	r3, r7, r3
    15e4:	2101      	movs	r1, #1
    15e6:	0018      	movs	r0, r3
    15e8:	4b04      	ldr	r3, [pc, #16]	; (15fc <NRF_Read_single+0x28>)
    15ea:	4798      	blx	r3
	return buffer;
    15ec:	230f      	movs	r3, #15
    15ee:	18fb      	adds	r3, r7, r3
    15f0:	781b      	ldrb	r3, [r3, #0]
}
    15f2:	0018      	movs	r0, r3
    15f4:	46bd      	mov	sp, r7
    15f6:	b004      	add	sp, #16
    15f8:	bd80      	pop	{r7, pc}
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	00001435 	.word	0x00001435

00001600 <NRF_Write>:


uint32_t NRF_Write(uint32_t Command, uint32_t Length, char *Input)
{
    1600:	b580      	push	{r7, lr}
    1602:	b088      	sub	sp, #32
    1604:	af00      	add	r7, sp, #0
    1606:	60f8      	str	r0, [r7, #12]
    1608:	60b9      	str	r1, [r7, #8]
    160a:	607a      	str	r2, [r7, #4]
	uint32_t Temp=0;
    160c:	2300      	movs	r3, #0
    160e:	61fb      	str	r3, [r7, #28]
	char *buffer = Input;
    1610:	687b      	ldr	r3, [r7, #4]
    1612:	61bb      	str	r3, [r7, #24]
	uint32_t i = 0;
    1614:	2300      	movs	r3, #0
    1616:	617b      	str	r3, [r7, #20]
	NRF_CS_Set();
    1618:	4b11      	ldr	r3, [pc, #68]	; (1660 <NRF_Write+0x60>)
    161a:	4798      	blx	r3
	Temp = nrf24l01_spi_write_single(&Command);
    161c:	230c      	movs	r3, #12
    161e:	18fb      	adds	r3, r7, r3
    1620:	0018      	movs	r0, r3
    1622:	4b10      	ldr	r3, [pc, #64]	; (1664 <NRF_Write+0x64>)
    1624:	4798      	blx	r3
    1626:	0003      	movs	r3, r0
    1628:	61fb      	str	r3, [r7, #28]
	for (i = 0;i<Length;i++)
    162a:	2300      	movs	r3, #0
    162c:	617b      	str	r3, [r7, #20]
    162e:	e00b      	b.n	1648 <NRF_Write+0x48>
	{
		Temp = nrf24l01_spi_write_single(buffer);
    1630:	69bb      	ldr	r3, [r7, #24]
    1632:	0018      	movs	r0, r3
    1634:	4b0b      	ldr	r3, [pc, #44]	; (1664 <NRF_Write+0x64>)
    1636:	4798      	blx	r3
    1638:	0003      	movs	r3, r0
    163a:	61fb      	str	r3, [r7, #28]
		buffer++;
    163c:	69bb      	ldr	r3, [r7, #24]
    163e:	3301      	adds	r3, #1
    1640:	61bb      	str	r3, [r7, #24]
	for (i = 0;i<Length;i++)
    1642:	697b      	ldr	r3, [r7, #20]
    1644:	3301      	adds	r3, #1
    1646:	617b      	str	r3, [r7, #20]
    1648:	697a      	ldr	r2, [r7, #20]
    164a:	68bb      	ldr	r3, [r7, #8]
    164c:	429a      	cmp	r2, r3
    164e:	d3ef      	bcc.n	1630 <NRF_Write+0x30>
	}
	NRF_CS_Clear();
    1650:	4b05      	ldr	r3, [pc, #20]	; (1668 <NRF_Write+0x68>)
    1652:	4798      	blx	r3
	
	return Temp;
    1654:	69fb      	ldr	r3, [r7, #28]
}
    1656:	0018      	movs	r0, r3
    1658:	46bd      	mov	sp, r7
    165a:	b008      	add	sp, #32
    165c:	bd80      	pop	{r7, pc}
    165e:	46c0      	nop			; (mov r8, r8)
    1660:	000014a1 	.word	0x000014a1
    1664:	00001415 	.word	0x00001415
    1668:	000014c5 	.word	0x000014c5

0000166c <NRF_Write_2>:

uint32_t NRF_Write_2(uint32_t Command, char Input)
{
    166c:	b580      	push	{r7, lr}
    166e:	b082      	sub	sp, #8
    1670:	af00      	add	r7, sp, #0
    1672:	6078      	str	r0, [r7, #4]
    1674:	000a      	movs	r2, r1
    1676:	1cfb      	adds	r3, r7, #3
    1678:	701a      	strb	r2, [r3, #0]
	return NRF_Write(Command,1,&Input);
    167a:	1cfa      	adds	r2, r7, #3
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	2101      	movs	r1, #1
    1680:	0018      	movs	r0, r3
    1682:	4b03      	ldr	r3, [pc, #12]	; (1690 <NRF_Write_2+0x24>)
    1684:	4798      	blx	r3
    1686:	0003      	movs	r3, r0
}
    1688:	0018      	movs	r0, r3
    168a:	46bd      	mov	sp, r7
    168c:	b002      	add	sp, #8
    168e:	bd80      	pop	{r7, pc}
    1690:	00001601 	.word	0x00001601

00001694 <NRF_Write_1>:

uint32_t NRF_Write_1(uint32_t Command)
{
    1694:	b580      	push	{r7, lr}
    1696:	b082      	sub	sp, #8
    1698:	af00      	add	r7, sp, #0
    169a:	6078      	str	r0, [r7, #4]
	return NRF_Write(Command,0,'\0');
    169c:	687b      	ldr	r3, [r7, #4]
    169e:	2200      	movs	r2, #0
    16a0:	2100      	movs	r1, #0
    16a2:	0018      	movs	r0, r3
    16a4:	4b03      	ldr	r3, [pc, #12]	; (16b4 <NRF_Write_1+0x20>)
    16a6:	4798      	blx	r3
    16a8:	0003      	movs	r3, r0
}
    16aa:	0018      	movs	r0, r3
    16ac:	46bd      	mov	sp, r7
    16ae:	b002      	add	sp, #8
    16b0:	bd80      	pop	{r7, pc}
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	00001601 	.word	0x00001601

000016b8 <system_pinmux_get_group_from_gpio_pin>:
{
    16b8:	b580      	push	{r7, lr}
    16ba:	b084      	sub	sp, #16
    16bc:	af00      	add	r7, sp, #0
    16be:	0002      	movs	r2, r0
    16c0:	1dfb      	adds	r3, r7, #7
    16c2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    16c4:	230f      	movs	r3, #15
    16c6:	18fb      	adds	r3, r7, r3
    16c8:	1dfa      	adds	r2, r7, #7
    16ca:	7812      	ldrb	r2, [r2, #0]
    16cc:	09d2      	lsrs	r2, r2, #7
    16ce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    16d0:	230e      	movs	r3, #14
    16d2:	18fb      	adds	r3, r7, r3
    16d4:	1dfa      	adds	r2, r7, #7
    16d6:	7812      	ldrb	r2, [r2, #0]
    16d8:	0952      	lsrs	r2, r2, #5
    16da:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    16dc:	4b0d      	ldr	r3, [pc, #52]	; (1714 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    16de:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    16e0:	230f      	movs	r3, #15
    16e2:	18fb      	adds	r3, r7, r3
    16e4:	781b      	ldrb	r3, [r3, #0]
    16e6:	2b00      	cmp	r3, #0
    16e8:	d10f      	bne.n	170a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    16ea:	230f      	movs	r3, #15
    16ec:	18fb      	adds	r3, r7, r3
    16ee:	781b      	ldrb	r3, [r3, #0]
    16f0:	009b      	lsls	r3, r3, #2
    16f2:	2210      	movs	r2, #16
    16f4:	4694      	mov	ip, r2
    16f6:	44bc      	add	ip, r7
    16f8:	4463      	add	r3, ip
    16fa:	3b08      	subs	r3, #8
    16fc:	681a      	ldr	r2, [r3, #0]
    16fe:	230e      	movs	r3, #14
    1700:	18fb      	adds	r3, r7, r3
    1702:	781b      	ldrb	r3, [r3, #0]
    1704:	01db      	lsls	r3, r3, #7
    1706:	18d3      	adds	r3, r2, r3
    1708:	e000      	b.n	170c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    170a:	2300      	movs	r3, #0
}
    170c:	0018      	movs	r0, r3
    170e:	46bd      	mov	sp, r7
    1710:	b004      	add	sp, #16
    1712:	bd80      	pop	{r7, pc}
    1714:	41004400 	.word	0x41004400

00001718 <port_get_group_from_gpio_pin>:
{
    1718:	b580      	push	{r7, lr}
    171a:	b082      	sub	sp, #8
    171c:	af00      	add	r7, sp, #0
    171e:	0002      	movs	r2, r0
    1720:	1dfb      	adds	r3, r7, #7
    1722:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1724:	1dfb      	adds	r3, r7, #7
    1726:	781b      	ldrb	r3, [r3, #0]
    1728:	0018      	movs	r0, r3
    172a:	4b03      	ldr	r3, [pc, #12]	; (1738 <port_get_group_from_gpio_pin+0x20>)
    172c:	4798      	blx	r3
    172e:	0003      	movs	r3, r0
}
    1730:	0018      	movs	r0, r3
    1732:	46bd      	mov	sp, r7
    1734:	b002      	add	sp, #8
    1736:	bd80      	pop	{r7, pc}
    1738:	000016b9 	.word	0x000016b9

0000173c <port_get_config_defaults>:
{
    173c:	b580      	push	{r7, lr}
    173e:	b082      	sub	sp, #8
    1740:	af00      	add	r7, sp, #0
    1742:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    1744:	687b      	ldr	r3, [r7, #4]
    1746:	2200      	movs	r2, #0
    1748:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	2201      	movs	r2, #1
    174e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1750:	687b      	ldr	r3, [r7, #4]
    1752:	2200      	movs	r2, #0
    1754:	709a      	strb	r2, [r3, #2]
}
    1756:	46c0      	nop			; (mov r8, r8)
    1758:	46bd      	mov	sp, r7
    175a:	b002      	add	sp, #8
    175c:	bd80      	pop	{r7, pc}
	...

00001760 <port_pin_set_output_level>:
{
    1760:	b580      	push	{r7, lr}
    1762:	b084      	sub	sp, #16
    1764:	af00      	add	r7, sp, #0
    1766:	0002      	movs	r2, r0
    1768:	1dfb      	adds	r3, r7, #7
    176a:	701a      	strb	r2, [r3, #0]
    176c:	1dbb      	adds	r3, r7, #6
    176e:	1c0a      	adds	r2, r1, #0
    1770:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1772:	1dfb      	adds	r3, r7, #7
    1774:	781b      	ldrb	r3, [r3, #0]
    1776:	0018      	movs	r0, r3
    1778:	4b0d      	ldr	r3, [pc, #52]	; (17b0 <port_pin_set_output_level+0x50>)
    177a:	4798      	blx	r3
    177c:	0003      	movs	r3, r0
    177e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1780:	1dfb      	adds	r3, r7, #7
    1782:	781b      	ldrb	r3, [r3, #0]
    1784:	221f      	movs	r2, #31
    1786:	4013      	ands	r3, r2
    1788:	2201      	movs	r2, #1
    178a:	409a      	lsls	r2, r3
    178c:	0013      	movs	r3, r2
    178e:	60bb      	str	r3, [r7, #8]
	if (level) {
    1790:	1dbb      	adds	r3, r7, #6
    1792:	781b      	ldrb	r3, [r3, #0]
    1794:	2b00      	cmp	r3, #0
    1796:	d003      	beq.n	17a0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1798:	68fb      	ldr	r3, [r7, #12]
    179a:	68ba      	ldr	r2, [r7, #8]
    179c:	619a      	str	r2, [r3, #24]
}
    179e:	e002      	b.n	17a6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    17a0:	68fb      	ldr	r3, [r7, #12]
    17a2:	68ba      	ldr	r2, [r7, #8]
    17a4:	615a      	str	r2, [r3, #20]
}
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	46bd      	mov	sp, r7
    17aa:	b004      	add	sp, #16
    17ac:	bd80      	pop	{r7, pc}
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	00001719 	.word	0x00001719

000017b4 <spi_is_syncing>:
{
    17b4:	b580      	push	{r7, lr}
    17b6:	b084      	sub	sp, #16
    17b8:	af00      	add	r7, sp, #0
    17ba:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    17bc:	687b      	ldr	r3, [r7, #4]
    17be:	681b      	ldr	r3, [r3, #0]
    17c0:	60fb      	str	r3, [r7, #12]
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
    17c2:	68fb      	ldr	r3, [r7, #12]
    17c4:	8a1b      	ldrh	r3, [r3, #16]
    17c6:	b29b      	uxth	r3, r3
    17c8:	001a      	movs	r2, r3
    17ca:	2380      	movs	r3, #128	; 0x80
    17cc:	021b      	lsls	r3, r3, #8
    17ce:	4013      	ands	r3, r2
    17d0:	1e5a      	subs	r2, r3, #1
    17d2:	4193      	sbcs	r3, r2
    17d4:	b2db      	uxtb	r3, r3
}
    17d6:	0018      	movs	r0, r3
    17d8:	46bd      	mov	sp, r7
    17da:	b004      	add	sp, #16
    17dc:	bd80      	pop	{r7, pc}
	...

000017e0 <spi_get_config_defaults>:
{
    17e0:	b580      	push	{r7, lr}
    17e2:	b082      	sub	sp, #8
    17e4:	af00      	add	r7, sp, #0
    17e6:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    17e8:	687b      	ldr	r3, [r7, #4]
    17ea:	2201      	movs	r2, #1
    17ec:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    17ee:	687b      	ldr	r3, [r7, #4]
    17f0:	2200      	movs	r2, #0
    17f2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    17f4:	687b      	ldr	r3, [r7, #4]
    17f6:	2200      	movs	r2, #0
    17f8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    17fa:	687b      	ldr	r3, [r7, #4]
    17fc:	22c0      	movs	r2, #192	; 0xc0
    17fe:	0392      	lsls	r2, r2, #14
    1800:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	2200      	movs	r2, #0
    1806:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    1808:	687b      	ldr	r3, [r7, #4]
    180a:	2200      	movs	r2, #0
    180c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    180e:	687b      	ldr	r3, [r7, #4]
    1810:	2201      	movs	r2, #1
    1812:	749a      	strb	r2, [r3, #18]
	config->generator_source = GCLK_GENERATOR_0;
    1814:	687b      	ldr	r3, [r7, #4]
    1816:	2220      	movs	r2, #32
    1818:	2100      	movs	r1, #0
    181a:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    181c:	687b      	ldr	r3, [r7, #4]
    181e:	3314      	adds	r3, #20
    1820:	220c      	movs	r2, #12
    1822:	2100      	movs	r1, #0
    1824:	0018      	movs	r0, r3
    1826:	4b0a      	ldr	r3, [pc, #40]	; (1850 <spi_get_config_defaults+0x70>)
    1828:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    182a:	687b      	ldr	r3, [r7, #4]
    182c:	4a09      	ldr	r2, [pc, #36]	; (1854 <spi_get_config_defaults+0x74>)
    182e:	615a      	str	r2, [r3, #20]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    1830:	687b      	ldr	r3, [r7, #4]
    1832:	2200      	movs	r2, #0
    1834:	625a      	str	r2, [r3, #36]	; 0x24
	config->pinmux_pad1 = PINMUX_DEFAULT;
    1836:	687b      	ldr	r3, [r7, #4]
    1838:	2200      	movs	r2, #0
    183a:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad2 = PINMUX_DEFAULT;
    183c:	687b      	ldr	r3, [r7, #4]
    183e:	2200      	movs	r2, #0
    1840:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad3 = PINMUX_DEFAULT;
    1842:	687b      	ldr	r3, [r7, #4]
    1844:	2200      	movs	r2, #0
    1846:	631a      	str	r2, [r3, #48]	; 0x30
};
    1848:	46c0      	nop			; (mov r8, r8)
    184a:	46bd      	mov	sp, r7
    184c:	b002      	add	sp, #8
    184e:	bd80      	pop	{r7, pc}
    1850:	00002d35 	.word	0x00002d35
    1854:	000186a0 	.word	0x000186a0

00001858 <spi_slave_inst_get_config_defaults>:
{
    1858:	b580      	push	{r7, lr}
    185a:	b082      	sub	sp, #8
    185c:	af00      	add	r7, sp, #0
    185e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    1860:	687b      	ldr	r3, [r7, #4]
    1862:	220a      	movs	r2, #10
    1864:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    1866:	687b      	ldr	r3, [r7, #4]
    1868:	2200      	movs	r2, #0
    186a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    186c:	687b      	ldr	r3, [r7, #4]
    186e:	2200      	movs	r2, #0
    1870:	709a      	strb	r2, [r3, #2]
}
    1872:	46c0      	nop			; (mov r8, r8)
    1874:	46bd      	mov	sp, r7
    1876:	b002      	add	sp, #8
    1878:	bd80      	pop	{r7, pc}
	...

0000187c <spi_attach_slave>:
{
    187c:	b580      	push	{r7, lr}
    187e:	b084      	sub	sp, #16
    1880:	af00      	add	r7, sp, #0
    1882:	6078      	str	r0, [r7, #4]
    1884:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
    1886:	683b      	ldr	r3, [r7, #0]
    1888:	781a      	ldrb	r2, [r3, #0]
    188a:	687b      	ldr	r3, [r7, #4]
    188c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    188e:	683b      	ldr	r3, [r7, #0]
    1890:	785a      	ldrb	r2, [r3, #1]
    1892:	687b      	ldr	r3, [r7, #4]
    1894:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    1896:	683b      	ldr	r3, [r7, #0]
    1898:	789a      	ldrb	r2, [r3, #2]
    189a:	687b      	ldr	r3, [r7, #4]
    189c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    189e:	230c      	movs	r3, #12
    18a0:	18fb      	adds	r3, r7, r3
    18a2:	0018      	movs	r0, r3
    18a4:	4b0b      	ldr	r3, [pc, #44]	; (18d4 <spi_attach_slave+0x58>)
    18a6:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    18a8:	230c      	movs	r3, #12
    18aa:	18fb      	adds	r3, r7, r3
    18ac:	2201      	movs	r2, #1
    18ae:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	781b      	ldrb	r3, [r3, #0]
    18b4:	220c      	movs	r2, #12
    18b6:	18ba      	adds	r2, r7, r2
    18b8:	0011      	movs	r1, r2
    18ba:	0018      	movs	r0, r3
    18bc:	4b06      	ldr	r3, [pc, #24]	; (18d8 <spi_attach_slave+0x5c>)
    18be:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    18c0:	687b      	ldr	r3, [r7, #4]
    18c2:	781b      	ldrb	r3, [r3, #0]
    18c4:	2101      	movs	r1, #1
    18c6:	0018      	movs	r0, r3
    18c8:	4b04      	ldr	r3, [pc, #16]	; (18dc <spi_attach_slave+0x60>)
    18ca:	4798      	blx	r3
}
    18cc:	46c0      	nop			; (mov r8, r8)
    18ce:	46bd      	mov	sp, r7
    18d0:	b004      	add	sp, #16
    18d2:	bd80      	pop	{r7, pc}
    18d4:	0000173d 	.word	0x0000173d
    18d8:	0000012d 	.word	0x0000012d
    18dc:	00001761 	.word	0x00001761

000018e0 <spi_enable>:
{
    18e0:	b580      	push	{r7, lr}
    18e2:	b084      	sub	sp, #16
    18e4:	af00      	add	r7, sp, #0
    18e6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	681b      	ldr	r3, [r3, #0]
    18ec:	60fb      	str	r3, [r7, #12]
	while (spi_is_syncing(module)) {
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	687b      	ldr	r3, [r7, #4]
    18f2:	0018      	movs	r0, r3
    18f4:	4b06      	ldr	r3, [pc, #24]	; (1910 <spi_enable+0x30>)
    18f6:	4798      	blx	r3
    18f8:	1e03      	subs	r3, r0, #0
    18fa:	d1f9      	bne.n	18f0 <spi_enable+0x10>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    18fc:	68fb      	ldr	r3, [r7, #12]
    18fe:	681b      	ldr	r3, [r3, #0]
    1900:	2202      	movs	r2, #2
    1902:	431a      	orrs	r2, r3
    1904:	68fb      	ldr	r3, [r7, #12]
    1906:	601a      	str	r2, [r3, #0]
}
    1908:	46c0      	nop			; (mov r8, r8)
    190a:	46bd      	mov	sp, r7
    190c:	b004      	add	sp, #16
    190e:	bd80      	pop	{r7, pc}
    1910:	000017b5 	.word	0x000017b5

00001914 <spi_master_init>:
 */ 

#include "spi_master.h"

void spi_master_init(void)
{
    1914:	b580      	push	{r7, lr}
    1916:	b090      	sub	sp, #64	; 0x40
    1918:	af00      	add	r7, sp, #0
	struct spi_config config_spi;
	struct spi_slave_inst_config bme280_slave_config;
	struct spi_slave_inst_config nrf24l01_slave_config;
	
	spi_slave_inst_get_config_defaults(&nrf24l01_slave_config);
    191a:	1d3b      	adds	r3, r7, #4
    191c:	0018      	movs	r0, r3
    191e:	4b1c      	ldr	r3, [pc, #112]	; (1990 <spi_master_init+0x7c>)
    1920:	4798      	blx	r3
	nrf24l01_slave_config.ss_pin = NRF24L01_SS;
    1922:	1d3b      	adds	r3, r7, #4
    1924:	220a      	movs	r2, #10
    1926:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&nrf24l01_slave_instance, &nrf24l01_slave_config);
    1928:	1d3a      	adds	r2, r7, #4
    192a:	4b1a      	ldr	r3, [pc, #104]	; (1994 <spi_master_init+0x80>)
    192c:	0011      	movs	r1, r2
    192e:	0018      	movs	r0, r3
    1930:	4b19      	ldr	r3, [pc, #100]	; (1998 <spi_master_init+0x84>)
    1932:	4798      	blx	r3
	
	
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi);
    1934:	230c      	movs	r3, #12
    1936:	18fb      	adds	r3, r7, r3
    1938:	0018      	movs	r0, r3
    193a:	4b18      	ldr	r3, [pc, #96]	; (199c <spi_master_init+0x88>)
    193c:	4798      	blx	r3
	config_spi.mux_setting = SPI_MUX_SETTING;
    193e:	230c      	movs	r3, #12
    1940:	18fb      	adds	r3, r7, r3
    1942:	22c0      	movs	r2, #192	; 0xc0
    1944:	0392      	lsls	r2, r2, #14
    1946:	60da      	str	r2, [r3, #12]
	/* Configure pad 0 for data in */
	config_spi.pinmux_pad0 = SPI_MOSI;
    1948:	230c      	movs	r3, #12
    194a:	18fb      	adds	r3, r7, r3
    194c:	4a14      	ldr	r2, [pc, #80]	; (19a0 <spi_master_init+0x8c>)
    194e:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure pad 1 as unused */
	config_spi.pinmux_pad1 = SPI_SCK;
    1950:	230c      	movs	r3, #12
    1952:	18fb      	adds	r3, r7, r3
    1954:	4a13      	ldr	r2, [pc, #76]	; (19a4 <spi_master_init+0x90>)
    1956:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure pad 2 for data out */
	config_spi.pinmux_pad2 = PINMUX_UNUSED;
    1958:	230c      	movs	r3, #12
    195a:	18fb      	adds	r3, r7, r3
    195c:	2201      	movs	r2, #1
    195e:	4252      	negs	r2, r2
    1960:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure pad 3 for SCK */
	config_spi.pinmux_pad3 = SPI_MISO;
    1962:	230c      	movs	r3, #12
    1964:	18fb      	adds	r3, r7, r3
    1966:	4a10      	ldr	r2, [pc, #64]	; (19a8 <spi_master_init+0x94>)
    1968:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi.receiver_enable = true;
    196a:	230c      	movs	r3, #12
    196c:	18fb      	adds	r3, r7, r3
    196e:	2201      	movs	r2, #1
    1970:	749a      	strb	r2, [r3, #18]
	spi_init(&spi_master_instance, SPI_MODULE, &config_spi); 
    1972:	230c      	movs	r3, #12
    1974:	18fa      	adds	r2, r7, r3
    1976:	490d      	ldr	r1, [pc, #52]	; (19ac <spi_master_init+0x98>)
    1978:	4b0d      	ldr	r3, [pc, #52]	; (19b0 <spi_master_init+0x9c>)
    197a:	0018      	movs	r0, r3
    197c:	4b0d      	ldr	r3, [pc, #52]	; (19b4 <spi_master_init+0xa0>)
    197e:	4798      	blx	r3
	spi_enable(&spi_master_instance);
    1980:	4b0b      	ldr	r3, [pc, #44]	; (19b0 <spi_master_init+0x9c>)
    1982:	0018      	movs	r0, r3
    1984:	4b0c      	ldr	r3, [pc, #48]	; (19b8 <spi_master_init+0xa4>)
    1986:	4798      	blx	r3
}
    1988:	46c0      	nop			; (mov r8, r8)
    198a:	46bd      	mov	sp, r7
    198c:	b010      	add	sp, #64	; 0x40
    198e:	bd80      	pop	{r7, pc}
    1990:	00001859 	.word	0x00001859
    1994:	20000054 	.word	0x20000054
    1998:	0000187d 	.word	0x0000187d
    199c:	000017e1 	.word	0x000017e1
    19a0:	00080003 	.word	0x00080003
    19a4:	00090003 	.word	0x00090003
    19a8:	000b0003 	.word	0x000b0003
    19ac:	42001000 	.word	0x42001000
    19b0:	20000058 	.word	0x20000058
    19b4:	00000c5d 	.word	0x00000c5d
    19b8:	000018e1 	.word	0x000018e1

000019bc <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    19bc:	b580      	push	{r7, lr}
    19be:	b082      	sub	sp, #8
    19c0:	af00      	add	r7, sp, #0
    19c2:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    19c4:	687b      	ldr	r3, [r7, #4]
    19c6:	2b00      	cmp	r3, #0
    19c8:	d00c      	beq.n	19e4 <delay_cycles+0x28>
		SysTick->LOAD = n;
    19ca:	4b08      	ldr	r3, [pc, #32]	; (19ec <delay_cycles+0x30>)
    19cc:	687a      	ldr	r2, [r7, #4]
    19ce:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    19d0:	4b06      	ldr	r3, [pc, #24]	; (19ec <delay_cycles+0x30>)
    19d2:	2200      	movs	r2, #0
    19d4:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	4b04      	ldr	r3, [pc, #16]	; (19ec <delay_cycles+0x30>)
    19da:	681a      	ldr	r2, [r3, #0]
    19dc:	2380      	movs	r3, #128	; 0x80
    19de:	025b      	lsls	r3, r3, #9
    19e0:	4013      	ands	r3, r2
    19e2:	d0f9      	beq.n	19d8 <delay_cycles+0x1c>
		};
	}
}
    19e4:	46c0      	nop			; (mov r8, r8)
    19e6:	46bd      	mov	sp, r7
    19e8:	b002      	add	sp, #8
    19ea:	bd80      	pop	{r7, pc}
    19ec:	e000e010 	.word	0xe000e010

000019f0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    19f0:	b580      	push	{r7, lr}
    19f2:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    19f4:	2000      	movs	r0, #0
    19f6:	4b0f      	ldr	r3, [pc, #60]	; (1a34 <delay_init+0x44>)
    19f8:	4798      	blx	r3
    19fa:	0002      	movs	r2, r0
    19fc:	4b0e      	ldr	r3, [pc, #56]	; (1a38 <delay_init+0x48>)
    19fe:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    1a00:	4b0d      	ldr	r3, [pc, #52]	; (1a38 <delay_init+0x48>)
    1a02:	6818      	ldr	r0, [r3, #0]
    1a04:	4b0d      	ldr	r3, [pc, #52]	; (1a3c <delay_init+0x4c>)
    1a06:	22fa      	movs	r2, #250	; 0xfa
    1a08:	0091      	lsls	r1, r2, #2
    1a0a:	4798      	blx	r3
    1a0c:	0003      	movs	r3, r0
    1a0e:	001a      	movs	r2, r3
    1a10:	4b09      	ldr	r3, [pc, #36]	; (1a38 <delay_init+0x48>)
    1a12:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1a14:	4b08      	ldr	r3, [pc, #32]	; (1a38 <delay_init+0x48>)
    1a16:	6818      	ldr	r0, [r3, #0]
    1a18:	4b08      	ldr	r3, [pc, #32]	; (1a3c <delay_init+0x4c>)
    1a1a:	22fa      	movs	r2, #250	; 0xfa
    1a1c:	0091      	lsls	r1, r2, #2
    1a1e:	4798      	blx	r3
    1a20:	0003      	movs	r3, r0
    1a22:	001a      	movs	r2, r3
    1a24:	4b06      	ldr	r3, [pc, #24]	; (1a40 <delay_init+0x50>)
    1a26:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1a28:	4b06      	ldr	r3, [pc, #24]	; (1a44 <delay_init+0x54>)
    1a2a:	2205      	movs	r2, #5
    1a2c:	601a      	str	r2, [r3, #0]
}
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	46bd      	mov	sp, r7
    1a32:	bd80      	pop	{r7, pc}
    1a34:	00002369 	.word	0x00002369
    1a38:	20000000 	.word	0x20000000
    1a3c:	00002a01 	.word	0x00002a01
    1a40:	20000004 	.word	0x20000004
    1a44:	e000e010 	.word	0xe000e010

00001a48 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1a48:	b580      	push	{r7, lr}
    1a4a:	b082      	sub	sp, #8
    1a4c:	af00      	add	r7, sp, #0
    1a4e:	6078      	str	r0, [r7, #4]
	while (n--) {
    1a50:	e004      	b.n	1a5c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1a52:	4b07      	ldr	r3, [pc, #28]	; (1a70 <delay_cycles_ms+0x28>)
    1a54:	681b      	ldr	r3, [r3, #0]
    1a56:	0018      	movs	r0, r3
    1a58:	4b06      	ldr	r3, [pc, #24]	; (1a74 <delay_cycles_ms+0x2c>)
    1a5a:	4798      	blx	r3
	while (n--) {
    1a5c:	687b      	ldr	r3, [r7, #4]
    1a5e:	1e5a      	subs	r2, r3, #1
    1a60:	607a      	str	r2, [r7, #4]
    1a62:	2b00      	cmp	r3, #0
    1a64:	d1f5      	bne.n	1a52 <delay_cycles_ms+0xa>
	}
}
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	46bd      	mov	sp, r7
    1a6a:	b002      	add	sp, #8
    1a6c:	bd80      	pop	{r7, pc}
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	20000000 	.word	0x20000000
    1a74:	000019bd 	.word	0x000019bd

00001a78 <LED_Init>:

#include "LED.h"


void LED_Init(void)
{
    1a78:	b580      	push	{r7, lr}
    1a7a:	af00      	add	r7, sp, #0
	//Timer inits 
	
	// RED
	PORT->Group[1].PMUX[4].bit.PMUXE = 0x05;
    1a7c:	4953      	ldr	r1, [pc, #332]	; (1bcc <LED_Init+0x154>)
    1a7e:	22b4      	movs	r2, #180	; 0xb4
    1a80:	5c8b      	ldrb	r3, [r1, r2]
    1a82:	200f      	movs	r0, #15
    1a84:	4383      	bics	r3, r0
    1a86:	1c18      	adds	r0, r3, #0
    1a88:	2305      	movs	r3, #5
    1a8a:	4303      	orrs	r3, r0
    1a8c:	548b      	strb	r3, [r1, r2]
	PORT->Group[1].PINCFG[8].bit.PMUXEN = 1;
    1a8e:	494f      	ldr	r1, [pc, #316]	; (1bcc <LED_Init+0x154>)
    1a90:	22c8      	movs	r2, #200	; 0xc8
    1a92:	5c8b      	ldrb	r3, [r1, r2]
    1a94:	2001      	movs	r0, #1
    1a96:	4303      	orrs	r3, r0
    1a98:	548b      	strb	r3, [r1, r2]
	PM->APBCMASK.bit.TC4_=1;
    1a9a:	4a4d      	ldr	r2, [pc, #308]	; (1bd0 <LED_Init+0x158>)
    1a9c:	6a13      	ldr	r3, [r2, #32]
    1a9e:	2180      	movs	r1, #128	; 0x80
    1aa0:	0149      	lsls	r1, r1, #5
    1aa2:	430b      	orrs	r3, r1
    1aa4:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1aa6:	4b4b      	ldr	r3, [pc, #300]	; (1bd4 <LED_Init+0x15c>)
    1aa8:	4a4b      	ldr	r2, [pc, #300]	; (1bd8 <LED_Init+0x160>)
    1aaa:	805a      	strh	r2, [r3, #2]
	TC4->COUNT16.CTRLC.bit.INVEN0=1;
    1aac:	4a4b      	ldr	r2, [pc, #300]	; (1bdc <LED_Init+0x164>)
    1aae:	7993      	ldrb	r3, [r2, #6]
    1ab0:	2101      	movs	r1, #1
    1ab2:	430b      	orrs	r3, r1
    1ab4:	7193      	strb	r3, [r2, #6]
	TC4->COUNT16.CTRLA.bit.MODE = 0x00;
    1ab6:	4a49      	ldr	r2, [pc, #292]	; (1bdc <LED_Init+0x164>)
    1ab8:	8813      	ldrh	r3, [r2, #0]
    1aba:	210c      	movs	r1, #12
    1abc:	438b      	bics	r3, r1
    1abe:	8013      	strh	r3, [r2, #0]
	TC4->COUNT16.CTRLA.bit.PRESCALER = 0x00;
    1ac0:	4a46      	ldr	r2, [pc, #280]	; (1bdc <LED_Init+0x164>)
    1ac2:	8813      	ldrh	r3, [r2, #0]
    1ac4:	4946      	ldr	r1, [pc, #280]	; (1be0 <LED_Init+0x168>)
    1ac6:	400b      	ands	r3, r1
    1ac8:	8013      	strh	r3, [r2, #0]
	TC4->COUNT16.CTRLA.bit.WAVEGEN = 0x02;
    1aca:	4a44      	ldr	r2, [pc, #272]	; (1bdc <LED_Init+0x164>)
    1acc:	8813      	ldrh	r3, [r2, #0]
    1ace:	2160      	movs	r1, #96	; 0x60
    1ad0:	438b      	bics	r3, r1
    1ad2:	1c19      	adds	r1, r3, #0
    1ad4:	2340      	movs	r3, #64	; 0x40
    1ad6:	430b      	orrs	r3, r1
    1ad8:	8013      	strh	r3, [r2, #0]
	TC4->COUNT16.CC[0].bit.CC = 1;
    1ada:	4b40      	ldr	r3, [pc, #256]	; (1bdc <LED_Init+0x164>)
    1adc:	2201      	movs	r2, #1
    1ade:	831a      	strh	r2, [r3, #24]
	TC4->COUNT16.CTRLA.bit.ENABLE = 1;
    1ae0:	4a3e      	ldr	r2, [pc, #248]	; (1bdc <LED_Init+0x164>)
    1ae2:	8813      	ldrh	r3, [r2, #0]
    1ae4:	2102      	movs	r1, #2
    1ae6:	430b      	orrs	r3, r1
    1ae8:	8013      	strh	r3, [r2, #0]
	
	
	// GREEN
	PORT->Group[1].PMUX[5].bit.PMUXE = 0x05;
    1aea:	4938      	ldr	r1, [pc, #224]	; (1bcc <LED_Init+0x154>)
    1aec:	22b5      	movs	r2, #181	; 0xb5
    1aee:	5c8b      	ldrb	r3, [r1, r2]
    1af0:	200f      	movs	r0, #15
    1af2:	4383      	bics	r3, r0
    1af4:	1c18      	adds	r0, r3, #0
    1af6:	2305      	movs	r3, #5
    1af8:	4303      	orrs	r3, r0
    1afa:	548b      	strb	r3, [r1, r2]
	PORT->Group[1].PINCFG[10].bit.PMUXEN = 1;
    1afc:	4933      	ldr	r1, [pc, #204]	; (1bcc <LED_Init+0x154>)
    1afe:	22ca      	movs	r2, #202	; 0xca
    1b00:	5c8b      	ldrb	r3, [r1, r2]
    1b02:	2001      	movs	r0, #1
    1b04:	4303      	orrs	r3, r0
    1b06:	548b      	strb	r3, [r1, r2]
	PM->APBCMASK.bit.TC5_=1;
    1b08:	4a31      	ldr	r2, [pc, #196]	; (1bd0 <LED_Init+0x158>)
    1b0a:	6a13      	ldr	r3, [r2, #32]
    1b0c:	2180      	movs	r1, #128	; 0x80
    1b0e:	0189      	lsls	r1, r1, #6
    1b10:	430b      	orrs	r3, r1
    1b12:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC4_TC5;
    1b14:	4b2f      	ldr	r3, [pc, #188]	; (1bd4 <LED_Init+0x15c>)
    1b16:	4a30      	ldr	r2, [pc, #192]	; (1bd8 <LED_Init+0x160>)
    1b18:	805a      	strh	r2, [r3, #2]
	TC5->COUNT16.CTRLC.bit.INVEN0=1;
    1b1a:	4a32      	ldr	r2, [pc, #200]	; (1be4 <LED_Init+0x16c>)
    1b1c:	7993      	ldrb	r3, [r2, #6]
    1b1e:	2101      	movs	r1, #1
    1b20:	430b      	orrs	r3, r1
    1b22:	7193      	strb	r3, [r2, #6]
	TC5->COUNT16.CTRLA.bit.MODE = 0x00;
    1b24:	4a2f      	ldr	r2, [pc, #188]	; (1be4 <LED_Init+0x16c>)
    1b26:	8813      	ldrh	r3, [r2, #0]
    1b28:	210c      	movs	r1, #12
    1b2a:	438b      	bics	r3, r1
    1b2c:	8013      	strh	r3, [r2, #0]
	TC5->COUNT16.CTRLA.bit.PRESCALER = 0x00;
    1b2e:	4a2d      	ldr	r2, [pc, #180]	; (1be4 <LED_Init+0x16c>)
    1b30:	8813      	ldrh	r3, [r2, #0]
    1b32:	492b      	ldr	r1, [pc, #172]	; (1be0 <LED_Init+0x168>)
    1b34:	400b      	ands	r3, r1
    1b36:	8013      	strh	r3, [r2, #0]
	TC5->COUNT16.CTRLA.bit.WAVEGEN = 0x02;
    1b38:	4a2a      	ldr	r2, [pc, #168]	; (1be4 <LED_Init+0x16c>)
    1b3a:	8813      	ldrh	r3, [r2, #0]
    1b3c:	2160      	movs	r1, #96	; 0x60
    1b3e:	438b      	bics	r3, r1
    1b40:	1c19      	adds	r1, r3, #0
    1b42:	2340      	movs	r3, #64	; 0x40
    1b44:	430b      	orrs	r3, r1
    1b46:	8013      	strh	r3, [r2, #0]
	TC5->COUNT16.CC[0].bit.CC = 1;
    1b48:	4b26      	ldr	r3, [pc, #152]	; (1be4 <LED_Init+0x16c>)
    1b4a:	2201      	movs	r2, #1
    1b4c:	831a      	strh	r2, [r3, #24]
	TC5->COUNT16.CTRLA.bit.ENABLE = 1;
    1b4e:	4a25      	ldr	r2, [pc, #148]	; (1be4 <LED_Init+0x16c>)
    1b50:	8813      	ldrh	r3, [r2, #0]
    1b52:	2102      	movs	r1, #2
    1b54:	430b      	orrs	r3, r1
    1b56:	8013      	strh	r3, [r2, #0]
	
	
	//BLUE
	PORT->Group[0].PMUX[6].bit.PMUXE = 0x04;
    1b58:	491c      	ldr	r1, [pc, #112]	; (1bcc <LED_Init+0x154>)
    1b5a:	2236      	movs	r2, #54	; 0x36
    1b5c:	5c8b      	ldrb	r3, [r1, r2]
    1b5e:	200f      	movs	r0, #15
    1b60:	4383      	bics	r3, r0
    1b62:	1c18      	adds	r0, r3, #0
    1b64:	2304      	movs	r3, #4
    1b66:	4303      	orrs	r3, r0
    1b68:	548b      	strb	r3, [r1, r2]
	PORT->Group[0].PINCFG[12].bit.PMUXEN = 1;
    1b6a:	4918      	ldr	r1, [pc, #96]	; (1bcc <LED_Init+0x154>)
    1b6c:	224c      	movs	r2, #76	; 0x4c
    1b6e:	5c8b      	ldrb	r3, [r1, r2]
    1b70:	2001      	movs	r0, #1
    1b72:	4303      	orrs	r3, r0
    1b74:	548b      	strb	r3, [r1, r2]
	PM->APBCMASK.bit.TC2_ = 1;
    1b76:	4a16      	ldr	r2, [pc, #88]	; (1bd0 <LED_Init+0x158>)
    1b78:	6a13      	ldr	r3, [r2, #32]
    1b7a:	2180      	movs	r1, #128	; 0x80
    1b7c:	00c9      	lsls	r1, r1, #3
    1b7e:	430b      	orrs	r3, r1
    1b80:	6213      	str	r3, [r2, #32]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_TC2_TC3;
    1b82:	4b14      	ldr	r3, [pc, #80]	; (1bd4 <LED_Init+0x15c>)
    1b84:	4a18      	ldr	r2, [pc, #96]	; (1be8 <LED_Init+0x170>)
    1b86:	805a      	strh	r2, [r3, #2]
	TC2->COUNT16.CTRLC.bit.INVEN0=1;
    1b88:	4a18      	ldr	r2, [pc, #96]	; (1bec <LED_Init+0x174>)
    1b8a:	7993      	ldrb	r3, [r2, #6]
    1b8c:	2101      	movs	r1, #1
    1b8e:	430b      	orrs	r3, r1
    1b90:	7193      	strb	r3, [r2, #6]
	TC2->COUNT16.CTRLA.bit.MODE = 0x00;
    1b92:	4a16      	ldr	r2, [pc, #88]	; (1bec <LED_Init+0x174>)
    1b94:	8813      	ldrh	r3, [r2, #0]
    1b96:	210c      	movs	r1, #12
    1b98:	438b      	bics	r3, r1
    1b9a:	8013      	strh	r3, [r2, #0]
	TC2->COUNT16.CTRLA.bit.PRESCALER = 0x00;
    1b9c:	4a13      	ldr	r2, [pc, #76]	; (1bec <LED_Init+0x174>)
    1b9e:	8813      	ldrh	r3, [r2, #0]
    1ba0:	490f      	ldr	r1, [pc, #60]	; (1be0 <LED_Init+0x168>)
    1ba2:	400b      	ands	r3, r1
    1ba4:	8013      	strh	r3, [r2, #0]
	TC2->COUNT16.CTRLA.bit.WAVEGEN = 0x02;
    1ba6:	4a11      	ldr	r2, [pc, #68]	; (1bec <LED_Init+0x174>)
    1ba8:	8813      	ldrh	r3, [r2, #0]
    1baa:	2160      	movs	r1, #96	; 0x60
    1bac:	438b      	bics	r3, r1
    1bae:	1c19      	adds	r1, r3, #0
    1bb0:	2340      	movs	r3, #64	; 0x40
    1bb2:	430b      	orrs	r3, r1
    1bb4:	8013      	strh	r3, [r2, #0]
	TC2->COUNT16.CC[0].bit.CC = 1;
    1bb6:	4b0d      	ldr	r3, [pc, #52]	; (1bec <LED_Init+0x174>)
    1bb8:	2201      	movs	r2, #1
    1bba:	831a      	strh	r2, [r3, #24]
	TC2->COUNT16.CTRLA.bit.ENABLE = 1;
    1bbc:	4a0b      	ldr	r2, [pc, #44]	; (1bec <LED_Init+0x174>)
    1bbe:	8813      	ldrh	r3, [r2, #0]
    1bc0:	2102      	movs	r1, #2
    1bc2:	430b      	orrs	r3, r1
    1bc4:	8013      	strh	r3, [r2, #0]
}
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	46bd      	mov	sp, r7
    1bca:	bd80      	pop	{r7, pc}
    1bcc:	41004400 	.word	0x41004400
    1bd0:	40000400 	.word	0x40000400
    1bd4:	40000c00 	.word	0x40000c00
    1bd8:	00004015 	.word	0x00004015
    1bdc:	42003000 	.word	0x42003000
    1be0:	fffff8ff 	.word	0xfffff8ff
    1be4:	42003400 	.word	0x42003400
    1be8:	00004014 	.word	0x00004014
    1bec:	42002800 	.word	0x42002800

00001bf0 <LED_Set_Color>:



void LED_Set_Color(uint32_t Hex_Color_Code)
{
    1bf0:	b580      	push	{r7, lr}
    1bf2:	b082      	sub	sp, #8
    1bf4:	af00      	add	r7, sp, #0
    1bf6:	6078      	str	r0, [r7, #4]
	//Red
	TC4->COUNT16.CC[0].bit.CC = (Hex_Color_Code>>16 & MASK_8BIT)*LED_SCALE_FACTOR;
    1bf8:	4a16      	ldr	r2, [pc, #88]	; (1c54 <LED_Set_Color+0x64>)
    1bfa:	687b      	ldr	r3, [r7, #4]
    1bfc:	0c1b      	lsrs	r3, r3, #16
    1bfe:	b29b      	uxth	r3, r3
    1c00:	21ff      	movs	r1, #255	; 0xff
    1c02:	400b      	ands	r3, r1
    1c04:	b29b      	uxth	r3, r3
    1c06:	1c19      	adds	r1, r3, #0
    1c08:	0089      	lsls	r1, r1, #2
    1c0a:	18c9      	adds	r1, r1, r3
    1c0c:	00c9      	lsls	r1, r1, #3
    1c0e:	1acb      	subs	r3, r1, r3
    1c10:	b29b      	uxth	r3, r3
    1c12:	8313      	strh	r3, [r2, #24]
	//Green
	TC5->COUNT16.CC[0].bit.CC = (Hex_Color_Code>>8 & MASK_8BIT)*LED_SCALE_FACTOR;
    1c14:	4a10      	ldr	r2, [pc, #64]	; (1c58 <LED_Set_Color+0x68>)
    1c16:	687b      	ldr	r3, [r7, #4]
    1c18:	0a1b      	lsrs	r3, r3, #8
    1c1a:	b29b      	uxth	r3, r3
    1c1c:	21ff      	movs	r1, #255	; 0xff
    1c1e:	400b      	ands	r3, r1
    1c20:	b29b      	uxth	r3, r3
    1c22:	1c19      	adds	r1, r3, #0
    1c24:	0089      	lsls	r1, r1, #2
    1c26:	18c9      	adds	r1, r1, r3
    1c28:	00c9      	lsls	r1, r1, #3
    1c2a:	1acb      	subs	r3, r1, r3
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	8313      	strh	r3, [r2, #24]
	//Blue
	TC2->COUNT16.CC[0].bit.CC = (Hex_Color_Code>>0 & MASK_8BIT)*LED_SCALE_FACTOR;
    1c30:	4a0a      	ldr	r2, [pc, #40]	; (1c5c <LED_Set_Color+0x6c>)
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	b29b      	uxth	r3, r3
    1c36:	21ff      	movs	r1, #255	; 0xff
    1c38:	400b      	ands	r3, r1
    1c3a:	b29b      	uxth	r3, r3
    1c3c:	1c19      	adds	r1, r3, #0
    1c3e:	0089      	lsls	r1, r1, #2
    1c40:	18c9      	adds	r1, r1, r3
    1c42:	00c9      	lsls	r1, r1, #3
    1c44:	1acb      	subs	r3, r1, r3
    1c46:	b29b      	uxth	r3, r3
    1c48:	8313      	strh	r3, [r2, #24]
}
    1c4a:	46c0      	nop			; (mov r8, r8)
    1c4c:	46bd      	mov	sp, r7
    1c4e:	b002      	add	sp, #8
    1c50:	bd80      	pop	{r7, pc}
    1c52:	46c0      	nop			; (mov r8, r8)
    1c54:	42003000 	.word	0x42003000
    1c58:	42003400 	.word	0x42003400
    1c5c:	42002800 	.word	0x42002800

00001c60 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1c60:	b580      	push	{r7, lr}
    1c62:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1c64:	46c0      	nop			; (mov r8, r8)
    1c66:	46bd      	mov	sp, r7
    1c68:	bd80      	pop	{r7, pc}
	...

00001c6c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    1c6c:	b580      	push	{r7, lr}
    1c6e:	b082      	sub	sp, #8
    1c70:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    1c72:	4b10      	ldr	r3, [pc, #64]	; (1cb4 <cpu_irq_enter_critical+0x48>)
    1c74:	681b      	ldr	r3, [r3, #0]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d112      	bne.n	1ca0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1c7a:	f3ef 8310 	mrs	r3, PRIMASK
    1c7e:	607b      	str	r3, [r7, #4]
  return(result);
    1c80:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    1c82:	2b00      	cmp	r3, #0
    1c84:	d109      	bne.n	1c9a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    1c86:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1c88:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1c8c:	4b0a      	ldr	r3, [pc, #40]	; (1cb8 <cpu_irq_enter_critical+0x4c>)
    1c8e:	2200      	movs	r2, #0
    1c90:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1c92:	4b0a      	ldr	r3, [pc, #40]	; (1cbc <cpu_irq_enter_critical+0x50>)
    1c94:	2201      	movs	r2, #1
    1c96:	701a      	strb	r2, [r3, #0]
    1c98:	e002      	b.n	1ca0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1c9a:	4b08      	ldr	r3, [pc, #32]	; (1cbc <cpu_irq_enter_critical+0x50>)
    1c9c:	2200      	movs	r2, #0
    1c9e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1ca0:	4b04      	ldr	r3, [pc, #16]	; (1cb4 <cpu_irq_enter_critical+0x48>)
    1ca2:	681b      	ldr	r3, [r3, #0]
    1ca4:	1c5a      	adds	r2, r3, #1
    1ca6:	4b03      	ldr	r3, [pc, #12]	; (1cb4 <cpu_irq_enter_critical+0x48>)
    1ca8:	601a      	str	r2, [r3, #0]
}
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	46bd      	mov	sp, r7
    1cae:	b002      	add	sp, #8
    1cb0:	bd80      	pop	{r7, pc}
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	20000038 	.word	0x20000038
    1cb8:	20000008 	.word	0x20000008
    1cbc:	2000003c 	.word	0x2000003c

00001cc0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    1cc0:	b580      	push	{r7, lr}
    1cc2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1cc4:	4b0b      	ldr	r3, [pc, #44]	; (1cf4 <cpu_irq_leave_critical+0x34>)
    1cc6:	681b      	ldr	r3, [r3, #0]
    1cc8:	1e5a      	subs	r2, r3, #1
    1cca:	4b0a      	ldr	r3, [pc, #40]	; (1cf4 <cpu_irq_leave_critical+0x34>)
    1ccc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1cce:	4b09      	ldr	r3, [pc, #36]	; (1cf4 <cpu_irq_leave_critical+0x34>)
    1cd0:	681b      	ldr	r3, [r3, #0]
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d10a      	bne.n	1cec <cpu_irq_leave_critical+0x2c>
    1cd6:	4b08      	ldr	r3, [pc, #32]	; (1cf8 <cpu_irq_leave_critical+0x38>)
    1cd8:	781b      	ldrb	r3, [r3, #0]
    1cda:	b2db      	uxtb	r3, r3
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d005      	beq.n	1cec <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    1ce0:	4b06      	ldr	r3, [pc, #24]	; (1cfc <cpu_irq_leave_critical+0x3c>)
    1ce2:	2201      	movs	r2, #1
    1ce4:	701a      	strb	r2, [r3, #0]
    1ce6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1cea:	b662      	cpsie	i
	}
}
    1cec:	46c0      	nop			; (mov r8, r8)
    1cee:	46bd      	mov	sp, r7
    1cf0:	bd80      	pop	{r7, pc}
    1cf2:	46c0      	nop			; (mov r8, r8)
    1cf4:	20000038 	.word	0x20000038
    1cf8:	2000003c 	.word	0x2000003c
    1cfc:	20000008 	.word	0x20000008

00001d00 <system_gclk_gen_get_config_defaults>:
{
    1d00:	b580      	push	{r7, lr}
    1d02:	b082      	sub	sp, #8
    1d04:	af00      	add	r7, sp, #0
    1d06:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    1d08:	687b      	ldr	r3, [r7, #4]
    1d0a:	2201      	movs	r2, #1
    1d0c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    1d0e:	687b      	ldr	r3, [r7, #4]
    1d10:	2200      	movs	r2, #0
    1d12:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1d14:	687b      	ldr	r3, [r7, #4]
    1d16:	2206      	movs	r2, #6
    1d18:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    1d1a:	687b      	ldr	r3, [r7, #4]
    1d1c:	2200      	movs	r2, #0
    1d1e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    1d20:	687b      	ldr	r3, [r7, #4]
    1d22:	2200      	movs	r2, #0
    1d24:	725a      	strb	r2, [r3, #9]
}
    1d26:	46c0      	nop			; (mov r8, r8)
    1d28:	46bd      	mov	sp, r7
    1d2a:	b002      	add	sp, #8
    1d2c:	bd80      	pop	{r7, pc}

00001d2e <system_clock_source_osc8m_get_config_defaults>:
{
    1d2e:	b580      	push	{r7, lr}
    1d30:	b082      	sub	sp, #8
    1d32:	af00      	add	r7, sp, #0
    1d34:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    1d36:	687b      	ldr	r3, [r7, #4]
    1d38:	2203      	movs	r2, #3
    1d3a:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    1d3c:	687b      	ldr	r3, [r7, #4]
    1d3e:	2200      	movs	r2, #0
    1d40:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    1d42:	687b      	ldr	r3, [r7, #4]
    1d44:	2201      	movs	r2, #1
    1d46:	709a      	strb	r2, [r3, #2]
}
    1d48:	46c0      	nop			; (mov r8, r8)
    1d4a:	46bd      	mov	sp, r7
    1d4c:	b002      	add	sp, #8
    1d4e:	bd80      	pop	{r7, pc}

00001d50 <system_cpu_clock_set_divider>:
{
    1d50:	b580      	push	{r7, lr}
    1d52:	b082      	sub	sp, #8
    1d54:	af00      	add	r7, sp, #0
    1d56:	0002      	movs	r2, r0
    1d58:	1dfb      	adds	r3, r7, #7
    1d5a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    1d5c:	4a03      	ldr	r2, [pc, #12]	; (1d6c <system_cpu_clock_set_divider+0x1c>)
    1d5e:	1dfb      	adds	r3, r7, #7
    1d60:	781b      	ldrb	r3, [r3, #0]
    1d62:	7213      	strb	r3, [r2, #8]
}
    1d64:	46c0      	nop			; (mov r8, r8)
    1d66:	46bd      	mov	sp, r7
    1d68:	b002      	add	sp, #8
    1d6a:	bd80      	pop	{r7, pc}
    1d6c:	40000400 	.word	0x40000400

00001d70 <system_apb_clock_set_divider>:
{
    1d70:	b580      	push	{r7, lr}
    1d72:	b082      	sub	sp, #8
    1d74:	af00      	add	r7, sp, #0
    1d76:	0002      	movs	r2, r0
    1d78:	1dfb      	adds	r3, r7, #7
    1d7a:	701a      	strb	r2, [r3, #0]
    1d7c:	1dbb      	adds	r3, r7, #6
    1d7e:	1c0a      	adds	r2, r1, #0
    1d80:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1d82:	1dfb      	adds	r3, r7, #7
    1d84:	781b      	ldrb	r3, [r3, #0]
    1d86:	2b01      	cmp	r3, #1
    1d88:	d008      	beq.n	1d9c <system_apb_clock_set_divider+0x2c>
    1d8a:	2b02      	cmp	r3, #2
    1d8c:	d00b      	beq.n	1da6 <system_apb_clock_set_divider+0x36>
    1d8e:	2b00      	cmp	r3, #0
    1d90:	d10e      	bne.n	1db0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    1d92:	4a0b      	ldr	r2, [pc, #44]	; (1dc0 <system_apb_clock_set_divider+0x50>)
    1d94:	1dbb      	adds	r3, r7, #6
    1d96:	781b      	ldrb	r3, [r3, #0]
    1d98:	7253      	strb	r3, [r2, #9]
			break;
    1d9a:	e00b      	b.n	1db4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    1d9c:	4a08      	ldr	r2, [pc, #32]	; (1dc0 <system_apb_clock_set_divider+0x50>)
    1d9e:	1dbb      	adds	r3, r7, #6
    1da0:	781b      	ldrb	r3, [r3, #0]
    1da2:	7293      	strb	r3, [r2, #10]
			break;
    1da4:	e006      	b.n	1db4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    1da6:	4a06      	ldr	r2, [pc, #24]	; (1dc0 <system_apb_clock_set_divider+0x50>)
    1da8:	1dbb      	adds	r3, r7, #6
    1daa:	781b      	ldrb	r3, [r3, #0]
    1dac:	72d3      	strb	r3, [r2, #11]
			break;
    1dae:	e001      	b.n	1db4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    1db0:	2317      	movs	r3, #23
    1db2:	e000      	b.n	1db6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    1db4:	2300      	movs	r3, #0
}
    1db6:	0018      	movs	r0, r3
    1db8:	46bd      	mov	sp, r7
    1dba:	b002      	add	sp, #8
    1dbc:	bd80      	pop	{r7, pc}
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	40000400 	.word	0x40000400

00001dc4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1dc4:	b580      	push	{r7, lr}
    1dc6:	b082      	sub	sp, #8
    1dc8:	af00      	add	r7, sp, #0
    1dca:	0002      	movs	r2, r0
    1dcc:	1dfb      	adds	r3, r7, #7
    1dce:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1dd0:	4a08      	ldr	r2, [pc, #32]	; (1df4 <system_flash_set_waitstates+0x30>)
    1dd2:	1dfb      	adds	r3, r7, #7
    1dd4:	781b      	ldrb	r3, [r3, #0]
    1dd6:	210f      	movs	r1, #15
    1dd8:	400b      	ands	r3, r1
    1dda:	b2d9      	uxtb	r1, r3
    1ddc:	6853      	ldr	r3, [r2, #4]
    1dde:	200f      	movs	r0, #15
    1de0:	4001      	ands	r1, r0
    1de2:	0049      	lsls	r1, r1, #1
    1de4:	201e      	movs	r0, #30
    1de6:	4383      	bics	r3, r0
    1de8:	430b      	orrs	r3, r1
    1dea:	6053      	str	r3, [r2, #4]
}
    1dec:	46c0      	nop			; (mov r8, r8)
    1dee:	46bd      	mov	sp, r7
    1df0:	b002      	add	sp, #8
    1df2:	bd80      	pop	{r7, pc}
    1df4:	41004000 	.word	0x41004000

00001df8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1df8:	b580      	push	{r7, lr}
    1dfa:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1dfc:	46c0      	nop			; (mov r8, r8)
    1dfe:	4b04      	ldr	r3, [pc, #16]	; (1e10 <_system_dfll_wait_for_sync+0x18>)
    1e00:	68db      	ldr	r3, [r3, #12]
    1e02:	2210      	movs	r2, #16
    1e04:	4013      	ands	r3, r2
    1e06:	d0fa      	beq.n	1dfe <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1e08:	46c0      	nop			; (mov r8, r8)
    1e0a:	46bd      	mov	sp, r7
    1e0c:	bd80      	pop	{r7, pc}
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	40000800 	.word	0x40000800

00001e14 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    1e14:	b580      	push	{r7, lr}
    1e16:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1e18:	4a0c      	ldr	r2, [pc, #48]	; (1e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1e1a:	4b0d      	ldr	r3, [pc, #52]	; (1e50 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1e1c:	681b      	ldr	r3, [r3, #0]
    1e1e:	b29b      	uxth	r3, r3
    1e20:	2180      	movs	r1, #128	; 0x80
    1e22:	438b      	bics	r3, r1
    1e24:	b29b      	uxth	r3, r3
    1e26:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1e28:	4b0a      	ldr	r3, [pc, #40]	; (1e54 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1e2a:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1e2c:	4a07      	ldr	r2, [pc, #28]	; (1e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1e2e:	4b08      	ldr	r3, [pc, #32]	; (1e50 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1e30:	689b      	ldr	r3, [r3, #8]
    1e32:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1e34:	4a05      	ldr	r2, [pc, #20]	; (1e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1e36:	4b06      	ldr	r3, [pc, #24]	; (1e50 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1e38:	685b      	ldr	r3, [r3, #4]
    1e3a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1e3c:	4a03      	ldr	r2, [pc, #12]	; (1e4c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1e3e:	4b04      	ldr	r3, [pc, #16]	; (1e50 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1e40:	681b      	ldr	r3, [r3, #0]
    1e42:	b29b      	uxth	r3, r3
    1e44:	8493      	strh	r3, [r2, #36]	; 0x24
}
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	46bd      	mov	sp, r7
    1e4a:	bd80      	pop	{r7, pc}
    1e4c:	40000800 	.word	0x40000800
    1e50:	20000040 	.word	0x20000040
    1e54:	00001df9 	.word	0x00001df9

00001e58 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1e58:	b580      	push	{r7, lr}
    1e5a:	b082      	sub	sp, #8
    1e5c:	af00      	add	r7, sp, #0
    1e5e:	0002      	movs	r2, r0
    1e60:	1dfb      	adds	r3, r7, #7
    1e62:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1e64:	1dfb      	adds	r3, r7, #7
    1e66:	781b      	ldrb	r3, [r3, #0]
    1e68:	2b07      	cmp	r3, #7
    1e6a:	d833      	bhi.n	1ed4 <system_clock_source_get_hz+0x7c>
    1e6c:	009a      	lsls	r2, r3, #2
    1e6e:	4b1c      	ldr	r3, [pc, #112]	; (1ee0 <system_clock_source_get_hz+0x88>)
    1e70:	18d3      	adds	r3, r2, r3
    1e72:	681b      	ldr	r3, [r3, #0]
    1e74:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1e76:	4b1b      	ldr	r3, [pc, #108]	; (1ee4 <system_clock_source_get_hz+0x8c>)
    1e78:	68db      	ldr	r3, [r3, #12]
    1e7a:	e02c      	b.n	1ed6 <system_clock_source_get_hz+0x7e>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1e7c:	4b1a      	ldr	r3, [pc, #104]	; (1ee8 <system_clock_source_get_hz+0x90>)
    1e7e:	6a1b      	ldr	r3, [r3, #32]
    1e80:	059b      	lsls	r3, r3, #22
    1e82:	0f9b      	lsrs	r3, r3, #30
    1e84:	b2db      	uxtb	r3, r3
    1e86:	001a      	movs	r2, r3
    1e88:	4b18      	ldr	r3, [pc, #96]	; (1eec <system_clock_source_get_hz+0x94>)
    1e8a:	40d3      	lsrs	r3, r2
    1e8c:	e023      	b.n	1ed6 <system_clock_source_get_hz+0x7e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1e8e:	2380      	movs	r3, #128	; 0x80
    1e90:	021b      	lsls	r3, r3, #8
    1e92:	e020      	b.n	1ed6 <system_clock_source_get_hz+0x7e>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    1e94:	2380      	movs	r3, #128	; 0x80
    1e96:	021b      	lsls	r3, r3, #8
    1e98:	e01d      	b.n	1ed6 <system_clock_source_get_hz+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1e9a:	4b12      	ldr	r3, [pc, #72]	; (1ee4 <system_clock_source_get_hz+0x8c>)
    1e9c:	691b      	ldr	r3, [r3, #16]
    1e9e:	e01a      	b.n	1ed6 <system_clock_source_get_hz+0x7e>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1ea0:	4b10      	ldr	r3, [pc, #64]	; (1ee4 <system_clock_source_get_hz+0x8c>)
    1ea2:	681b      	ldr	r3, [r3, #0]
    1ea4:	2202      	movs	r2, #2
    1ea6:	4013      	ands	r3, r2
    1ea8:	d101      	bne.n	1eae <system_clock_source_get_hz+0x56>
			return 0;
    1eaa:	2300      	movs	r3, #0
    1eac:	e013      	b.n	1ed6 <system_clock_source_get_hz+0x7e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    1eae:	4b10      	ldr	r3, [pc, #64]	; (1ef0 <system_clock_source_get_hz+0x98>)
    1eb0:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1eb2:	4b0c      	ldr	r3, [pc, #48]	; (1ee4 <system_clock_source_get_hz+0x8c>)
    1eb4:	681b      	ldr	r3, [r3, #0]
    1eb6:	2204      	movs	r2, #4
    1eb8:	4013      	ands	r3, r2
    1eba:	d009      	beq.n	1ed0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1ebc:	2000      	movs	r0, #0
    1ebe:	4b0d      	ldr	r3, [pc, #52]	; (1ef4 <system_clock_source_get_hz+0x9c>)
    1ec0:	4798      	blx	r3
    1ec2:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    1ec4:	4b07      	ldr	r3, [pc, #28]	; (1ee4 <system_clock_source_get_hz+0x8c>)
    1ec6:	689b      	ldr	r3, [r3, #8]
    1ec8:	041b      	lsls	r3, r3, #16
    1eca:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1ecc:	4353      	muls	r3, r2
    1ece:	e002      	b.n	1ed6 <system_clock_source_get_hz+0x7e>
		}

		return 48000000UL;
    1ed0:	4b09      	ldr	r3, [pc, #36]	; (1ef8 <system_clock_source_get_hz+0xa0>)
    1ed2:	e000      	b.n	1ed6 <system_clock_source_get_hz+0x7e>

	default:
		return 0;
    1ed4:	2300      	movs	r3, #0
	}
}
    1ed6:	0018      	movs	r0, r3
    1ed8:	46bd      	mov	sp, r7
    1eda:	b002      	add	sp, #8
    1edc:	bd80      	pop	{r7, pc}
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	00002d5c 	.word	0x00002d5c
    1ee4:	20000040 	.word	0x20000040
    1ee8:	40000800 	.word	0x40000800
    1eec:	007a1200 	.word	0x007a1200
    1ef0:	00001df9 	.word	0x00001df9
    1ef4:	00002565 	.word	0x00002565
    1ef8:	02dc6c00 	.word	0x02dc6c00

00001efc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1efc:	b580      	push	{r7, lr}
    1efe:	b084      	sub	sp, #16
    1f00:	af00      	add	r7, sp, #0
    1f02:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1f04:	4b1a      	ldr	r3, [pc, #104]	; (1f70 <system_clock_source_osc8m_set_config+0x74>)
    1f06:	6a1b      	ldr	r3, [r3, #32]
    1f08:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1f0a:	687b      	ldr	r3, [r7, #4]
    1f0c:	781b      	ldrb	r3, [r3, #0]
    1f0e:	1c1a      	adds	r2, r3, #0
    1f10:	2303      	movs	r3, #3
    1f12:	4013      	ands	r3, r2
    1f14:	b2da      	uxtb	r2, r3
    1f16:	230d      	movs	r3, #13
    1f18:	18fb      	adds	r3, r7, r3
    1f1a:	2103      	movs	r1, #3
    1f1c:	400a      	ands	r2, r1
    1f1e:	0010      	movs	r0, r2
    1f20:	781a      	ldrb	r2, [r3, #0]
    1f22:	2103      	movs	r1, #3
    1f24:	438a      	bics	r2, r1
    1f26:	1c11      	adds	r1, r2, #0
    1f28:	1c02      	adds	r2, r0, #0
    1f2a:	430a      	orrs	r2, r1
    1f2c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1f2e:	687b      	ldr	r3, [r7, #4]
    1f30:	789a      	ldrb	r2, [r3, #2]
    1f32:	230c      	movs	r3, #12
    1f34:	18fb      	adds	r3, r7, r3
    1f36:	01d0      	lsls	r0, r2, #7
    1f38:	781a      	ldrb	r2, [r3, #0]
    1f3a:	217f      	movs	r1, #127	; 0x7f
    1f3c:	400a      	ands	r2, r1
    1f3e:	1c11      	adds	r1, r2, #0
    1f40:	1c02      	adds	r2, r0, #0
    1f42:	430a      	orrs	r2, r1
    1f44:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1f46:	687b      	ldr	r3, [r7, #4]
    1f48:	785a      	ldrb	r2, [r3, #1]
    1f4a:	230c      	movs	r3, #12
    1f4c:	18fb      	adds	r3, r7, r3
    1f4e:	2101      	movs	r1, #1
    1f50:	400a      	ands	r2, r1
    1f52:	0190      	lsls	r0, r2, #6
    1f54:	781a      	ldrb	r2, [r3, #0]
    1f56:	2140      	movs	r1, #64	; 0x40
    1f58:	438a      	bics	r2, r1
    1f5a:	1c11      	adds	r1, r2, #0
    1f5c:	1c02      	adds	r2, r0, #0
    1f5e:	430a      	orrs	r2, r1
    1f60:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    1f62:	4b03      	ldr	r3, [pc, #12]	; (1f70 <system_clock_source_osc8m_set_config+0x74>)
    1f64:	68fa      	ldr	r2, [r7, #12]
    1f66:	621a      	str	r2, [r3, #32]
}
    1f68:	46c0      	nop			; (mov r8, r8)
    1f6a:	46bd      	mov	sp, r7
    1f6c:	b004      	add	sp, #16
    1f6e:	bd80      	pop	{r7, pc}
    1f70:	40000800 	.word	0x40000800

00001f74 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1f74:	b580      	push	{r7, lr}
    1f76:	b082      	sub	sp, #8
    1f78:	af00      	add	r7, sp, #0
    1f7a:	0002      	movs	r2, r0
    1f7c:	1dfb      	adds	r3, r7, #7
    1f7e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1f80:	1dfb      	adds	r3, r7, #7
    1f82:	781b      	ldrb	r3, [r3, #0]
    1f84:	2b07      	cmp	r3, #7
    1f86:	d830      	bhi.n	1fea <system_clock_source_enable+0x76>
    1f88:	009a      	lsls	r2, r3, #2
    1f8a:	4b1b      	ldr	r3, [pc, #108]	; (1ff8 <system_clock_source_enable+0x84>)
    1f8c:	18d3      	adds	r3, r2, r3
    1f8e:	681b      	ldr	r3, [r3, #0]
    1f90:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1f92:	4b1a      	ldr	r3, [pc, #104]	; (1ffc <system_clock_source_enable+0x88>)
    1f94:	4a19      	ldr	r2, [pc, #100]	; (1ffc <system_clock_source_enable+0x88>)
    1f96:	6a12      	ldr	r2, [r2, #32]
    1f98:	2102      	movs	r1, #2
    1f9a:	430a      	orrs	r2, r1
    1f9c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1f9e:	2300      	movs	r3, #0
    1fa0:	e026      	b.n	1ff0 <system_clock_source_enable+0x7c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1fa2:	4b16      	ldr	r3, [pc, #88]	; (1ffc <system_clock_source_enable+0x88>)
    1fa4:	4a15      	ldr	r2, [pc, #84]	; (1ffc <system_clock_source_enable+0x88>)
    1fa6:	6992      	ldr	r2, [r2, #24]
    1fa8:	2102      	movs	r1, #2
    1faa:	430a      	orrs	r2, r1
    1fac:	619a      	str	r2, [r3, #24]
		break;
    1fae:	e01e      	b.n	1fee <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1fb0:	4a12      	ldr	r2, [pc, #72]	; (1ffc <system_clock_source_enable+0x88>)
    1fb2:	4b12      	ldr	r3, [pc, #72]	; (1ffc <system_clock_source_enable+0x88>)
    1fb4:	8a1b      	ldrh	r3, [r3, #16]
    1fb6:	b29b      	uxth	r3, r3
    1fb8:	2102      	movs	r1, #2
    1fba:	430b      	orrs	r3, r1
    1fbc:	b29b      	uxth	r3, r3
    1fbe:	8213      	strh	r3, [r2, #16]
		break;
    1fc0:	e015      	b.n	1fee <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1fc2:	4a0e      	ldr	r2, [pc, #56]	; (1ffc <system_clock_source_enable+0x88>)
    1fc4:	4b0d      	ldr	r3, [pc, #52]	; (1ffc <system_clock_source_enable+0x88>)
    1fc6:	8a9b      	ldrh	r3, [r3, #20]
    1fc8:	b29b      	uxth	r3, r3
    1fca:	2102      	movs	r1, #2
    1fcc:	430b      	orrs	r3, r1
    1fce:	b29b      	uxth	r3, r3
    1fd0:	8293      	strh	r3, [r2, #20]
		break;
    1fd2:	e00c      	b.n	1fee <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1fd4:	4b0a      	ldr	r3, [pc, #40]	; (2000 <system_clock_source_enable+0x8c>)
    1fd6:	681b      	ldr	r3, [r3, #0]
    1fd8:	2202      	movs	r2, #2
    1fda:	431a      	orrs	r2, r3
    1fdc:	4b08      	ldr	r3, [pc, #32]	; (2000 <system_clock_source_enable+0x8c>)
    1fde:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1fe0:	4b08      	ldr	r3, [pc, #32]	; (2004 <system_clock_source_enable+0x90>)
    1fe2:	4798      	blx	r3
		break;
    1fe4:	e003      	b.n	1fee <system_clock_source_enable+0x7a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1fe6:	2300      	movs	r3, #0
    1fe8:	e002      	b.n	1ff0 <system_clock_source_enable+0x7c>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1fea:	2317      	movs	r3, #23
    1fec:	e000      	b.n	1ff0 <system_clock_source_enable+0x7c>
	}

	return STATUS_OK;
    1fee:	2300      	movs	r3, #0
}
    1ff0:	0018      	movs	r0, r3
    1ff2:	46bd      	mov	sp, r7
    1ff4:	b002      	add	sp, #8
    1ff6:	bd80      	pop	{r7, pc}
    1ff8:	00002d7c 	.word	0x00002d7c
    1ffc:	40000800 	.word	0x40000800
    2000:	20000040 	.word	0x20000040
    2004:	00001e15 	.word	0x00001e15

00002008 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    2008:	b580      	push	{r7, lr}
    200a:	b082      	sub	sp, #8
    200c:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    200e:	003b      	movs	r3, r7
    2010:	2201      	movs	r2, #1
    2012:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2014:	2300      	movs	r3, #0
    2016:	607b      	str	r3, [r7, #4]
    2018:	e009      	b.n	202e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    201a:	687b      	ldr	r3, [r7, #4]
    201c:	b2db      	uxtb	r3, r3
    201e:	003a      	movs	r2, r7
    2020:	0011      	movs	r1, r2
    2022:	0018      	movs	r0, r3
    2024:	4b05      	ldr	r3, [pc, #20]	; (203c <_switch_peripheral_gclk+0x34>)
    2026:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2028:	687b      	ldr	r3, [r7, #4]
    202a:	3301      	adds	r3, #1
    202c:	607b      	str	r3, [r7, #4]
    202e:	687b      	ldr	r3, [r7, #4]
    2030:	2b1b      	cmp	r3, #27
    2032:	d9f2      	bls.n	201a <_switch_peripheral_gclk+0x12>
	}
}
    2034:	46c0      	nop			; (mov r8, r8)
    2036:	46bd      	mov	sp, r7
    2038:	b002      	add	sp, #8
    203a:	bd80      	pop	{r7, pc}
    203c:	00002441 	.word	0x00002441

00002040 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2040:	b580      	push	{r7, lr}
    2042:	b09c      	sub	sp, #112	; 0x70
    2044:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2046:	4b27      	ldr	r3, [pc, #156]	; (20e4 <system_clock_init+0xa4>)
    2048:	22c2      	movs	r2, #194	; 0xc2
    204a:	00d2      	lsls	r2, r2, #3
    204c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    204e:	2000      	movs	r0, #0
    2050:	4b25      	ldr	r3, [pc, #148]	; (20e8 <system_clock_init+0xa8>)
    2052:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    2054:	4b25      	ldr	r3, [pc, #148]	; (20ec <system_clock_init+0xac>)
    2056:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    2058:	236c      	movs	r3, #108	; 0x6c
    205a:	18fb      	adds	r3, r7, r3
    205c:	0018      	movs	r0, r3
    205e:	4b24      	ldr	r3, [pc, #144]	; (20f0 <system_clock_init+0xb0>)
    2060:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2062:	236c      	movs	r3, #108	; 0x6c
    2064:	18fb      	adds	r3, r7, r3
    2066:	2200      	movs	r2, #0
    2068:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    206a:	236c      	movs	r3, #108	; 0x6c
    206c:	18fb      	adds	r3, r7, r3
    206e:	2201      	movs	r2, #1
    2070:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    2072:	236c      	movs	r3, #108	; 0x6c
    2074:	18fb      	adds	r3, r7, r3
    2076:	2200      	movs	r2, #0
    2078:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    207a:	236c      	movs	r3, #108	; 0x6c
    207c:	18fb      	adds	r3, r7, r3
    207e:	0018      	movs	r0, r3
    2080:	4b1c      	ldr	r3, [pc, #112]	; (20f4 <system_clock_init+0xb4>)
    2082:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2084:	2006      	movs	r0, #6
    2086:	4b1c      	ldr	r3, [pc, #112]	; (20f8 <system_clock_init+0xb8>)
    2088:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    208a:	4b1c      	ldr	r3, [pc, #112]	; (20fc <system_clock_init+0xbc>)
    208c:	4798      	blx	r3
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
	}
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    208e:	2000      	movs	r0, #0
    2090:	4b1b      	ldr	r3, [pc, #108]	; (2100 <system_clock_init+0xc0>)
    2092:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    2094:	2100      	movs	r1, #0
    2096:	2000      	movs	r0, #0
    2098:	4b1a      	ldr	r3, [pc, #104]	; (2104 <system_clock_init+0xc4>)
    209a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    209c:	2100      	movs	r1, #0
    209e:	2001      	movs	r0, #1
    20a0:	4b18      	ldr	r3, [pc, #96]	; (2104 <system_clock_init+0xc4>)
    20a2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    20a4:	2100      	movs	r1, #0
    20a6:	2002      	movs	r0, #2
    20a8:	4b16      	ldr	r3, [pc, #88]	; (2104 <system_clock_init+0xc4>)
    20aa:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    20ac:	003b      	movs	r3, r7
    20ae:	0018      	movs	r0, r3
    20b0:	4b15      	ldr	r3, [pc, #84]	; (2108 <system_clock_init+0xc8>)
    20b2:	4798      	blx	r3
    20b4:	003b      	movs	r3, r7
    20b6:	2206      	movs	r2, #6
    20b8:	701a      	strb	r2, [r3, #0]
    20ba:	003b      	movs	r3, r7
    20bc:	2201      	movs	r2, #1
    20be:	605a      	str	r2, [r3, #4]
    20c0:	003b      	movs	r3, r7
    20c2:	2200      	movs	r2, #0
    20c4:	721a      	strb	r2, [r3, #8]
    20c6:	003b      	movs	r3, r7
    20c8:	2200      	movs	r2, #0
    20ca:	725a      	strb	r2, [r3, #9]
    20cc:	003b      	movs	r3, r7
    20ce:	0019      	movs	r1, r3
    20d0:	2000      	movs	r0, #0
    20d2:	4b0e      	ldr	r3, [pc, #56]	; (210c <system_clock_init+0xcc>)
    20d4:	4798      	blx	r3
    20d6:	2000      	movs	r0, #0
    20d8:	4b0d      	ldr	r3, [pc, #52]	; (2110 <system_clock_init+0xd0>)
    20da:	4798      	blx	r3
#endif
}
    20dc:	46c0      	nop			; (mov r8, r8)
    20de:	46bd      	mov	sp, r7
    20e0:	b01c      	add	sp, #112	; 0x70
    20e2:	bd80      	pop	{r7, pc}
    20e4:	40000800 	.word	0x40000800
    20e8:	00001dc5 	.word	0x00001dc5
    20ec:	00002009 	.word	0x00002009
    20f0:	00001d2f 	.word	0x00001d2f
    20f4:	00001efd 	.word	0x00001efd
    20f8:	00001f75 	.word	0x00001f75
    20fc:	000021b9 	.word	0x000021b9
    2100:	00001d51 	.word	0x00001d51
    2104:	00001d71 	.word	0x00001d71
    2108:	00001d01 	.word	0x00001d01
    210c:	000021e9 	.word	0x000021e9
    2110:	0000230d 	.word	0x0000230d

00002114 <system_apb_clock_set_mask>:
{
    2114:	b580      	push	{r7, lr}
    2116:	b082      	sub	sp, #8
    2118:	af00      	add	r7, sp, #0
    211a:	0002      	movs	r2, r0
    211c:	6039      	str	r1, [r7, #0]
    211e:	1dfb      	adds	r3, r7, #7
    2120:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2122:	1dfb      	adds	r3, r7, #7
    2124:	781b      	ldrb	r3, [r3, #0]
    2126:	2b01      	cmp	r3, #1
    2128:	d00a      	beq.n	2140 <system_apb_clock_set_mask+0x2c>
    212a:	2b02      	cmp	r3, #2
    212c:	d00f      	beq.n	214e <system_apb_clock_set_mask+0x3a>
    212e:	2b00      	cmp	r3, #0
    2130:	d114      	bne.n	215c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    2132:	4b0e      	ldr	r3, [pc, #56]	; (216c <system_apb_clock_set_mask+0x58>)
    2134:	4a0d      	ldr	r2, [pc, #52]	; (216c <system_apb_clock_set_mask+0x58>)
    2136:	6991      	ldr	r1, [r2, #24]
    2138:	683a      	ldr	r2, [r7, #0]
    213a:	430a      	orrs	r2, r1
    213c:	619a      	str	r2, [r3, #24]
			break;
    213e:	e00f      	b.n	2160 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2140:	4b0a      	ldr	r3, [pc, #40]	; (216c <system_apb_clock_set_mask+0x58>)
    2142:	4a0a      	ldr	r2, [pc, #40]	; (216c <system_apb_clock_set_mask+0x58>)
    2144:	69d1      	ldr	r1, [r2, #28]
    2146:	683a      	ldr	r2, [r7, #0]
    2148:	430a      	orrs	r2, r1
    214a:	61da      	str	r2, [r3, #28]
			break;
    214c:	e008      	b.n	2160 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    214e:	4b07      	ldr	r3, [pc, #28]	; (216c <system_apb_clock_set_mask+0x58>)
    2150:	4a06      	ldr	r2, [pc, #24]	; (216c <system_apb_clock_set_mask+0x58>)
    2152:	6a11      	ldr	r1, [r2, #32]
    2154:	683a      	ldr	r2, [r7, #0]
    2156:	430a      	orrs	r2, r1
    2158:	621a      	str	r2, [r3, #32]
			break;
    215a:	e001      	b.n	2160 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    215c:	2317      	movs	r3, #23
    215e:	e000      	b.n	2162 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2160:	2300      	movs	r3, #0
}
    2162:	0018      	movs	r0, r3
    2164:	46bd      	mov	sp, r7
    2166:	b002      	add	sp, #8
    2168:	bd80      	pop	{r7, pc}
    216a:	46c0      	nop			; (mov r8, r8)
    216c:	40000400 	.word	0x40000400

00002170 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    2170:	b580      	push	{r7, lr}
    2172:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2174:	4b02      	ldr	r3, [pc, #8]	; (2180 <system_interrupt_enter_critical_section+0x10>)
    2176:	4798      	blx	r3
}
    2178:	46c0      	nop			; (mov r8, r8)
    217a:	46bd      	mov	sp, r7
    217c:	bd80      	pop	{r7, pc}
    217e:	46c0      	nop			; (mov r8, r8)
    2180:	00001c6d 	.word	0x00001c6d

00002184 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    2184:	b580      	push	{r7, lr}
    2186:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2188:	4b02      	ldr	r3, [pc, #8]	; (2194 <system_interrupt_leave_critical_section+0x10>)
    218a:	4798      	blx	r3
}
    218c:	46c0      	nop			; (mov r8, r8)
    218e:	46bd      	mov	sp, r7
    2190:	bd80      	pop	{r7, pc}
    2192:	46c0      	nop			; (mov r8, r8)
    2194:	00001cc1 	.word	0x00001cc1

00002198 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    2198:	b580      	push	{r7, lr}
    219a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    219c:	4b05      	ldr	r3, [pc, #20]	; (21b4 <system_gclk_is_syncing+0x1c>)
    219e:	785b      	ldrb	r3, [r3, #1]
    21a0:	b2db      	uxtb	r3, r3
    21a2:	b25b      	sxtb	r3, r3
    21a4:	2b00      	cmp	r3, #0
    21a6:	da01      	bge.n	21ac <system_gclk_is_syncing+0x14>
		return true;
    21a8:	2301      	movs	r3, #1
    21aa:	e000      	b.n	21ae <system_gclk_is_syncing+0x16>
	}

	return false;
    21ac:	2300      	movs	r3, #0
}
    21ae:	0018      	movs	r0, r3
    21b0:	46bd      	mov	sp, r7
    21b2:	bd80      	pop	{r7, pc}
    21b4:	40000c00 	.word	0x40000c00

000021b8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    21b8:	b580      	push	{r7, lr}
    21ba:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    21bc:	2108      	movs	r1, #8
    21be:	2000      	movs	r0, #0
    21c0:	4b07      	ldr	r3, [pc, #28]	; (21e0 <system_gclk_init+0x28>)
    21c2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    21c4:	4b07      	ldr	r3, [pc, #28]	; (21e4 <system_gclk_init+0x2c>)
    21c6:	2201      	movs	r2, #1
    21c8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	4b05      	ldr	r3, [pc, #20]	; (21e4 <system_gclk_init+0x2c>)
    21ce:	781b      	ldrb	r3, [r3, #0]
    21d0:	b2db      	uxtb	r3, r3
    21d2:	001a      	movs	r2, r3
    21d4:	2301      	movs	r3, #1
    21d6:	4013      	ands	r3, r2
    21d8:	d1f8      	bne.n	21cc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	46bd      	mov	sp, r7
    21de:	bd80      	pop	{r7, pc}
    21e0:	00002115 	.word	0x00002115
    21e4:	40000c00 	.word	0x40000c00

000021e8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    21e8:	b580      	push	{r7, lr}
    21ea:	b086      	sub	sp, #24
    21ec:	af00      	add	r7, sp, #0
    21ee:	0002      	movs	r2, r0
    21f0:	6039      	str	r1, [r7, #0]
    21f2:	1dfb      	adds	r3, r7, #7
    21f4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    21f6:	1dfb      	adds	r3, r7, #7
    21f8:	781b      	ldrb	r3, [r3, #0]
    21fa:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    21fc:	1dfb      	adds	r3, r7, #7
    21fe:	781b      	ldrb	r3, [r3, #0]
    2200:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2202:	683b      	ldr	r3, [r7, #0]
    2204:	781b      	ldrb	r3, [r3, #0]
    2206:	021b      	lsls	r3, r3, #8
    2208:	001a      	movs	r2, r3
    220a:	697b      	ldr	r3, [r7, #20]
    220c:	4313      	orrs	r3, r2
    220e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2210:	683b      	ldr	r3, [r7, #0]
    2212:	785b      	ldrb	r3, [r3, #1]
    2214:	2b00      	cmp	r3, #0
    2216:	d004      	beq.n	2222 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2218:	697b      	ldr	r3, [r7, #20]
    221a:	2280      	movs	r2, #128	; 0x80
    221c:	02d2      	lsls	r2, r2, #11
    221e:	4313      	orrs	r3, r2
    2220:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2222:	683b      	ldr	r3, [r7, #0]
    2224:	7a5b      	ldrb	r3, [r3, #9]
    2226:	2b00      	cmp	r3, #0
    2228:	d004      	beq.n	2234 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    222a:	697b      	ldr	r3, [r7, #20]
    222c:	2280      	movs	r2, #128	; 0x80
    222e:	0312      	lsls	r2, r2, #12
    2230:	4313      	orrs	r3, r2
    2232:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2234:	683b      	ldr	r3, [r7, #0]
    2236:	685b      	ldr	r3, [r3, #4]
    2238:	2b01      	cmp	r3, #1
    223a:	d92c      	bls.n	2296 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    223c:	683b      	ldr	r3, [r7, #0]
    223e:	685a      	ldr	r2, [r3, #4]
    2240:	683b      	ldr	r3, [r7, #0]
    2242:	685b      	ldr	r3, [r3, #4]
    2244:	3b01      	subs	r3, #1
    2246:	4013      	ands	r3, r2
    2248:	d11a      	bne.n	2280 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    224a:	2300      	movs	r3, #0
    224c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    224e:	2302      	movs	r3, #2
    2250:	60bb      	str	r3, [r7, #8]
    2252:	e005      	b.n	2260 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    2254:	68fb      	ldr	r3, [r7, #12]
    2256:	3301      	adds	r3, #1
    2258:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    225a:	68bb      	ldr	r3, [r7, #8]
    225c:	005b      	lsls	r3, r3, #1
    225e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    2260:	683b      	ldr	r3, [r7, #0]
    2262:	685a      	ldr	r2, [r3, #4]
    2264:	68bb      	ldr	r3, [r7, #8]
    2266:	429a      	cmp	r2, r3
    2268:	d8f4      	bhi.n	2254 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    226a:	68fb      	ldr	r3, [r7, #12]
    226c:	021b      	lsls	r3, r3, #8
    226e:	693a      	ldr	r2, [r7, #16]
    2270:	4313      	orrs	r3, r2
    2272:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2274:	697b      	ldr	r3, [r7, #20]
    2276:	2280      	movs	r2, #128	; 0x80
    2278:	0352      	lsls	r2, r2, #13
    227a:	4313      	orrs	r3, r2
    227c:	617b      	str	r3, [r7, #20]
    227e:	e00a      	b.n	2296 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2280:	683b      	ldr	r3, [r7, #0]
    2282:	685b      	ldr	r3, [r3, #4]
    2284:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    2286:	693a      	ldr	r2, [r7, #16]
    2288:	4313      	orrs	r3, r2
    228a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    228c:	697b      	ldr	r3, [r7, #20]
    228e:	2280      	movs	r2, #128	; 0x80
    2290:	0292      	lsls	r2, r2, #10
    2292:	4313      	orrs	r3, r2
    2294:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2296:	683b      	ldr	r3, [r7, #0]
    2298:	7a1b      	ldrb	r3, [r3, #8]
    229a:	2b00      	cmp	r3, #0
    229c:	d004      	beq.n	22a8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    229e:	697b      	ldr	r3, [r7, #20]
    22a0:	2280      	movs	r2, #128	; 0x80
    22a2:	0392      	lsls	r2, r2, #14
    22a4:	4313      	orrs	r3, r2
    22a6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    22a8:	46c0      	nop			; (mov r8, r8)
    22aa:	4b13      	ldr	r3, [pc, #76]	; (22f8 <system_gclk_gen_set_config+0x110>)
    22ac:	4798      	blx	r3
    22ae:	1e03      	subs	r3, r0, #0
    22b0:	d1fb      	bne.n	22aa <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    22b2:	4b12      	ldr	r3, [pc, #72]	; (22fc <system_gclk_gen_set_config+0x114>)
    22b4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    22b6:	4a12      	ldr	r2, [pc, #72]	; (2300 <system_gclk_gen_set_config+0x118>)
    22b8:	1dfb      	adds	r3, r7, #7
    22ba:	781b      	ldrb	r3, [r3, #0]
    22bc:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	4b0d      	ldr	r3, [pc, #52]	; (22f8 <system_gclk_gen_set_config+0x110>)
    22c2:	4798      	blx	r3
    22c4:	1e03      	subs	r3, r0, #0
    22c6:	d1fb      	bne.n	22c0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    22c8:	4b0e      	ldr	r3, [pc, #56]	; (2304 <system_gclk_gen_set_config+0x11c>)
    22ca:	693a      	ldr	r2, [r7, #16]
    22cc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	4b09      	ldr	r3, [pc, #36]	; (22f8 <system_gclk_gen_set_config+0x110>)
    22d2:	4798      	blx	r3
    22d4:	1e03      	subs	r3, r0, #0
    22d6:	d1fb      	bne.n	22d0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    22d8:	4b0a      	ldr	r3, [pc, #40]	; (2304 <system_gclk_gen_set_config+0x11c>)
    22da:	4a0a      	ldr	r2, [pc, #40]	; (2304 <system_gclk_gen_set_config+0x11c>)
    22dc:	6851      	ldr	r1, [r2, #4]
    22de:	2280      	movs	r2, #128	; 0x80
    22e0:	0252      	lsls	r2, r2, #9
    22e2:	4011      	ands	r1, r2
    22e4:	697a      	ldr	r2, [r7, #20]
    22e6:	430a      	orrs	r2, r1
    22e8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    22ea:	4b07      	ldr	r3, [pc, #28]	; (2308 <system_gclk_gen_set_config+0x120>)
    22ec:	4798      	blx	r3
}
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	46bd      	mov	sp, r7
    22f2:	b006      	add	sp, #24
    22f4:	bd80      	pop	{r7, pc}
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	00002199 	.word	0x00002199
    22fc:	00002171 	.word	0x00002171
    2300:	40000c08 	.word	0x40000c08
    2304:	40000c00 	.word	0x40000c00
    2308:	00002185 	.word	0x00002185

0000230c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    230c:	b580      	push	{r7, lr}
    230e:	b082      	sub	sp, #8
    2310:	af00      	add	r7, sp, #0
    2312:	0002      	movs	r2, r0
    2314:	1dfb      	adds	r3, r7, #7
    2316:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2318:	46c0      	nop			; (mov r8, r8)
    231a:	4b0e      	ldr	r3, [pc, #56]	; (2354 <system_gclk_gen_enable+0x48>)
    231c:	4798      	blx	r3
    231e:	1e03      	subs	r3, r0, #0
    2320:	d1fb      	bne.n	231a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2322:	4b0d      	ldr	r3, [pc, #52]	; (2358 <system_gclk_gen_enable+0x4c>)
    2324:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2326:	4a0d      	ldr	r2, [pc, #52]	; (235c <system_gclk_gen_enable+0x50>)
    2328:	1dfb      	adds	r3, r7, #7
    232a:	781b      	ldrb	r3, [r3, #0]
    232c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	4b08      	ldr	r3, [pc, #32]	; (2354 <system_gclk_gen_enable+0x48>)
    2332:	4798      	blx	r3
    2334:	1e03      	subs	r3, r0, #0
    2336:	d1fb      	bne.n	2330 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2338:	4b09      	ldr	r3, [pc, #36]	; (2360 <system_gclk_gen_enable+0x54>)
    233a:	4a09      	ldr	r2, [pc, #36]	; (2360 <system_gclk_gen_enable+0x54>)
    233c:	6852      	ldr	r2, [r2, #4]
    233e:	2180      	movs	r1, #128	; 0x80
    2340:	0249      	lsls	r1, r1, #9
    2342:	430a      	orrs	r2, r1
    2344:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    2346:	4b07      	ldr	r3, [pc, #28]	; (2364 <system_gclk_gen_enable+0x58>)
    2348:	4798      	blx	r3
}
    234a:	46c0      	nop			; (mov r8, r8)
    234c:	46bd      	mov	sp, r7
    234e:	b002      	add	sp, #8
    2350:	bd80      	pop	{r7, pc}
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	00002199 	.word	0x00002199
    2358:	00002171 	.word	0x00002171
    235c:	40000c04 	.word	0x40000c04
    2360:	40000c00 	.word	0x40000c00
    2364:	00002185 	.word	0x00002185

00002368 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2368:	b580      	push	{r7, lr}
    236a:	b086      	sub	sp, #24
    236c:	af00      	add	r7, sp, #0
    236e:	0002      	movs	r2, r0
    2370:	1dfb      	adds	r3, r7, #7
    2372:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2374:	46c0      	nop			; (mov r8, r8)
    2376:	4b2a      	ldr	r3, [pc, #168]	; (2420 <system_gclk_gen_get_hz+0xb8>)
    2378:	4798      	blx	r3
    237a:	1e03      	subs	r3, r0, #0
    237c:	d1fb      	bne.n	2376 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    237e:	4b29      	ldr	r3, [pc, #164]	; (2424 <system_gclk_gen_get_hz+0xbc>)
    2380:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2382:	4a29      	ldr	r2, [pc, #164]	; (2428 <system_gclk_gen_get_hz+0xc0>)
    2384:	1dfb      	adds	r3, r7, #7
    2386:	781b      	ldrb	r3, [r3, #0]
    2388:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    238a:	46c0      	nop			; (mov r8, r8)
    238c:	4b24      	ldr	r3, [pc, #144]	; (2420 <system_gclk_gen_get_hz+0xb8>)
    238e:	4798      	blx	r3
    2390:	1e03      	subs	r3, r0, #0
    2392:	d1fb      	bne.n	238c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2394:	4b25      	ldr	r3, [pc, #148]	; (242c <system_gclk_gen_get_hz+0xc4>)
    2396:	685b      	ldr	r3, [r3, #4]
    2398:	04db      	lsls	r3, r3, #19
    239a:	0edb      	lsrs	r3, r3, #27
    239c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    239e:	0018      	movs	r0, r3
    23a0:	4b23      	ldr	r3, [pc, #140]	; (2430 <system_gclk_gen_get_hz+0xc8>)
    23a2:	4798      	blx	r3
    23a4:	0003      	movs	r3, r0
    23a6:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    23a8:	4a1f      	ldr	r2, [pc, #124]	; (2428 <system_gclk_gen_get_hz+0xc0>)
    23aa:	1dfb      	adds	r3, r7, #7
    23ac:	781b      	ldrb	r3, [r3, #0]
    23ae:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    23b0:	4b1e      	ldr	r3, [pc, #120]	; (242c <system_gclk_gen_get_hz+0xc4>)
    23b2:	685b      	ldr	r3, [r3, #4]
    23b4:	02db      	lsls	r3, r3, #11
    23b6:	0fdb      	lsrs	r3, r3, #31
    23b8:	b2da      	uxtb	r2, r3
    23ba:	2313      	movs	r3, #19
    23bc:	18fb      	adds	r3, r7, r3
    23be:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    23c0:	4a1c      	ldr	r2, [pc, #112]	; (2434 <system_gclk_gen_get_hz+0xcc>)
    23c2:	1dfb      	adds	r3, r7, #7
    23c4:	781b      	ldrb	r3, [r3, #0]
    23c6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    23c8:	46c0      	nop			; (mov r8, r8)
    23ca:	4b15      	ldr	r3, [pc, #84]	; (2420 <system_gclk_gen_get_hz+0xb8>)
    23cc:	4798      	blx	r3
    23ce:	1e03      	subs	r3, r0, #0
    23d0:	d1fb      	bne.n	23ca <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    23d2:	4b16      	ldr	r3, [pc, #88]	; (242c <system_gclk_gen_get_hz+0xc4>)
    23d4:	689b      	ldr	r3, [r3, #8]
    23d6:	021b      	lsls	r3, r3, #8
    23d8:	0c1b      	lsrs	r3, r3, #16
    23da:	b29b      	uxth	r3, r3
    23dc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    23de:	4b16      	ldr	r3, [pc, #88]	; (2438 <system_gclk_gen_get_hz+0xd0>)
    23e0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    23e2:	2313      	movs	r3, #19
    23e4:	18fb      	adds	r3, r7, r3
    23e6:	781b      	ldrb	r3, [r3, #0]
    23e8:	2b00      	cmp	r3, #0
    23ea:	d109      	bne.n	2400 <system_gclk_gen_get_hz+0x98>
    23ec:	68fb      	ldr	r3, [r7, #12]
    23ee:	2b01      	cmp	r3, #1
    23f0:	d906      	bls.n	2400 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    23f2:	4b12      	ldr	r3, [pc, #72]	; (243c <system_gclk_gen_get_hz+0xd4>)
    23f4:	68f9      	ldr	r1, [r7, #12]
    23f6:	6978      	ldr	r0, [r7, #20]
    23f8:	4798      	blx	r3
    23fa:	0003      	movs	r3, r0
    23fc:	617b      	str	r3, [r7, #20]
    23fe:	e00a      	b.n	2416 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    2400:	2313      	movs	r3, #19
    2402:	18fb      	adds	r3, r7, r3
    2404:	781b      	ldrb	r3, [r3, #0]
    2406:	2b00      	cmp	r3, #0
    2408:	d005      	beq.n	2416 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    240a:	68fb      	ldr	r3, [r7, #12]
    240c:	3301      	adds	r3, #1
    240e:	697a      	ldr	r2, [r7, #20]
    2410:	40da      	lsrs	r2, r3
    2412:	0013      	movs	r3, r2
    2414:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    2416:	697b      	ldr	r3, [r7, #20]
}
    2418:	0018      	movs	r0, r3
    241a:	46bd      	mov	sp, r7
    241c:	b006      	add	sp, #24
    241e:	bd80      	pop	{r7, pc}
    2420:	00002199 	.word	0x00002199
    2424:	00002171 	.word	0x00002171
    2428:	40000c04 	.word	0x40000c04
    242c:	40000c00 	.word	0x40000c00
    2430:	00001e59 	.word	0x00001e59
    2434:	40000c08 	.word	0x40000c08
    2438:	00002185 	.word	0x00002185
    243c:	00002a01 	.word	0x00002a01

00002440 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2440:	b580      	push	{r7, lr}
    2442:	b084      	sub	sp, #16
    2444:	af00      	add	r7, sp, #0
    2446:	0002      	movs	r2, r0
    2448:	6039      	str	r1, [r7, #0]
    244a:	1dfb      	adds	r3, r7, #7
    244c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    244e:	1dfb      	adds	r3, r7, #7
    2450:	781b      	ldrb	r3, [r3, #0]
    2452:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2454:	683b      	ldr	r3, [r7, #0]
    2456:	781b      	ldrb	r3, [r3, #0]
    2458:	021b      	lsls	r3, r3, #8
    245a:	001a      	movs	r2, r3
    245c:	68fb      	ldr	r3, [r7, #12]
    245e:	4313      	orrs	r3, r2
    2460:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2462:	1dfb      	adds	r3, r7, #7
    2464:	781b      	ldrb	r3, [r3, #0]
    2466:	0018      	movs	r0, r3
    2468:	4b04      	ldr	r3, [pc, #16]	; (247c <system_gclk_chan_set_config+0x3c>)
    246a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    246c:	4b04      	ldr	r3, [pc, #16]	; (2480 <system_gclk_chan_set_config+0x40>)
    246e:	68fa      	ldr	r2, [r7, #12]
    2470:	b292      	uxth	r2, r2
    2472:	805a      	strh	r2, [r3, #2]
}
    2474:	46c0      	nop			; (mov r8, r8)
    2476:	46bd      	mov	sp, r7
    2478:	b004      	add	sp, #16
    247a:	bd80      	pop	{r7, pc}
    247c:	000024cd 	.word	0x000024cd
    2480:	40000c00 	.word	0x40000c00

00002484 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2484:	b580      	push	{r7, lr}
    2486:	b082      	sub	sp, #8
    2488:	af00      	add	r7, sp, #0
    248a:	0002      	movs	r2, r0
    248c:	1dfb      	adds	r3, r7, #7
    248e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2490:	4b0a      	ldr	r3, [pc, #40]	; (24bc <system_gclk_chan_enable+0x38>)
    2492:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2494:	4a0a      	ldr	r2, [pc, #40]	; (24c0 <system_gclk_chan_enable+0x3c>)
    2496:	1dfb      	adds	r3, r7, #7
    2498:	781b      	ldrb	r3, [r3, #0]
    249a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    249c:	4909      	ldr	r1, [pc, #36]	; (24c4 <system_gclk_chan_enable+0x40>)
    249e:	4b09      	ldr	r3, [pc, #36]	; (24c4 <system_gclk_chan_enable+0x40>)
    24a0:	885b      	ldrh	r3, [r3, #2]
    24a2:	b29b      	uxth	r3, r3
    24a4:	2280      	movs	r2, #128	; 0x80
    24a6:	01d2      	lsls	r2, r2, #7
    24a8:	4313      	orrs	r3, r2
    24aa:	b29b      	uxth	r3, r3
    24ac:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    24ae:	4b06      	ldr	r3, [pc, #24]	; (24c8 <system_gclk_chan_enable+0x44>)
    24b0:	4798      	blx	r3
}
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	46bd      	mov	sp, r7
    24b6:	b002      	add	sp, #8
    24b8:	bd80      	pop	{r7, pc}
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	00002171 	.word	0x00002171
    24c0:	40000c02 	.word	0x40000c02
    24c4:	40000c00 	.word	0x40000c00
    24c8:	00002185 	.word	0x00002185

000024cc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    24cc:	b580      	push	{r7, lr}
    24ce:	b084      	sub	sp, #16
    24d0:	af00      	add	r7, sp, #0
    24d2:	0002      	movs	r2, r0
    24d4:	1dfb      	adds	r3, r7, #7
    24d6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    24d8:	4b1c      	ldr	r3, [pc, #112]	; (254c <system_gclk_chan_disable+0x80>)
    24da:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    24dc:	4a1c      	ldr	r2, [pc, #112]	; (2550 <system_gclk_chan_disable+0x84>)
    24de:	1dfb      	adds	r3, r7, #7
    24e0:	781b      	ldrb	r3, [r3, #0]
    24e2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    24e4:	4b1b      	ldr	r3, [pc, #108]	; (2554 <system_gclk_chan_disable+0x88>)
    24e6:	885b      	ldrh	r3, [r3, #2]
    24e8:	051b      	lsls	r3, r3, #20
    24ea:	0f1b      	lsrs	r3, r3, #28
    24ec:	b2db      	uxtb	r3, r3
    24ee:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    24f0:	4a18      	ldr	r2, [pc, #96]	; (2554 <system_gclk_chan_disable+0x88>)
    24f2:	8853      	ldrh	r3, [r2, #2]
    24f4:	4918      	ldr	r1, [pc, #96]	; (2558 <system_gclk_chan_disable+0x8c>)
    24f6:	400b      	ands	r3, r1
    24f8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    24fa:	4a16      	ldr	r2, [pc, #88]	; (2554 <system_gclk_chan_disable+0x88>)
    24fc:	4b15      	ldr	r3, [pc, #84]	; (2554 <system_gclk_chan_disable+0x88>)
    24fe:	885b      	ldrh	r3, [r3, #2]
    2500:	b29b      	uxth	r3, r3
    2502:	4916      	ldr	r1, [pc, #88]	; (255c <system_gclk_chan_disable+0x90>)
    2504:	400b      	ands	r3, r1
    2506:	b29b      	uxth	r3, r3
    2508:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	4b11      	ldr	r3, [pc, #68]	; (2554 <system_gclk_chan_disable+0x88>)
    250e:	885b      	ldrh	r3, [r3, #2]
    2510:	b29b      	uxth	r3, r3
    2512:	001a      	movs	r2, r3
    2514:	2380      	movs	r3, #128	; 0x80
    2516:	01db      	lsls	r3, r3, #7
    2518:	4013      	ands	r3, r2
    251a:	d1f7      	bne.n	250c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    251c:	4a0d      	ldr	r2, [pc, #52]	; (2554 <system_gclk_chan_disable+0x88>)
    251e:	68fb      	ldr	r3, [r7, #12]
    2520:	b2db      	uxtb	r3, r3
    2522:	1c19      	adds	r1, r3, #0
    2524:	230f      	movs	r3, #15
    2526:	400b      	ands	r3, r1
    2528:	b2d9      	uxtb	r1, r3
    252a:	8853      	ldrh	r3, [r2, #2]
    252c:	1c08      	adds	r0, r1, #0
    252e:	210f      	movs	r1, #15
    2530:	4001      	ands	r1, r0
    2532:	0208      	lsls	r0, r1, #8
    2534:	4908      	ldr	r1, [pc, #32]	; (2558 <system_gclk_chan_disable+0x8c>)
    2536:	400b      	ands	r3, r1
    2538:	1c19      	adds	r1, r3, #0
    253a:	1c03      	adds	r3, r0, #0
    253c:	430b      	orrs	r3, r1
    253e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    2540:	4b07      	ldr	r3, [pc, #28]	; (2560 <system_gclk_chan_disable+0x94>)
    2542:	4798      	blx	r3
}
    2544:	46c0      	nop			; (mov r8, r8)
    2546:	46bd      	mov	sp, r7
    2548:	b004      	add	sp, #16
    254a:	bd80      	pop	{r7, pc}
    254c:	00002171 	.word	0x00002171
    2550:	40000c02 	.word	0x40000c02
    2554:	40000c00 	.word	0x40000c00
    2558:	fffff0ff 	.word	0xfffff0ff
    255c:	ffffbfff 	.word	0xffffbfff
    2560:	00002185 	.word	0x00002185

00002564 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2564:	b580      	push	{r7, lr}
    2566:	b084      	sub	sp, #16
    2568:	af00      	add	r7, sp, #0
    256a:	0002      	movs	r2, r0
    256c:	1dfb      	adds	r3, r7, #7
    256e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    2570:	4b0d      	ldr	r3, [pc, #52]	; (25a8 <system_gclk_chan_get_hz+0x44>)
    2572:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2574:	4a0d      	ldr	r2, [pc, #52]	; (25ac <system_gclk_chan_get_hz+0x48>)
    2576:	1dfb      	adds	r3, r7, #7
    2578:	781b      	ldrb	r3, [r3, #0]
    257a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    257c:	4b0c      	ldr	r3, [pc, #48]	; (25b0 <system_gclk_chan_get_hz+0x4c>)
    257e:	885b      	ldrh	r3, [r3, #2]
    2580:	051b      	lsls	r3, r3, #20
    2582:	0f1b      	lsrs	r3, r3, #28
    2584:	b2da      	uxtb	r2, r3
    2586:	230f      	movs	r3, #15
    2588:	18fb      	adds	r3, r7, r3
    258a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    258c:	4b09      	ldr	r3, [pc, #36]	; (25b4 <system_gclk_chan_get_hz+0x50>)
    258e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2590:	230f      	movs	r3, #15
    2592:	18fb      	adds	r3, r7, r3
    2594:	781b      	ldrb	r3, [r3, #0]
    2596:	0018      	movs	r0, r3
    2598:	4b07      	ldr	r3, [pc, #28]	; (25b8 <system_gclk_chan_get_hz+0x54>)
    259a:	4798      	blx	r3
    259c:	0003      	movs	r3, r0
}
    259e:	0018      	movs	r0, r3
    25a0:	46bd      	mov	sp, r7
    25a2:	b004      	add	sp, #16
    25a4:	bd80      	pop	{r7, pc}
    25a6:	46c0      	nop			; (mov r8, r8)
    25a8:	00002171 	.word	0x00002171
    25ac:	40000c02 	.word	0x40000c02
    25b0:	40000c00 	.word	0x40000c00
    25b4:	00002185 	.word	0x00002185
    25b8:	00002369 	.word	0x00002369

000025bc <system_pinmux_get_group_from_gpio_pin>:
{
    25bc:	b580      	push	{r7, lr}
    25be:	b084      	sub	sp, #16
    25c0:	af00      	add	r7, sp, #0
    25c2:	0002      	movs	r2, r0
    25c4:	1dfb      	adds	r3, r7, #7
    25c6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    25c8:	230f      	movs	r3, #15
    25ca:	18fb      	adds	r3, r7, r3
    25cc:	1dfa      	adds	r2, r7, #7
    25ce:	7812      	ldrb	r2, [r2, #0]
    25d0:	09d2      	lsrs	r2, r2, #7
    25d2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    25d4:	230e      	movs	r3, #14
    25d6:	18fb      	adds	r3, r7, r3
    25d8:	1dfa      	adds	r2, r7, #7
    25da:	7812      	ldrb	r2, [r2, #0]
    25dc:	0952      	lsrs	r2, r2, #5
    25de:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    25e0:	4b0d      	ldr	r3, [pc, #52]	; (2618 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    25e2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    25e4:	230f      	movs	r3, #15
    25e6:	18fb      	adds	r3, r7, r3
    25e8:	781b      	ldrb	r3, [r3, #0]
    25ea:	2b00      	cmp	r3, #0
    25ec:	d10f      	bne.n	260e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    25ee:	230f      	movs	r3, #15
    25f0:	18fb      	adds	r3, r7, r3
    25f2:	781b      	ldrb	r3, [r3, #0]
    25f4:	009b      	lsls	r3, r3, #2
    25f6:	2210      	movs	r2, #16
    25f8:	4694      	mov	ip, r2
    25fa:	44bc      	add	ip, r7
    25fc:	4463      	add	r3, ip
    25fe:	3b08      	subs	r3, #8
    2600:	681a      	ldr	r2, [r3, #0]
    2602:	230e      	movs	r3, #14
    2604:	18fb      	adds	r3, r7, r3
    2606:	781b      	ldrb	r3, [r3, #0]
    2608:	01db      	lsls	r3, r3, #7
    260a:	18d3      	adds	r3, r2, r3
    260c:	e000      	b.n	2610 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    260e:	2300      	movs	r3, #0
}
    2610:	0018      	movs	r0, r3
    2612:	46bd      	mov	sp, r7
    2614:	b004      	add	sp, #16
    2616:	bd80      	pop	{r7, pc}
    2618:	41004400 	.word	0x41004400

0000261c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    261c:	b580      	push	{r7, lr}
    261e:	b088      	sub	sp, #32
    2620:	af00      	add	r7, sp, #0
    2622:	60f8      	str	r0, [r7, #12]
    2624:	60b9      	str	r1, [r7, #8]
    2626:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2628:	2300      	movs	r3, #0
    262a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    262c:	687b      	ldr	r3, [r7, #4]
    262e:	78db      	ldrb	r3, [r3, #3]
    2630:	2201      	movs	r2, #1
    2632:	4053      	eors	r3, r2
    2634:	b2db      	uxtb	r3, r3
    2636:	2b00      	cmp	r3, #0
    2638:	d035      	beq.n	26a6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	781b      	ldrb	r3, [r3, #0]
    263e:	2b80      	cmp	r3, #128	; 0x80
    2640:	d00b      	beq.n	265a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    2642:	69fb      	ldr	r3, [r7, #28]
    2644:	2280      	movs	r2, #128	; 0x80
    2646:	0252      	lsls	r2, r2, #9
    2648:	4313      	orrs	r3, r2
    264a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    264c:	687b      	ldr	r3, [r7, #4]
    264e:	781b      	ldrb	r3, [r3, #0]
    2650:	061b      	lsls	r3, r3, #24
    2652:	001a      	movs	r2, r3
    2654:	69fb      	ldr	r3, [r7, #28]
    2656:	4313      	orrs	r3, r2
    2658:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    265a:	687b      	ldr	r3, [r7, #4]
    265c:	785b      	ldrb	r3, [r3, #1]
    265e:	2b00      	cmp	r3, #0
    2660:	d003      	beq.n	266a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2662:	687b      	ldr	r3, [r7, #4]
    2664:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2666:	2b02      	cmp	r3, #2
    2668:	d110      	bne.n	268c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    266a:	69fb      	ldr	r3, [r7, #28]
    266c:	2280      	movs	r2, #128	; 0x80
    266e:	0292      	lsls	r2, r2, #10
    2670:	4313      	orrs	r3, r2
    2672:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2674:	687b      	ldr	r3, [r7, #4]
    2676:	789b      	ldrb	r3, [r3, #2]
    2678:	2b00      	cmp	r3, #0
    267a:	d004      	beq.n	2686 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    267c:	69fb      	ldr	r3, [r7, #28]
    267e:	2280      	movs	r2, #128	; 0x80
    2680:	02d2      	lsls	r2, r2, #11
    2682:	4313      	orrs	r3, r2
    2684:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2686:	68fb      	ldr	r3, [r7, #12]
    2688:	68ba      	ldr	r2, [r7, #8]
    268a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    268c:	687b      	ldr	r3, [r7, #4]
    268e:	785b      	ldrb	r3, [r3, #1]
    2690:	2b01      	cmp	r3, #1
    2692:	d003      	beq.n	269c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2694:	687b      	ldr	r3, [r7, #4]
    2696:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2698:	2b02      	cmp	r3, #2
    269a:	d107      	bne.n	26ac <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    269c:	69fb      	ldr	r3, [r7, #28]
    269e:	4a22      	ldr	r2, [pc, #136]	; (2728 <_system_pinmux_config+0x10c>)
    26a0:	4013      	ands	r3, r2
    26a2:	61fb      	str	r3, [r7, #28]
    26a4:	e002      	b.n	26ac <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    26a6:	68fb      	ldr	r3, [r7, #12]
    26a8:	68ba      	ldr	r2, [r7, #8]
    26aa:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    26ac:	68bb      	ldr	r3, [r7, #8]
    26ae:	041b      	lsls	r3, r3, #16
    26b0:	0c1b      	lsrs	r3, r3, #16
    26b2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    26b4:	68bb      	ldr	r3, [r7, #8]
    26b6:	0c1b      	lsrs	r3, r3, #16
    26b8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26ba:	69ba      	ldr	r2, [r7, #24]
    26bc:	69fb      	ldr	r3, [r7, #28]
    26be:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    26c0:	22a0      	movs	r2, #160	; 0xa0
    26c2:	05d2      	lsls	r2, r2, #23
    26c4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26c6:	68fb      	ldr	r3, [r7, #12]
    26c8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26ca:	697a      	ldr	r2, [r7, #20]
    26cc:	69fb      	ldr	r3, [r7, #28]
    26ce:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    26d0:	22d0      	movs	r2, #208	; 0xd0
    26d2:	0612      	lsls	r2, r2, #24
    26d4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26d6:	68fb      	ldr	r3, [r7, #12]
    26d8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    26da:	687b      	ldr	r3, [r7, #4]
    26dc:	78db      	ldrb	r3, [r3, #3]
    26de:	2201      	movs	r2, #1
    26e0:	4053      	eors	r3, r2
    26e2:	b2db      	uxtb	r3, r3
    26e4:	2b00      	cmp	r3, #0
    26e6:	d01a      	beq.n	271e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    26e8:	69fa      	ldr	r2, [r7, #28]
    26ea:	2380      	movs	r3, #128	; 0x80
    26ec:	02db      	lsls	r3, r3, #11
    26ee:	4013      	ands	r3, r2
    26f0:	d00a      	beq.n	2708 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    26f2:	687b      	ldr	r3, [r7, #4]
    26f4:	789b      	ldrb	r3, [r3, #2]
    26f6:	2b01      	cmp	r3, #1
    26f8:	d103      	bne.n	2702 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    26fa:	68fb      	ldr	r3, [r7, #12]
    26fc:	68ba      	ldr	r2, [r7, #8]
    26fe:	619a      	str	r2, [r3, #24]
    2700:	e002      	b.n	2708 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    2702:	68fb      	ldr	r3, [r7, #12]
    2704:	68ba      	ldr	r2, [r7, #8]
    2706:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2708:	687b      	ldr	r3, [r7, #4]
    270a:	785b      	ldrb	r3, [r3, #1]
    270c:	2b01      	cmp	r3, #1
    270e:	d003      	beq.n	2718 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2714:	2b02      	cmp	r3, #2
    2716:	d102      	bne.n	271e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2718:	68fb      	ldr	r3, [r7, #12]
    271a:	68ba      	ldr	r2, [r7, #8]
    271c:	609a      	str	r2, [r3, #8]
		}
	}
}
    271e:	46c0      	nop			; (mov r8, r8)
    2720:	46bd      	mov	sp, r7
    2722:	b008      	add	sp, #32
    2724:	bd80      	pop	{r7, pc}
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	fffbffff 	.word	0xfffbffff

0000272c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    272c:	b580      	push	{r7, lr}
    272e:	b084      	sub	sp, #16
    2730:	af00      	add	r7, sp, #0
    2732:	0002      	movs	r2, r0
    2734:	6039      	str	r1, [r7, #0]
    2736:	1dfb      	adds	r3, r7, #7
    2738:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    273a:	1dfb      	adds	r3, r7, #7
    273c:	781b      	ldrb	r3, [r3, #0]
    273e:	0018      	movs	r0, r3
    2740:	4b0a      	ldr	r3, [pc, #40]	; (276c <system_pinmux_pin_set_config+0x40>)
    2742:	4798      	blx	r3
    2744:	0003      	movs	r3, r0
    2746:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2748:	1dfb      	adds	r3, r7, #7
    274a:	781b      	ldrb	r3, [r3, #0]
    274c:	221f      	movs	r2, #31
    274e:	4013      	ands	r3, r2
    2750:	2201      	movs	r2, #1
    2752:	409a      	lsls	r2, r3
    2754:	0013      	movs	r3, r2
    2756:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2758:	683a      	ldr	r2, [r7, #0]
    275a:	68b9      	ldr	r1, [r7, #8]
    275c:	68fb      	ldr	r3, [r7, #12]
    275e:	0018      	movs	r0, r3
    2760:	4b03      	ldr	r3, [pc, #12]	; (2770 <system_pinmux_pin_set_config+0x44>)
    2762:	4798      	blx	r3
}
    2764:	46c0      	nop			; (mov r8, r8)
    2766:	46bd      	mov	sp, r7
    2768:	b004      	add	sp, #16
    276a:	bd80      	pop	{r7, pc}
    276c:	000025bd 	.word	0x000025bd
    2770:	0000261d 	.word	0x0000261d

00002774 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    2774:	b580      	push	{r7, lr}
    2776:	af00      	add	r7, sp, #0
	return;
    2778:	46c0      	nop			; (mov r8, r8)
}
    277a:	46bd      	mov	sp, r7
    277c:	bd80      	pop	{r7, pc}
	...

00002780 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2780:	b580      	push	{r7, lr}
    2782:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2784:	4b06      	ldr	r3, [pc, #24]	; (27a0 <system_init+0x20>)
    2786:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2788:	4b06      	ldr	r3, [pc, #24]	; (27a4 <system_init+0x24>)
    278a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    278c:	4b06      	ldr	r3, [pc, #24]	; (27a8 <system_init+0x28>)
    278e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2790:	4b06      	ldr	r3, [pc, #24]	; (27ac <system_init+0x2c>)
    2792:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2794:	4b06      	ldr	r3, [pc, #24]	; (27b0 <system_init+0x30>)
    2796:	4798      	blx	r3
}
    2798:	46c0      	nop			; (mov r8, r8)
    279a:	46bd      	mov	sp, r7
    279c:	bd80      	pop	{r7, pc}
    279e:	46c0      	nop			; (mov r8, r8)
    27a0:	00002041 	.word	0x00002041
    27a4:	00001c61 	.word	0x00001c61
    27a8:	00002775 	.word	0x00002775
    27ac:	00002775 	.word	0x00002775
    27b0:	00002775 	.word	0x00002775

000027b4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    27b4:	b580      	push	{r7, lr}
    27b6:	b082      	sub	sp, #8
    27b8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    27ba:	4b19      	ldr	r3, [pc, #100]	; (2820 <Reset_Handler+0x6c>)
    27bc:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    27be:	4b19      	ldr	r3, [pc, #100]	; (2824 <Reset_Handler+0x70>)
    27c0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    27c2:	687a      	ldr	r2, [r7, #4]
    27c4:	683b      	ldr	r3, [r7, #0]
    27c6:	429a      	cmp	r2, r3
    27c8:	d00c      	beq.n	27e4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    27ca:	e007      	b.n	27dc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    27cc:	683b      	ldr	r3, [r7, #0]
    27ce:	1d1a      	adds	r2, r3, #4
    27d0:	603a      	str	r2, [r7, #0]
    27d2:	687a      	ldr	r2, [r7, #4]
    27d4:	1d11      	adds	r1, r2, #4
    27d6:	6079      	str	r1, [r7, #4]
    27d8:	6812      	ldr	r2, [r2, #0]
    27da:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    27dc:	683a      	ldr	r2, [r7, #0]
    27de:	4b12      	ldr	r3, [pc, #72]	; (2828 <Reset_Handler+0x74>)
    27e0:	429a      	cmp	r2, r3
    27e2:	d3f3      	bcc.n	27cc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    27e4:	4b11      	ldr	r3, [pc, #68]	; (282c <Reset_Handler+0x78>)
    27e6:	603b      	str	r3, [r7, #0]
    27e8:	e004      	b.n	27f4 <Reset_Handler+0x40>
                *pDest++ = 0;
    27ea:	683b      	ldr	r3, [r7, #0]
    27ec:	1d1a      	adds	r2, r3, #4
    27ee:	603a      	str	r2, [r7, #0]
    27f0:	2200      	movs	r2, #0
    27f2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    27f4:	683a      	ldr	r2, [r7, #0]
    27f6:	4b0e      	ldr	r3, [pc, #56]	; (2830 <Reset_Handler+0x7c>)
    27f8:	429a      	cmp	r2, r3
    27fa:	d3f6      	bcc.n	27ea <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    27fc:	4b0d      	ldr	r3, [pc, #52]	; (2834 <Reset_Handler+0x80>)
    27fe:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2800:	4b0d      	ldr	r3, [pc, #52]	; (2838 <Reset_Handler+0x84>)
    2802:	687a      	ldr	r2, [r7, #4]
    2804:	21ff      	movs	r1, #255	; 0xff
    2806:	438a      	bics	r2, r1
    2808:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    280a:	4a0c      	ldr	r2, [pc, #48]	; (283c <Reset_Handler+0x88>)
    280c:	6853      	ldr	r3, [r2, #4]
    280e:	2180      	movs	r1, #128	; 0x80
    2810:	430b      	orrs	r3, r1
    2812:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    2814:	4b0a      	ldr	r3, [pc, #40]	; (2840 <Reset_Handler+0x8c>)
    2816:	4798      	blx	r3

        /* Branch to main function */
        main();
    2818:	4b0a      	ldr	r3, [pc, #40]	; (2844 <Reset_Handler+0x90>)
    281a:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    281c:	e7fe      	b.n	281c <Reset_Handler+0x68>
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	00002dbc 	.word	0x00002dbc
    2824:	20000000 	.word	0x20000000
    2828:	20000018 	.word	0x20000018
    282c:	20000018 	.word	0x20000018
    2830:	20000094 	.word	0x20000094
    2834:	00000000 	.word	0x00000000
    2838:	e000ed00 	.word	0xe000ed00
    283c:	41004000 	.word	0x41004000
    2840:	00002ced 	.word	0x00002ced
    2844:	000028c1 	.word	0x000028c1

00002848 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
uint32_t phantomISR = 9999;

void Dummy_Handler(void)
{
    2848:	b580      	push	{r7, lr}
    284a:	b082      	sub	sp, #8
    284c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    284e:	f3ef 8305 	mrs	r3, IPSR
    2852:	607b      	str	r3, [r7, #4]
  return(result);
    2854:	687a      	ldr	r2, [r7, #4]
        while (1) {
			phantomISR = __get_IPSR();
    2856:	4b01      	ldr	r3, [pc, #4]	; (285c <Dummy_Handler+0x14>)
    2858:	601a      	str	r2, [r3, #0]
    285a:	e7f8      	b.n	284e <Dummy_Handler+0x6>
    285c:	2000000c 	.word	0x2000000c

00002860 <bme280_data_decompress>:
		uint8_t bytes[16];
	}testheste;

void bme280_data_decompress(struct bme280_data *bme280_data_object, uint8_t *data_array);
void bme280_data_decompress(struct bme280_data *bme280_data_object, uint8_t *data_array)
{
    2860:	b580      	push	{r7, lr}
    2862:	b088      	sub	sp, #32
    2864:	af00      	add	r7, sp, #0
    2866:	6078      	str	r0, [r7, #4]
    2868:	6039      	str	r1, [r7, #0]
	testheste testhest;

	for (int i=0;i<16;i++)
    286a:	2300      	movs	r3, #0
    286c:	61fb      	str	r3, [r7, #28]
    286e:	e00c      	b.n	288a <bme280_data_decompress+0x2a>
	{
		testhest.bytes[i] = data_array[i];
    2870:	69fb      	ldr	r3, [r7, #28]
    2872:	683a      	ldr	r2, [r7, #0]
    2874:	18d3      	adds	r3, r2, r3
    2876:	7819      	ldrb	r1, [r3, #0]
    2878:	230c      	movs	r3, #12
    287a:	18fa      	adds	r2, r7, r3
    287c:	69fb      	ldr	r3, [r7, #28]
    287e:	18d3      	adds	r3, r2, r3
    2880:	1c0a      	adds	r2, r1, #0
    2882:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<16;i++)
    2884:	69fb      	ldr	r3, [r7, #28]
    2886:	3301      	adds	r3, #1
    2888:	61fb      	str	r3, [r7, #28]
    288a:	69fb      	ldr	r3, [r7, #28]
    288c:	2b0f      	cmp	r3, #15
    288e:	ddef      	ble.n	2870 <bme280_data_decompress+0x10>
	}
	
	bme280_data_object->temperature = testhest.hestestruct.temperature;
    2890:	230c      	movs	r3, #12
    2892:	18fb      	adds	r3, r7, r3
    2894:	681a      	ldr	r2, [r3, #0]
    2896:	687b      	ldr	r3, [r7, #4]
    2898:	601a      	str	r2, [r3, #0]
	bme280_data_object->pressure = testhest.hestestruct.pressure;
    289a:	230c      	movs	r3, #12
    289c:	18fb      	adds	r3, r7, r3
    289e:	685a      	ldr	r2, [r3, #4]
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	605a      	str	r2, [r3, #4]
	bme280_data_object->dew_point = testhest.hestestruct.dew_point;
    28a4:	230c      	movs	r3, #12
    28a6:	18fb      	adds	r3, r7, r3
    28a8:	68da      	ldr	r2, [r3, #12]
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	60da      	str	r2, [r3, #12]
	bme280_data_object->humidity = testhest.hestestruct.humidity;
    28ae:	230c      	movs	r3, #12
    28b0:	18fb      	adds	r3, r7, r3
    28b2:	689a      	ldr	r2, [r3, #8]
    28b4:	687b      	ldr	r3, [r7, #4]
    28b6:	609a      	str	r2, [r3, #8]
	
	/*bme280_data_object->temperature = ((uint32_t)data_array[0] & 0xFF) + (((uint32_t)data_array[1] & 0xFF) << 8 ) + (((uint32_t)data_array[2] & 0xFF)<< 16) + (((uint32_t)data_array[3] & 0xFF) << 24);
	bme280_data_object->pressure = (data_array[4]) + ((data_array[5] << 8)) + ((data_array[6] << 16)) + ((data_array[7] << 24));
	bme280_data_object->dew_point = (data_array[8]) + ((data_array[9] << 8))+ ((data_array[10] << 16))+ ((data_array[11] << 24));
	bme280_data_object->humidity = (data_array[12]) + ((data_array[13] << 8))+ ((data_array[14] << 16))+ ((data_array[15] << 24));*/
}
    28b8:	46c0      	nop			; (mov r8, r8)
    28ba:	46bd      	mov	sp, r7
    28bc:	b008      	add	sp, #32
    28be:	bd80      	pop	{r7, pc}

000028c0 <main>:

struct bme280_data bme280_data_object;

int main (void)
{
    28c0:	b580      	push	{r7, lr}
    28c2:	b08a      	sub	sp, #40	; 0x28
    28c4:	af00      	add	r7, sp, #0
	system_init();
    28c6:	4b39      	ldr	r3, [pc, #228]	; (29ac <main+0xec>)
    28c8:	4798      	blx	r3
	delay_init();
    28ca:	4b39      	ldr	r3, [pc, #228]	; (29b0 <main+0xf0>)
    28cc:	4798      	blx	r3
	LED_Init();
    28ce:	4b39      	ldr	r3, [pc, #228]	; (29b4 <main+0xf4>)
    28d0:	4798      	blx	r3
	spi_master_init();
    28d2:	4b39      	ldr	r3, [pc, #228]	; (29b8 <main+0xf8>)
    28d4:	4798      	blx	r3
	//nrf24l01_init();
	NRF_Enter_RX_Mode(RX_ADDR);
    28d6:	4b39      	ldr	r3, [pc, #228]	; (29bc <main+0xfc>)
    28d8:	0018      	movs	r0, r3
    28da:	4b39      	ldr	r3, [pc, #228]	; (29c0 <main+0x100>)
    28dc:	4798      	blx	r3
	
	uint32_t *p = 0x0080A00C;
    28de:	4b39      	ldr	r3, [pc, #228]	; (29c4 <main+0x104>)
    28e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t words[4];
	
	words[0] = *(uint32_t*) 0x0080A00C;
    28e2:	4b38      	ldr	r3, [pc, #224]	; (29c4 <main+0x104>)
    28e4:	681a      	ldr	r2, [r3, #0]
    28e6:	1d3b      	adds	r3, r7, #4
    28e8:	601a      	str	r2, [r3, #0]
	words[1] = *(uint32_t*) 0x0080A040;
    28ea:	4b37      	ldr	r3, [pc, #220]	; (29c8 <main+0x108>)
    28ec:	681a      	ldr	r2, [r3, #0]
    28ee:	1d3b      	adds	r3, r7, #4
    28f0:	605a      	str	r2, [r3, #4]
	words[2] = *(uint32_t*) 0x0080A044;
    28f2:	4b36      	ldr	r3, [pc, #216]	; (29cc <main+0x10c>)
    28f4:	681a      	ldr	r2, [r3, #0]
    28f6:	1d3b      	adds	r3, r7, #4
    28f8:	609a      	str	r2, [r3, #8]
	words[3] = *(uint32_t*) 0x0080A048;
    28fa:	4b35      	ldr	r3, [pc, #212]	; (29d0 <main+0x110>)
    28fc:	681a      	ldr	r2, [r3, #0]
    28fe:	1d3b      	adds	r3, r7, #4
    2900:	60da      	str	r2, [r3, #12]
	
	uint32_t Status = 0;
    2902:	2300      	movs	r3, #0
    2904:	623b      	str	r3, [r7, #32]
	uint32_t i = 0;
    2906:	2300      	movs	r3, #0
    2908:	61fb      	str	r3, [r7, #28]
	LED_Set_Color(LED_BLUE);
    290a:	20ff      	movs	r0, #255	; 0xff
    290c:	4b31      	ldr	r3, [pc, #196]	; (29d4 <main+0x114>)
    290e:	4798      	blx	r3
	delay_ms(1000);
    2910:	23fa      	movs	r3, #250	; 0xfa
    2912:	009b      	lsls	r3, r3, #2
    2914:	0018      	movs	r0, r3
    2916:	4b30      	ldr	r3, [pc, #192]	; (29d8 <main+0x118>)
    2918:	4798      	blx	r3
	while(1)
	{
		Status = NRF_Read_single(NRF_R_REGISTER(NRF_STATUS_REG));
    291a:	2007      	movs	r0, #7
    291c:	4b2f      	ldr	r3, [pc, #188]	; (29dc <main+0x11c>)
    291e:	4798      	blx	r3
    2920:	0003      	movs	r3, r0
    2922:	623b      	str	r3, [r7, #32]
		
		if ((Status & NRF_STATUS_RX_DR) && (Status != 0xFF))
    2924:	6a3b      	ldr	r3, [r7, #32]
    2926:	2240      	movs	r2, #64	; 0x40
    2928:	4013      	ands	r3, r2
    292a:	d0f6      	beq.n	291a <main+0x5a>
    292c:	6a3b      	ldr	r3, [r7, #32]
    292e:	2bff      	cmp	r3, #255	; 0xff
    2930:	d0f3      	beq.n	291a <main+0x5a>
		{
			
			i=NRF_Read_single(NRF_R_RX_PL_WID);
    2932:	2060      	movs	r0, #96	; 0x60
    2934:	4b29      	ldr	r3, [pc, #164]	; (29dc <main+0x11c>)
    2936:	4798      	blx	r3
    2938:	0003      	movs	r3, r0
    293a:	61fb      	str	r3, [r7, #28]
			if(i>31)
    293c:	69fb      	ldr	r3, [r7, #28]
    293e:	2b1f      	cmp	r3, #31
    2940:	d902      	bls.n	2948 <main+0x88>
			{
				NRF_Write_1(NRF_FLUSH_RX);
    2942:	20e2      	movs	r0, #226	; 0xe2
    2944:	4b26      	ldr	r3, [pc, #152]	; (29e0 <main+0x120>)
    2946:	4798      	blx	r3
			}
			i=NRF_Read_single(NRF_R_RX_PL_WID);
    2948:	2060      	movs	r0, #96	; 0x60
    294a:	4b24      	ldr	r3, [pc, #144]	; (29dc <main+0x11c>)
    294c:	4798      	blx	r3
    294e:	0003      	movs	r3, r0
    2950:	61fb      	str	r3, [r7, #28]
			NRF_Read(NRF_R_RX_PAYLOAD,i,&RX_Buffer);
    2952:	4a24      	ldr	r2, [pc, #144]	; (29e4 <main+0x124>)
    2954:	69fb      	ldr	r3, [r7, #28]
    2956:	0019      	movs	r1, r3
    2958:	2061      	movs	r0, #97	; 0x61
    295a:	4b23      	ldr	r3, [pc, #140]	; (29e8 <main+0x128>)
    295c:	4798      	blx	r3
			NRF_Write_2(NRF_W_REGISTER(NRF_STATUS_REG), NRF_STATUS_RX_DR);
    295e:	2140      	movs	r1, #64	; 0x40
    2960:	2027      	movs	r0, #39	; 0x27
    2962:	4b22      	ldr	r3, [pc, #136]	; (29ec <main+0x12c>)
    2964:	4798      	blx	r3
			NRF_Write_1(NRF_FLUSH_RX);
    2966:	20e2      	movs	r0, #226	; 0xe2
    2968:	4b1d      	ldr	r3, [pc, #116]	; (29e0 <main+0x120>)
    296a:	4798      	blx	r3
			/*uint32_t tempLED = 0x000000;
			tempLED = tempLED + (RX_Buffer[3] << 16)*4;
			LED_Set_Color(tempLED);*/
			
			bme280_data_decompress(&bme280_data_object,&RX_Buffer[4]);
    296c:	4a20      	ldr	r2, [pc, #128]	; (29f0 <main+0x130>)
    296e:	4b21      	ldr	r3, [pc, #132]	; (29f4 <main+0x134>)
    2970:	0011      	movs	r1, r2
    2972:	0018      	movs	r0, r3
    2974:	4b20      	ldr	r3, [pc, #128]	; (29f8 <main+0x138>)
    2976:	4798      	blx	r3
			
			/*if (bme280_data_object.temperature > 2100)
			{*/
				uint8_t lol = bme280_data_object.temperature/50;
    2978:	4b1e      	ldr	r3, [pc, #120]	; (29f4 <main+0x134>)
    297a:	681a      	ldr	r2, [r3, #0]
    297c:	4b1f      	ldr	r3, [pc, #124]	; (29fc <main+0x13c>)
    297e:	2132      	movs	r1, #50	; 0x32
    2980:	0010      	movs	r0, r2
    2982:	4798      	blx	r3
    2984:	0003      	movs	r3, r0
    2986:	001a      	movs	r2, r3
    2988:	231b      	movs	r3, #27
    298a:	18fb      	adds	r3, r7, r3
    298c:	701a      	strb	r2, [r3, #0]
				uint32_t tempcolour = (LED_OFF + (lol << 16)) & 0xFF0000;
    298e:	231b      	movs	r3, #27
    2990:	18fb      	adds	r3, r7, r3
    2992:	781b      	ldrb	r3, [r3, #0]
    2994:	041b      	lsls	r3, r3, #16
    2996:	001a      	movs	r2, r3
    2998:	23ff      	movs	r3, #255	; 0xff
    299a:	041b      	lsls	r3, r3, #16
    299c:	4013      	ands	r3, r2
    299e:	617b      	str	r3, [r7, #20]
				//LED_Set_Color(LED_GREEN);
				LED_Set_Color(tempcolour);
    29a0:	697b      	ldr	r3, [r7, #20]
    29a2:	0018      	movs	r0, r3
    29a4:	4b0b      	ldr	r3, [pc, #44]	; (29d4 <main+0x114>)
    29a6:	4798      	blx	r3
		Status = NRF_Read_single(NRF_R_REGISTER(NRF_STATUS_REG));
    29a8:	e7b7      	b.n	291a <main+0x5a>
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	00002781 	.word	0x00002781
    29b0:	000019f1 	.word	0x000019f1
    29b4:	00001a79 	.word	0x00001a79
    29b8:	00001915 	.word	0x00001915
    29bc:	20000010 	.word	0x20000010
    29c0:	00001519 	.word	0x00001519
    29c4:	0080a00c 	.word	0x0080a00c
    29c8:	0080a040 	.word	0x0080a040
    29cc:	0080a044 	.word	0x0080a044
    29d0:	0080a048 	.word	0x0080a048
    29d4:	00001bf1 	.word	0x00001bf1
    29d8:	00001a49 	.word	0x00001a49
    29dc:	000015d5 	.word	0x000015d5
    29e0:	00001695 	.word	0x00001695
    29e4:	20000070 	.word	0x20000070
    29e8:	000015a5 	.word	0x000015a5
    29ec:	0000166d 	.word	0x0000166d
    29f0:	20000074 	.word	0x20000074
    29f4:	20000060 	.word	0x20000060
    29f8:	00002861 	.word	0x00002861
    29fc:	00002b15 	.word	0x00002b15

00002a00 <__udivsi3>:
    2a00:	2200      	movs	r2, #0
    2a02:	0843      	lsrs	r3, r0, #1
    2a04:	428b      	cmp	r3, r1
    2a06:	d374      	bcc.n	2af2 <__udivsi3+0xf2>
    2a08:	0903      	lsrs	r3, r0, #4
    2a0a:	428b      	cmp	r3, r1
    2a0c:	d35f      	bcc.n	2ace <__udivsi3+0xce>
    2a0e:	0a03      	lsrs	r3, r0, #8
    2a10:	428b      	cmp	r3, r1
    2a12:	d344      	bcc.n	2a9e <__udivsi3+0x9e>
    2a14:	0b03      	lsrs	r3, r0, #12
    2a16:	428b      	cmp	r3, r1
    2a18:	d328      	bcc.n	2a6c <__udivsi3+0x6c>
    2a1a:	0c03      	lsrs	r3, r0, #16
    2a1c:	428b      	cmp	r3, r1
    2a1e:	d30d      	bcc.n	2a3c <__udivsi3+0x3c>
    2a20:	22ff      	movs	r2, #255	; 0xff
    2a22:	0209      	lsls	r1, r1, #8
    2a24:	ba12      	rev	r2, r2
    2a26:	0c03      	lsrs	r3, r0, #16
    2a28:	428b      	cmp	r3, r1
    2a2a:	d302      	bcc.n	2a32 <__udivsi3+0x32>
    2a2c:	1212      	asrs	r2, r2, #8
    2a2e:	0209      	lsls	r1, r1, #8
    2a30:	d065      	beq.n	2afe <__udivsi3+0xfe>
    2a32:	0b03      	lsrs	r3, r0, #12
    2a34:	428b      	cmp	r3, r1
    2a36:	d319      	bcc.n	2a6c <__udivsi3+0x6c>
    2a38:	e000      	b.n	2a3c <__udivsi3+0x3c>
    2a3a:	0a09      	lsrs	r1, r1, #8
    2a3c:	0bc3      	lsrs	r3, r0, #15
    2a3e:	428b      	cmp	r3, r1
    2a40:	d301      	bcc.n	2a46 <__udivsi3+0x46>
    2a42:	03cb      	lsls	r3, r1, #15
    2a44:	1ac0      	subs	r0, r0, r3
    2a46:	4152      	adcs	r2, r2
    2a48:	0b83      	lsrs	r3, r0, #14
    2a4a:	428b      	cmp	r3, r1
    2a4c:	d301      	bcc.n	2a52 <__udivsi3+0x52>
    2a4e:	038b      	lsls	r3, r1, #14
    2a50:	1ac0      	subs	r0, r0, r3
    2a52:	4152      	adcs	r2, r2
    2a54:	0b43      	lsrs	r3, r0, #13
    2a56:	428b      	cmp	r3, r1
    2a58:	d301      	bcc.n	2a5e <__udivsi3+0x5e>
    2a5a:	034b      	lsls	r3, r1, #13
    2a5c:	1ac0      	subs	r0, r0, r3
    2a5e:	4152      	adcs	r2, r2
    2a60:	0b03      	lsrs	r3, r0, #12
    2a62:	428b      	cmp	r3, r1
    2a64:	d301      	bcc.n	2a6a <__udivsi3+0x6a>
    2a66:	030b      	lsls	r3, r1, #12
    2a68:	1ac0      	subs	r0, r0, r3
    2a6a:	4152      	adcs	r2, r2
    2a6c:	0ac3      	lsrs	r3, r0, #11
    2a6e:	428b      	cmp	r3, r1
    2a70:	d301      	bcc.n	2a76 <__udivsi3+0x76>
    2a72:	02cb      	lsls	r3, r1, #11
    2a74:	1ac0      	subs	r0, r0, r3
    2a76:	4152      	adcs	r2, r2
    2a78:	0a83      	lsrs	r3, r0, #10
    2a7a:	428b      	cmp	r3, r1
    2a7c:	d301      	bcc.n	2a82 <__udivsi3+0x82>
    2a7e:	028b      	lsls	r3, r1, #10
    2a80:	1ac0      	subs	r0, r0, r3
    2a82:	4152      	adcs	r2, r2
    2a84:	0a43      	lsrs	r3, r0, #9
    2a86:	428b      	cmp	r3, r1
    2a88:	d301      	bcc.n	2a8e <__udivsi3+0x8e>
    2a8a:	024b      	lsls	r3, r1, #9
    2a8c:	1ac0      	subs	r0, r0, r3
    2a8e:	4152      	adcs	r2, r2
    2a90:	0a03      	lsrs	r3, r0, #8
    2a92:	428b      	cmp	r3, r1
    2a94:	d301      	bcc.n	2a9a <__udivsi3+0x9a>
    2a96:	020b      	lsls	r3, r1, #8
    2a98:	1ac0      	subs	r0, r0, r3
    2a9a:	4152      	adcs	r2, r2
    2a9c:	d2cd      	bcs.n	2a3a <__udivsi3+0x3a>
    2a9e:	09c3      	lsrs	r3, r0, #7
    2aa0:	428b      	cmp	r3, r1
    2aa2:	d301      	bcc.n	2aa8 <__udivsi3+0xa8>
    2aa4:	01cb      	lsls	r3, r1, #7
    2aa6:	1ac0      	subs	r0, r0, r3
    2aa8:	4152      	adcs	r2, r2
    2aaa:	0983      	lsrs	r3, r0, #6
    2aac:	428b      	cmp	r3, r1
    2aae:	d301      	bcc.n	2ab4 <__udivsi3+0xb4>
    2ab0:	018b      	lsls	r3, r1, #6
    2ab2:	1ac0      	subs	r0, r0, r3
    2ab4:	4152      	adcs	r2, r2
    2ab6:	0943      	lsrs	r3, r0, #5
    2ab8:	428b      	cmp	r3, r1
    2aba:	d301      	bcc.n	2ac0 <__udivsi3+0xc0>
    2abc:	014b      	lsls	r3, r1, #5
    2abe:	1ac0      	subs	r0, r0, r3
    2ac0:	4152      	adcs	r2, r2
    2ac2:	0903      	lsrs	r3, r0, #4
    2ac4:	428b      	cmp	r3, r1
    2ac6:	d301      	bcc.n	2acc <__udivsi3+0xcc>
    2ac8:	010b      	lsls	r3, r1, #4
    2aca:	1ac0      	subs	r0, r0, r3
    2acc:	4152      	adcs	r2, r2
    2ace:	08c3      	lsrs	r3, r0, #3
    2ad0:	428b      	cmp	r3, r1
    2ad2:	d301      	bcc.n	2ad8 <__udivsi3+0xd8>
    2ad4:	00cb      	lsls	r3, r1, #3
    2ad6:	1ac0      	subs	r0, r0, r3
    2ad8:	4152      	adcs	r2, r2
    2ada:	0883      	lsrs	r3, r0, #2
    2adc:	428b      	cmp	r3, r1
    2ade:	d301      	bcc.n	2ae4 <__udivsi3+0xe4>
    2ae0:	008b      	lsls	r3, r1, #2
    2ae2:	1ac0      	subs	r0, r0, r3
    2ae4:	4152      	adcs	r2, r2
    2ae6:	0843      	lsrs	r3, r0, #1
    2ae8:	428b      	cmp	r3, r1
    2aea:	d301      	bcc.n	2af0 <__udivsi3+0xf0>
    2aec:	004b      	lsls	r3, r1, #1
    2aee:	1ac0      	subs	r0, r0, r3
    2af0:	4152      	adcs	r2, r2
    2af2:	1a41      	subs	r1, r0, r1
    2af4:	d200      	bcs.n	2af8 <__udivsi3+0xf8>
    2af6:	4601      	mov	r1, r0
    2af8:	4152      	adcs	r2, r2
    2afa:	4610      	mov	r0, r2
    2afc:	4770      	bx	lr
    2afe:	e7ff      	b.n	2b00 <__udivsi3+0x100>
    2b00:	b501      	push	{r0, lr}
    2b02:	2000      	movs	r0, #0
    2b04:	f000 f8f0 	bl	2ce8 <__aeabi_idiv0>
    2b08:	bd02      	pop	{r1, pc}
    2b0a:	46c0      	nop			; (mov r8, r8)

00002b0c <__aeabi_uidivmod>:
    2b0c:	2900      	cmp	r1, #0
    2b0e:	d0f7      	beq.n	2b00 <__udivsi3+0x100>
    2b10:	e776      	b.n	2a00 <__udivsi3>
    2b12:	4770      	bx	lr

00002b14 <__divsi3>:
    2b14:	4603      	mov	r3, r0
    2b16:	430b      	orrs	r3, r1
    2b18:	d47f      	bmi.n	2c1a <__divsi3+0x106>
    2b1a:	2200      	movs	r2, #0
    2b1c:	0843      	lsrs	r3, r0, #1
    2b1e:	428b      	cmp	r3, r1
    2b20:	d374      	bcc.n	2c0c <__divsi3+0xf8>
    2b22:	0903      	lsrs	r3, r0, #4
    2b24:	428b      	cmp	r3, r1
    2b26:	d35f      	bcc.n	2be8 <__divsi3+0xd4>
    2b28:	0a03      	lsrs	r3, r0, #8
    2b2a:	428b      	cmp	r3, r1
    2b2c:	d344      	bcc.n	2bb8 <__divsi3+0xa4>
    2b2e:	0b03      	lsrs	r3, r0, #12
    2b30:	428b      	cmp	r3, r1
    2b32:	d328      	bcc.n	2b86 <__divsi3+0x72>
    2b34:	0c03      	lsrs	r3, r0, #16
    2b36:	428b      	cmp	r3, r1
    2b38:	d30d      	bcc.n	2b56 <__divsi3+0x42>
    2b3a:	22ff      	movs	r2, #255	; 0xff
    2b3c:	0209      	lsls	r1, r1, #8
    2b3e:	ba12      	rev	r2, r2
    2b40:	0c03      	lsrs	r3, r0, #16
    2b42:	428b      	cmp	r3, r1
    2b44:	d302      	bcc.n	2b4c <__divsi3+0x38>
    2b46:	1212      	asrs	r2, r2, #8
    2b48:	0209      	lsls	r1, r1, #8
    2b4a:	d065      	beq.n	2c18 <__divsi3+0x104>
    2b4c:	0b03      	lsrs	r3, r0, #12
    2b4e:	428b      	cmp	r3, r1
    2b50:	d319      	bcc.n	2b86 <__divsi3+0x72>
    2b52:	e000      	b.n	2b56 <__divsi3+0x42>
    2b54:	0a09      	lsrs	r1, r1, #8
    2b56:	0bc3      	lsrs	r3, r0, #15
    2b58:	428b      	cmp	r3, r1
    2b5a:	d301      	bcc.n	2b60 <__divsi3+0x4c>
    2b5c:	03cb      	lsls	r3, r1, #15
    2b5e:	1ac0      	subs	r0, r0, r3
    2b60:	4152      	adcs	r2, r2
    2b62:	0b83      	lsrs	r3, r0, #14
    2b64:	428b      	cmp	r3, r1
    2b66:	d301      	bcc.n	2b6c <__divsi3+0x58>
    2b68:	038b      	lsls	r3, r1, #14
    2b6a:	1ac0      	subs	r0, r0, r3
    2b6c:	4152      	adcs	r2, r2
    2b6e:	0b43      	lsrs	r3, r0, #13
    2b70:	428b      	cmp	r3, r1
    2b72:	d301      	bcc.n	2b78 <__divsi3+0x64>
    2b74:	034b      	lsls	r3, r1, #13
    2b76:	1ac0      	subs	r0, r0, r3
    2b78:	4152      	adcs	r2, r2
    2b7a:	0b03      	lsrs	r3, r0, #12
    2b7c:	428b      	cmp	r3, r1
    2b7e:	d301      	bcc.n	2b84 <__divsi3+0x70>
    2b80:	030b      	lsls	r3, r1, #12
    2b82:	1ac0      	subs	r0, r0, r3
    2b84:	4152      	adcs	r2, r2
    2b86:	0ac3      	lsrs	r3, r0, #11
    2b88:	428b      	cmp	r3, r1
    2b8a:	d301      	bcc.n	2b90 <__divsi3+0x7c>
    2b8c:	02cb      	lsls	r3, r1, #11
    2b8e:	1ac0      	subs	r0, r0, r3
    2b90:	4152      	adcs	r2, r2
    2b92:	0a83      	lsrs	r3, r0, #10
    2b94:	428b      	cmp	r3, r1
    2b96:	d301      	bcc.n	2b9c <__divsi3+0x88>
    2b98:	028b      	lsls	r3, r1, #10
    2b9a:	1ac0      	subs	r0, r0, r3
    2b9c:	4152      	adcs	r2, r2
    2b9e:	0a43      	lsrs	r3, r0, #9
    2ba0:	428b      	cmp	r3, r1
    2ba2:	d301      	bcc.n	2ba8 <__divsi3+0x94>
    2ba4:	024b      	lsls	r3, r1, #9
    2ba6:	1ac0      	subs	r0, r0, r3
    2ba8:	4152      	adcs	r2, r2
    2baa:	0a03      	lsrs	r3, r0, #8
    2bac:	428b      	cmp	r3, r1
    2bae:	d301      	bcc.n	2bb4 <__divsi3+0xa0>
    2bb0:	020b      	lsls	r3, r1, #8
    2bb2:	1ac0      	subs	r0, r0, r3
    2bb4:	4152      	adcs	r2, r2
    2bb6:	d2cd      	bcs.n	2b54 <__divsi3+0x40>
    2bb8:	09c3      	lsrs	r3, r0, #7
    2bba:	428b      	cmp	r3, r1
    2bbc:	d301      	bcc.n	2bc2 <__divsi3+0xae>
    2bbe:	01cb      	lsls	r3, r1, #7
    2bc0:	1ac0      	subs	r0, r0, r3
    2bc2:	4152      	adcs	r2, r2
    2bc4:	0983      	lsrs	r3, r0, #6
    2bc6:	428b      	cmp	r3, r1
    2bc8:	d301      	bcc.n	2bce <__divsi3+0xba>
    2bca:	018b      	lsls	r3, r1, #6
    2bcc:	1ac0      	subs	r0, r0, r3
    2bce:	4152      	adcs	r2, r2
    2bd0:	0943      	lsrs	r3, r0, #5
    2bd2:	428b      	cmp	r3, r1
    2bd4:	d301      	bcc.n	2bda <__divsi3+0xc6>
    2bd6:	014b      	lsls	r3, r1, #5
    2bd8:	1ac0      	subs	r0, r0, r3
    2bda:	4152      	adcs	r2, r2
    2bdc:	0903      	lsrs	r3, r0, #4
    2bde:	428b      	cmp	r3, r1
    2be0:	d301      	bcc.n	2be6 <__divsi3+0xd2>
    2be2:	010b      	lsls	r3, r1, #4
    2be4:	1ac0      	subs	r0, r0, r3
    2be6:	4152      	adcs	r2, r2
    2be8:	08c3      	lsrs	r3, r0, #3
    2bea:	428b      	cmp	r3, r1
    2bec:	d301      	bcc.n	2bf2 <__divsi3+0xde>
    2bee:	00cb      	lsls	r3, r1, #3
    2bf0:	1ac0      	subs	r0, r0, r3
    2bf2:	4152      	adcs	r2, r2
    2bf4:	0883      	lsrs	r3, r0, #2
    2bf6:	428b      	cmp	r3, r1
    2bf8:	d301      	bcc.n	2bfe <__divsi3+0xea>
    2bfa:	008b      	lsls	r3, r1, #2
    2bfc:	1ac0      	subs	r0, r0, r3
    2bfe:	4152      	adcs	r2, r2
    2c00:	0843      	lsrs	r3, r0, #1
    2c02:	428b      	cmp	r3, r1
    2c04:	d301      	bcc.n	2c0a <__divsi3+0xf6>
    2c06:	004b      	lsls	r3, r1, #1
    2c08:	1ac0      	subs	r0, r0, r3
    2c0a:	4152      	adcs	r2, r2
    2c0c:	1a41      	subs	r1, r0, r1
    2c0e:	d200      	bcs.n	2c12 <__divsi3+0xfe>
    2c10:	4601      	mov	r1, r0
    2c12:	4152      	adcs	r2, r2
    2c14:	4610      	mov	r0, r2
    2c16:	4770      	bx	lr
    2c18:	e05d      	b.n	2cd6 <__divsi3+0x1c2>
    2c1a:	0fca      	lsrs	r2, r1, #31
    2c1c:	d000      	beq.n	2c20 <__divsi3+0x10c>
    2c1e:	4249      	negs	r1, r1
    2c20:	1003      	asrs	r3, r0, #32
    2c22:	d300      	bcc.n	2c26 <__divsi3+0x112>
    2c24:	4240      	negs	r0, r0
    2c26:	4053      	eors	r3, r2
    2c28:	2200      	movs	r2, #0
    2c2a:	469c      	mov	ip, r3
    2c2c:	0903      	lsrs	r3, r0, #4
    2c2e:	428b      	cmp	r3, r1
    2c30:	d32d      	bcc.n	2c8e <__divsi3+0x17a>
    2c32:	0a03      	lsrs	r3, r0, #8
    2c34:	428b      	cmp	r3, r1
    2c36:	d312      	bcc.n	2c5e <__divsi3+0x14a>
    2c38:	22fc      	movs	r2, #252	; 0xfc
    2c3a:	0189      	lsls	r1, r1, #6
    2c3c:	ba12      	rev	r2, r2
    2c3e:	0a03      	lsrs	r3, r0, #8
    2c40:	428b      	cmp	r3, r1
    2c42:	d30c      	bcc.n	2c5e <__divsi3+0x14a>
    2c44:	0189      	lsls	r1, r1, #6
    2c46:	1192      	asrs	r2, r2, #6
    2c48:	428b      	cmp	r3, r1
    2c4a:	d308      	bcc.n	2c5e <__divsi3+0x14a>
    2c4c:	0189      	lsls	r1, r1, #6
    2c4e:	1192      	asrs	r2, r2, #6
    2c50:	428b      	cmp	r3, r1
    2c52:	d304      	bcc.n	2c5e <__divsi3+0x14a>
    2c54:	0189      	lsls	r1, r1, #6
    2c56:	d03a      	beq.n	2cce <__divsi3+0x1ba>
    2c58:	1192      	asrs	r2, r2, #6
    2c5a:	e000      	b.n	2c5e <__divsi3+0x14a>
    2c5c:	0989      	lsrs	r1, r1, #6
    2c5e:	09c3      	lsrs	r3, r0, #7
    2c60:	428b      	cmp	r3, r1
    2c62:	d301      	bcc.n	2c68 <__divsi3+0x154>
    2c64:	01cb      	lsls	r3, r1, #7
    2c66:	1ac0      	subs	r0, r0, r3
    2c68:	4152      	adcs	r2, r2
    2c6a:	0983      	lsrs	r3, r0, #6
    2c6c:	428b      	cmp	r3, r1
    2c6e:	d301      	bcc.n	2c74 <__divsi3+0x160>
    2c70:	018b      	lsls	r3, r1, #6
    2c72:	1ac0      	subs	r0, r0, r3
    2c74:	4152      	adcs	r2, r2
    2c76:	0943      	lsrs	r3, r0, #5
    2c78:	428b      	cmp	r3, r1
    2c7a:	d301      	bcc.n	2c80 <__divsi3+0x16c>
    2c7c:	014b      	lsls	r3, r1, #5
    2c7e:	1ac0      	subs	r0, r0, r3
    2c80:	4152      	adcs	r2, r2
    2c82:	0903      	lsrs	r3, r0, #4
    2c84:	428b      	cmp	r3, r1
    2c86:	d301      	bcc.n	2c8c <__divsi3+0x178>
    2c88:	010b      	lsls	r3, r1, #4
    2c8a:	1ac0      	subs	r0, r0, r3
    2c8c:	4152      	adcs	r2, r2
    2c8e:	08c3      	lsrs	r3, r0, #3
    2c90:	428b      	cmp	r3, r1
    2c92:	d301      	bcc.n	2c98 <__divsi3+0x184>
    2c94:	00cb      	lsls	r3, r1, #3
    2c96:	1ac0      	subs	r0, r0, r3
    2c98:	4152      	adcs	r2, r2
    2c9a:	0883      	lsrs	r3, r0, #2
    2c9c:	428b      	cmp	r3, r1
    2c9e:	d301      	bcc.n	2ca4 <__divsi3+0x190>
    2ca0:	008b      	lsls	r3, r1, #2
    2ca2:	1ac0      	subs	r0, r0, r3
    2ca4:	4152      	adcs	r2, r2
    2ca6:	d2d9      	bcs.n	2c5c <__divsi3+0x148>
    2ca8:	0843      	lsrs	r3, r0, #1
    2caa:	428b      	cmp	r3, r1
    2cac:	d301      	bcc.n	2cb2 <__divsi3+0x19e>
    2cae:	004b      	lsls	r3, r1, #1
    2cb0:	1ac0      	subs	r0, r0, r3
    2cb2:	4152      	adcs	r2, r2
    2cb4:	1a41      	subs	r1, r0, r1
    2cb6:	d200      	bcs.n	2cba <__divsi3+0x1a6>
    2cb8:	4601      	mov	r1, r0
    2cba:	4663      	mov	r3, ip
    2cbc:	4152      	adcs	r2, r2
    2cbe:	105b      	asrs	r3, r3, #1
    2cc0:	4610      	mov	r0, r2
    2cc2:	d301      	bcc.n	2cc8 <__divsi3+0x1b4>
    2cc4:	4240      	negs	r0, r0
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	d500      	bpl.n	2ccc <__divsi3+0x1b8>
    2cca:	4249      	negs	r1, r1
    2ccc:	4770      	bx	lr
    2cce:	4663      	mov	r3, ip
    2cd0:	105b      	asrs	r3, r3, #1
    2cd2:	d300      	bcc.n	2cd6 <__divsi3+0x1c2>
    2cd4:	4240      	negs	r0, r0
    2cd6:	b501      	push	{r0, lr}
    2cd8:	2000      	movs	r0, #0
    2cda:	f000 f805 	bl	2ce8 <__aeabi_idiv0>
    2cde:	bd02      	pop	{r1, pc}

00002ce0 <__aeabi_idivmod>:
    2ce0:	2900      	cmp	r1, #0
    2ce2:	d0f8      	beq.n	2cd6 <__divsi3+0x1c2>
    2ce4:	e716      	b.n	2b14 <__divsi3>
    2ce6:	4770      	bx	lr

00002ce8 <__aeabi_idiv0>:
    2ce8:	4770      	bx	lr
    2cea:	46c0      	nop			; (mov r8, r8)

00002cec <__libc_init_array>:
    2cec:	b570      	push	{r4, r5, r6, lr}
    2cee:	2600      	movs	r6, #0
    2cf0:	4d0c      	ldr	r5, [pc, #48]	; (2d24 <__libc_init_array+0x38>)
    2cf2:	4c0d      	ldr	r4, [pc, #52]	; (2d28 <__libc_init_array+0x3c>)
    2cf4:	1b64      	subs	r4, r4, r5
    2cf6:	10a4      	asrs	r4, r4, #2
    2cf8:	42a6      	cmp	r6, r4
    2cfa:	d109      	bne.n	2d10 <__libc_init_array+0x24>
    2cfc:	2600      	movs	r6, #0
    2cfe:	f000 f84d 	bl	2d9c <_init>
    2d02:	4d0a      	ldr	r5, [pc, #40]	; (2d2c <__libc_init_array+0x40>)
    2d04:	4c0a      	ldr	r4, [pc, #40]	; (2d30 <__libc_init_array+0x44>)
    2d06:	1b64      	subs	r4, r4, r5
    2d08:	10a4      	asrs	r4, r4, #2
    2d0a:	42a6      	cmp	r6, r4
    2d0c:	d105      	bne.n	2d1a <__libc_init_array+0x2e>
    2d0e:	bd70      	pop	{r4, r5, r6, pc}
    2d10:	00b3      	lsls	r3, r6, #2
    2d12:	58eb      	ldr	r3, [r5, r3]
    2d14:	4798      	blx	r3
    2d16:	3601      	adds	r6, #1
    2d18:	e7ee      	b.n	2cf8 <__libc_init_array+0xc>
    2d1a:	00b3      	lsls	r3, r6, #2
    2d1c:	58eb      	ldr	r3, [r5, r3]
    2d1e:	4798      	blx	r3
    2d20:	3601      	adds	r6, #1
    2d22:	e7f2      	b.n	2d0a <__libc_init_array+0x1e>
    2d24:	00002da8 	.word	0x00002da8
    2d28:	00002da8 	.word	0x00002da8
    2d2c:	00002da8 	.word	0x00002da8
    2d30:	00002dac 	.word	0x00002dac

00002d34 <memset>:
    2d34:	0003      	movs	r3, r0
    2d36:	1882      	adds	r2, r0, r2
    2d38:	4293      	cmp	r3, r2
    2d3a:	d100      	bne.n	2d3e <memset+0xa>
    2d3c:	4770      	bx	lr
    2d3e:	7019      	strb	r1, [r3, #0]
    2d40:	3301      	adds	r3, #1
    2d42:	e7f9      	b.n	2d38 <memset+0x4>
    2d44:	42000800 	.word	0x42000800
    2d48:	42000c00 	.word	0x42000c00
    2d4c:	42001000 	.word	0x42001000
    2d50:	42001400 	.word	0x42001400
    2d54:	42001800 	.word	0x42001800
    2d58:	42001c00 	.word	0x42001c00
    2d5c:	00001e76 	.word	0x00001e76
    2d60:	00001ed4 	.word	0x00001ed4
    2d64:	00001ed4 	.word	0x00001ed4
    2d68:	00001e94 	.word	0x00001e94
    2d6c:	00001e8e 	.word	0x00001e8e
    2d70:	00001e9a 	.word	0x00001e9a
    2d74:	00001e7c 	.word	0x00001e7c
    2d78:	00001ea0 	.word	0x00001ea0
    2d7c:	00001fb0 	.word	0x00001fb0
    2d80:	00001fea 	.word	0x00001fea
    2d84:	00001fea 	.word	0x00001fea
    2d88:	00001fe6 	.word	0x00001fe6
    2d8c:	00001fa2 	.word	0x00001fa2
    2d90:	00001fc2 	.word	0x00001fc2
    2d94:	00001f92 	.word	0x00001f92
    2d98:	00001fd4 	.word	0x00001fd4

00002d9c <_init>:
    2d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d9e:	46c0      	nop			; (mov r8, r8)
    2da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2da2:	bc08      	pop	{r3}
    2da4:	469e      	mov	lr, r3
    2da6:	4770      	bx	lr

00002da8 <__init_array_start>:
    2da8:	000000cd 	.word	0x000000cd

00002dac <_fini>:
    2dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2db2:	bc08      	pop	{r3}
    2db4:	469e      	mov	lr, r3
    2db6:	4770      	bx	lr

00002db8 <__fini_array_start>:
    2db8:	000000a5 	.word	0x000000a5
